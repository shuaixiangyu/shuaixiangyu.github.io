<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>487-3279 POJ（1002电话号码，字符串转整数）</title>
    <url>/2020/06/20/POJ/487-3279-POJ%EF%BC%881002%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1002" target="_blank" rel="noopener">http://poj.org/problem?id=1002</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, num[MAX]=&#123;<span class="number">0</span>&#125;, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//A, B, and C map to 2</span></span><br><span class="line"><span class="comment">//D, E, and F map to 3</span></span><br><span class="line"><span class="comment">//G, H, and I map to 4</span></span><br><span class="line"><span class="comment">//J, K, and L map to 5</span></span><br><span class="line"><span class="comment">//M, N, and O map to 6</span></span><br><span class="line"><span class="comment">//P, R, and S map to 7</span></span><br><span class="line"><span class="comment">//T, U, and V map to 8</span></span><br><span class="line"><span class="comment">//W, X, and Y map to 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp[<span class="number">65</span>]=mp[<span class="number">66</span>]=mp[<span class="number">67</span>]=<span class="number">2</span>;</span><br><span class="line">    mp[<span class="number">68</span>]=mp[<span class="number">69</span>]=mp[<span class="number">70</span>]=<span class="number">3</span>;</span><br><span class="line">    mp[<span class="number">71</span>]=mp[<span class="number">72</span>]=mp[<span class="number">73</span>]=<span class="number">4</span>;</span><br><span class="line">    mp[<span class="number">74</span>]=mp[<span class="number">75</span>]=mp[<span class="number">76</span>]=<span class="number">5</span>;</span><br><span class="line">    mp[<span class="number">77</span>]=mp[<span class="number">78</span>]=mp[<span class="number">79</span>]=<span class="number">6</span>;</span><br><span class="line">    mp[<span class="number">80</span>]=mp[<span class="number">82</span>]=mp[<span class="number">83</span>]=<span class="number">7</span>;</span><br><span class="line">    mp[<span class="number">84</span>]=mp[<span class="number">85</span>]=mp[<span class="number">86</span>]=<span class="number">8</span>;</span><br><span class="line">    mp[<span class="number">87</span>]=mp[<span class="number">88</span>]=mp[<span class="number">89</span>]=<span class="number">9</span>;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] &gt;= <span class="number">65</span>) &#123;sum*=<span class="number">10</span>; sum+=mp[str[i]];&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] &gt;= <span class="number">48</span>) &#123;sum*=<span class="number">10</span>; sum+=(str[i]<span class="number">-48</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[cnt++]=sum;</span><br><span class="line">        str.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    sort(num, num+cnt);</span><br><span class="line">    <span class="keyword">int</span> Noduplicates = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> iter = <span class="number">0</span>, icount = <span class="number">1</span>; iter &lt; cnt - <span class="number">1</span> ; iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        icount = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(num[iter] == num[iter + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            iter++;</span><br><span class="line">            icount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(icount &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Noduplicates = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%03d-%04d %d\n"</span>,num[iter] / <span class="number">10000</span> ,num[iter] % <span class="number">10000</span> ,icount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Noduplicates == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No duplicates."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Max Sum Plus Plus（动态规划）</title>
    <url>/2020/06/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/Max-Sum-Plus-Plus%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
    <content><![CDATA[<h4 id="Max-Sum-Plus-Plus【HDU-1024】"><a href="#Max-Sum-Plus-Plus【HDU-1024】" class="headerlink" title="Max Sum Plus Plus【HDU 1024】"></a>Max Sum Plus Plus【HDU 1024】</h4><p>题意：给出长度为n的一个序列，求将其分成m组的时候，所有组的数的和最大是多少？</p>
<p>设二维数组dp[i][j]代表将前j个数分成i组时得到的和的最大值，那么可以得到状态转移方程：</p>
<p>​        dp[i][j] = max(dp[i][j-1], dp[i-1][k]) + num[j]</p>
<p>其中i-1&lt;=k, k&lt;=j-1</p>
<p>可以看到，每一轮的dp只与上一轮的状态有关，那我们就可以建立一个滚动数组，只记录上一轮dp的结果，从而使得二维数组变为一维数组，减少了一个维度，大大节省了空间。那么这样优化之后得到的状态转移方程为：</p>
<p>​        dp[j] = max(dp[j-1], pre[j-1]) + num[j]</p>
<p>其中dp[j-1]是通过本轮dp得到的，所以代表的是前j-1个数分成i组的最大值，而pre[j-1]是上一轮dp存储的结果，所以代表的是前j-1个数分成i-1组的最大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a,x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n)!=EOF) &#123;</span><br><span class="line">        MEM(pre, <span class="number">0</span>); MEM(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">        <span class="comment">//状态转移方程：dp[j]=max(dp[j-1], pre[j-1])+num[j]; pre是上一个状态</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;  <span class="comment">//分成1、2...m组依次dp</span></span><br><span class="line">            temp = -inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;  <span class="comment">//更新每次dp的dp[j-1]和pre[j-1]的值</span></span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j<span class="number">-1</span>], pre[j<span class="number">-1</span>])+num[j]; <span class="comment">//分成i组时使用的pre[]的值还是i-1那轮保存的，</span></span><br><span class="line">                <span class="comment">//所以pre[j-1]是前j-1个数字分成i-1组时最大的和</span></span><br><span class="line">                pre[j<span class="number">-1</span>]=temp;  <span class="comment">//这轮给pre[]赋的值留到下轮用，所以pre[]记的是被分成[i-1]组时的最大和</span></span><br><span class="line">                temp=<span class="built_in">max</span>(temp,dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hangover POJ（1003放卡片 二分）</title>
    <url>/2020/06/20/POJ/Hangover-POJ%EF%BC%881003%E6%94%BE%E5%8D%A1%E7%89%87-%E4%BA%8C%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1003" target="_blank" rel="noopener">http://poj.org/problem?id=1003</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> mp[<span class="number">300</span>];  <span class="comment">//这个预处理的数组必须定义全局，不然会runtimelimitexceeded</span></span><br><span class="line"><span class="comment">//样本输入</span></span><br><span class="line"><span class="comment">//1.00</span></span><br><span class="line"><span class="comment">//3.71</span></span><br><span class="line"><span class="comment">//0.04</span></span><br><span class="line"><span class="comment">//5.19</span></span><br><span class="line"><span class="comment">//0.00</span></span><br><span class="line"><span class="comment">//样本输出</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//3张卡</span></span><br><span class="line"><span class="comment">//61张卡</span></span><br><span class="line"><span class="comment">//1张卡</span></span><br><span class="line"><span class="comment">//273张卡</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">300</span>; ++i)</span><br><span class="line">        mp[i] = mp[i<span class="number">-1</span>] + <span class="number">1.0</span>/i ;   <span class="comment">//找到需要的卡牌数后要减一</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;val)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val - <span class="number">0</span> &lt; eps) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> n = lower_bound(mp, mp+<span class="number">300</span>, val) - mp;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d card(s)\n"</span>, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round</title>
    <url>/2020/06/20/cf/Codeforces-Round-#632-(Div.-2)/</url>
    <content><![CDATA[<p>contest link: <a href="https://codeforces.ml/blog/entry/75802" target="_blank" rel="noopener">https://codeforces.ml/blog/entry/75802</a></p>
<h4 id="1-颜色搭配（脑洞题）"><a href="#1-颜色搭配（脑洞题）" class="headerlink" title="1.颜色搭配（脑洞题）"></a>1.颜色搭配（脑洞题）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;row, &amp;col);</span><br><span class="line">        <span class="keyword">if</span>(row*col%<span class="number">2</span>)  <span class="comment">//奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    <span class="keyword">else</span> mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;<span class="number">1</span>) mp[i][col] = <span class="string">'B'</span>;</span><br><span class="line">                <span class="keyword">else</span> mp[i][col] = <span class="string">'W'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mp[<span class="number">1</span>][<span class="number">1</span>] = mp[<span class="number">1</span>][<span class="number">2</span>] = mp[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'B'</span>;</span><br><span class="line">            mp[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">'W'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= col; i++) &#123;</span><br><span class="line">                mp[<span class="number">1</span>][i] = <span class="string">'W'</span>;</span><br><span class="line">                mp[<span class="number">2</span>][i] = <span class="string">'B'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(row&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= row; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                        <span class="keyword">else</span> mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= row; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                        <span class="keyword">else</span> mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;           </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, mp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>题解：</li>
</ul>
<p>看到这个题解后，我，，，太巧妙了吧 ！果然一开始就被给出的样例给绕进去了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">black_row</span><span class="params">(m, <span class="string">'B'</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">result</span><span class="params">(n, black_row)</span></span>;</span><br><span class="line">    result[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'W'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; result[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>这道题也算是一道思考题，</p>
<p>我的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> minus = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> plus = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            val[i] = x;</span><br><span class="line">            <span class="keyword">if</span>(plus==<span class="number">-1</span> &amp;&amp; x &gt; <span class="number">0</span>) plus = i;</span><br><span class="line">            <span class="keyword">if</span>(minus==<span class="number">-1</span> &amp;&amp; x &lt; <span class="number">0</span>) minus = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minus == <span class="number">-1</span>) minus = inf;</span><br><span class="line">        <span class="keyword">if</span>(plus == <span class="number">-1</span>) plus = inf;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[i] &lt; x &amp;&amp; plus &gt;= i) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(val[i] &gt; x &amp;&amp; minus &gt;= i) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>题解（其实差不多啦）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    vector&lt;int&gt; a(n), b(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">good</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; b[i] &amp;&amp; !good[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i] &amp;&amp; !good[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">-1</span>) good[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>) good[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Eugen’s-Substract"><a href="#3-Eugen’s-Substract" class="headerlink" title="3. Eugen’s Substract"></a>3. Eugen’s Substract</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1005(I think I need a houseboat)</title>
    <url>/2020/06/20/POJ/I%20Think%20I%20Need%20a%20Houseboat%EF%BC%881005%EF%BC%89/</url>
    <content><![CDATA[<h3 id="POJ1005-I-think-I-need-a-houseboat"><a href="#POJ1005-I-think-I-need-a-houseboat" class="headerlink" title="POJ1005(I think I need a houseboat)"></a>POJ1005(I think I need a houseboat)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926535</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">double</span> area = pi * (x*x+y*y) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> years = <span class="keyword">int</span>(area / <span class="number">50</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Property %d: This property will begin eroding in year %d.\n"</span>, i, years);</span><br><span class="line">        <span class="keyword">if</span>(i == n) <span class="built_in">printf</span>(<span class="string">"END OF OUTPUT."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1006 DNA Sorting</title>
    <url>/2020/06/26/POJ/POJ-1007-DNA%20Sorting/</url>
    <content><![CDATA[<p>POJ 1006 DNA Sorting</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJ 1007 DNA Sorting</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s[MAX];</span><br><span class="line"><span class="keyword">int</span> val[MAX]=&#123;<span class="number">0</span>&#125;, r[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; i, <span class="keyword">const</span> <span class="keyword">int</span>&amp; j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val[i] &lt; val[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; len &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        r[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p= <span class="number">0</span>; p &lt; n; ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[p][i]&gt;s[p][j]) ++val[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(r, r+n, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[r[i]] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>光骓者的荣耀（前缀和+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E5%85%89%E9%AA%93%E8%80%85%E7%9A%84%E8%8D%A3%E8%80%80%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/04/12/GqLo38.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*测试数据</span><br><span class="line">input:</span><br><span class="line">3 4 2</span><br><span class="line">1 2 3 1</span><br><span class="line">-1 9 0 2</span><br><span class="line">2 0 1 1</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">1 2</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">int sum[maxn][maxn];</span><br><span class="line">pair&lt;int, int&gt; good;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m, s;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    s-&#x3D;1;</span><br><span class="line">    good.first &#x3D; 1;</span><br><span class="line">    good.second &#x3D; 1;</span><br><span class="line">    memset(sum, 0, sizeof(sum));</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        for(int j &#x3D; 1; j&lt;&#x3D; m; j++) &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] +&#x3D; sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    int maximum &#x3D; -inf;</span><br><span class="line">    for(int i &#x3D; 1; i + s&lt;&#x3D; n; ++i)</span><br><span class="line">        for(int j &#x3D; 1; j + s&lt;&#x3D; m; ++j) &#123;</span><br><span class="line">            int p &#x3D; i + s, q &#x3D; j + s;</span><br><span class="line">            if(p &lt;&#x3D; n &amp;&amp; q &lt;&#x3D; m) &#123;</span><br><span class="line">                int temp &#x3D; sum[p][q]-sum[p][j-1]-sum[i-1][q]+sum[i-1][j-1];</span><br><span class="line">                if(maximum &lt; temp) &#123;</span><br><span class="line">                    good.first &#x3D; i;</span><br><span class="line">                    good.second &#x3D; j;</span><br><span class="line">                    maximum &#x3D; temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;%d %d\n&quot;, good.first, good.second);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;          </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.luogu.com.cn/problem/P5638" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P5638</a></p>
]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1008 Maya Calendar</title>
    <url>/2020/06/26/POJ/POJ-1008-Maya-Calendar/</url>
    <content><![CDATA[<p>POJ 1008 Maya Calendar</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJ 1008 Maya Calendar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tzolkin[<span class="number">21</span>][<span class="number">10</span>]=&#123;<span class="string">"sxy"</span>,<span class="string">"imix"</span>, <span class="string">"ik"</span>, <span class="string">"akbal"</span>, <span class="string">"kan"</span>, <span class="string">"chicchan"</span>, <span class="string">"cimi"</span>, <span class="string">"manik"</span>, <span class="string">"lamat"</span>, <span class="string">"muluk"</span>, <span class="string">"ok"</span>, <span class="string">"chuen"</span>, <span class="string">"eb"</span>, <span class="string">"ben"</span>, <span class="string">"ix"</span>, <span class="string">"mem"</span>, <span class="string">"cib"</span>, <span class="string">"caban"</span>, <span class="string">"eznab"</span>, <span class="string">"canac"</span>, <span class="string">"ahau"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Haab</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    sum += year*<span class="number">365</span>;</span><br><span class="line">    sum += (month<span class="number">-1</span>)*<span class="number">20</span>;</span><br><span class="line">    sum += day+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tzolkin</span><span class="params">(<span class="keyword">int</span> days, <span class="keyword">int</span>&amp; t_year, <span class="keyword">int</span>&amp; t_day, <span class="keyword">int</span>&amp; t_mark)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t_year = days / <span class="number">260</span>;</span><br><span class="line">    <span class="keyword">int</span> res_days = days % <span class="number">260</span>;</span><br><span class="line">    <span class="keyword">if</span>(!res_days)</span><br><span class="line">    &#123;</span><br><span class="line">        t_year--;</span><br><span class="line">        t_day=<span class="number">13</span>;</span><br><span class="line">        t_mark=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t_day = res_days%<span class="number">13</span>?res_days%<span class="number">13</span>:<span class="number">13</span>;</span><br><span class="line">    t_mark = res_days%<span class="number">20</span>?res_days%<span class="number">20</span>:<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> day, year,month;</span><br><span class="line">    <span class="built_in">string</span> mon;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; day &gt;&gt; mon &gt;&gt; mon &gt;&gt; year;</span><br><span class="line">        <span class="keyword">if</span> (mon ==<span class="string">"pop"</span>) month=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"no"</span>) month=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"zip"</span>) month=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"zotz"</span>) month=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"tzec"</span>) month=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"xul"</span>) month=<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"yoxkin"</span>) month=<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"mol"</span>) month=<span class="number">8</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"chen"</span>) month=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mon ==<span class="string">"yax"</span>) month=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"zac"</span>) month=<span class="number">11</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"ceh"</span>) month=<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"mac"</span>) month=<span class="number">13</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"kankin"</span>) month=<span class="number">14</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"muan"</span>) month=<span class="number">15</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"pax"</span>) month=<span class="number">16</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"koyab"</span>) month=<span class="number">17</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon==<span class="string">"cumhu"</span>) month=<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mon == <span class="string">"uayet"</span>) month=<span class="number">19</span>;</span><br><span class="line">        <span class="keyword">int</span> t_year, t_day, t_mark;</span><br><span class="line">        Tzolkin(Haab(year,month,day),t_year,t_day,t_mark);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; t_day &lt;&lt; <span class="string">' '</span> &lt;&lt; tzolkin[t_mark] &lt;&lt; <span class="string">' '</span> &lt;&lt; t_year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试点</span></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 0. pop 0</span></span><br><span class="line"><span class="comment">// 19. mac 0</span></span><br><span class="line"><span class="comment">// 0. kankin 0</span></span><br><span class="line"><span class="comment">// 1. kankin 0</span></span><br><span class="line"><span class="comment">// 4. uayet 0</span></span><br><span class="line"><span class="comment">// 4. uayet 259</span></span><br><span class="line"><span class="comment">// 12. cumhu 1845</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 1 imix 0</span></span><br><span class="line"><span class="comment">// 13 ahau 0</span></span><br><span class="line"><span class="comment">// 1 imix 1</span></span><br><span class="line"><span class="comment">// 2 ik 1</span></span><br><span class="line"><span class="comment">// 1 chicchan 1</span></span><br><span class="line"><span class="comment">// 13 ahau 364</span></span><br><span class="line"><span class="comment">// 1 eznab 2591</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>dynamic programming（dp）</title>
    <url>/2020/06/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="1-最长公共子序列"><a href="#1-最长公共子序列" class="headerlink" title="1.最长公共子序列"></a>1.最长公共子序列</h2><h4 id="（1）【POJ-1458-Common-Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc-与-abfcab-都有-按从左往右的顺序-abcb。"><a href="#（1）【POJ-1458-Common-Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc-与-abfcab-都有-按从左往右的顺序-abcb。" class="headerlink" title="（1）【POJ 1458 Common Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc 与 abfcab 都有(按从左往右的顺序)abcb。"></a>（1）【<a href="https://vjudge.net/problem/POJ-1458" target="_blank" rel="noopener"><strong>POJ 1458</strong></a> Common Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc 与 abfcab 都有(按从左往右的顺序)abcb。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dp[i][j]表示在a[i]和b[j]之前共有的元素的个数</span><br></pre></td></tr></table></figure>

<p>状态转移方程：for循环两重遍历后：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="keyword">while</span>( ~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b) ) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">strlen</span>(a), y = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[x][y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-单调递增序列问题"><a href="#2-单调递增序列问题" class="headerlink" title="2.单调递增序列问题"></a>2.单调递增序列问题</h2><h4 id="1-求单调递增最长序列【POJ-2533-Longest-Ordered-Subssequence】"><a href="#1-求单调递增最长序列【POJ-2533-Longest-Ordered-Subssequence】" class="headerlink" title="(1)求单调递增最长序列【POJ 2533 Longest Ordered Subssequence】"></a>(1)求单调递增最长序列【<a href="https://vjudge.net/problem/POJ-2533" target="_blank" rel="noopener">POJ 2533</a> Longest Ordered Subssequence】</h4><p>如：1 7 3 5 9 4 8 这个序列的单调递增序列最长有4个元素， 其中一个序列是1 3 5 8</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1006</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(val[i] &gt; val[j]) dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn = <span class="built_in">max</span>(dp[i], maxn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-求单调递增最长序列【HDU-1087-Super-Jumping】"><a href="#2-求单调递增最长序列【HDU-1087-Super-Jumping】" class="headerlink" title="(2)求单调递增最长序列【HDU 1087 Super Jumping】"></a>(2)求单调递增最长序列【<a href="https://vjudge.net/problem/HDU-1087" target="_blank" rel="noopener">HDU 1087</a> Super Jumping】</h4><p>求单调递增且所有元素之和最大的子序列，答案要求输出最大和，该子序列的开头和结尾元素必须是父序列的最小值和最大值</p>
<p>如：1 3 2 输出 4</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + val[i]);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> maxn = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = val[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[i] &gt; val[j]) dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + val[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            maxn = <span class="built_in">max</span>(dp[i], maxn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-求单调递增最长序列【POJ-3616-Milking-Time】"><a href="#3-求单调递增最长序列【POJ-3616-Milking-Time】" class="headerlink" title="(3)求单调递增最长序列【POJ 3616 Milking Time】"></a>(3)求单调递增最长序列【<a href="https://vjudge.net/problem/POJ-3616" target="_blank" rel="noopener">POJ 3616</a> Milking Time】</h4><p>类似于求单调递增最长子序列的问题，该题中下一次挤奶的开始时间必须大于等于上一次挤奶的结束时间+r，求出最大的挤奶量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FJ</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> st;</span><br><span class="line">    <span class="keyword">int</span> ed;</span><br><span class="line">    <span class="keyword">int</span> liq;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> FJ&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed != a.ed) <span class="keyword">return</span> ed &lt; a.ed;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> st &gt; a.st;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;fj[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, r;  <span class="comment">//奶牛产奶的总时长，FJ的可挤奶间歇数，奶牛每次挤奶后的休息时间</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;fj[i].st, &amp;fj[i].ed, &amp;fj[i].liq);</span><br><span class="line">    sort(fj, fj + m);</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i] = fj[i].liq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fj[j].ed + r &lt;= fj[i].st) dp[i] = <span class="built_in">max</span>(dp[i], fj[i].liq + dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（4）求构造一个单调递增-减序列的最小代价【POJ-3666-Making-the-Grade】"><a href="#（4）求构造一个单调递增-减序列的最小代价【POJ-3666-Making-the-Grade】" class="headerlink" title="（4）求构造一个单调递增/减序列的最小代价【POJ 3666 Making the Grade】"></a>（4）求构造一个单调递增/减序列的最小代价【<a href="https://vjudge.net/problem/POJ-3666" target="_blank" rel="noopener">POJ 3666</a> Making the Grade】</h4><p>类型：dp+离散化</p>
<p>首先这道题给出的数据范围到亿，是非常大的，所以我们不能直接进行遍历，需要对其进行数据离散化处理，而由题意易知每个单调递增序列的最大值一定是序列中的某个值，这样就可以对数据进行离散化处理，不是序列中的数就可以不对其进行遍历。构造单调递增/减序列的最小代价是等价的，二者互为逆向，所以这道题只需要写出一种情况就可以。</p>
<ul>
<li><p>先考虑构造一个二维数组dp的情况：a[n-1]储存的是原始数据的数组，b[n-1]是对a[n-1]进行从小到大排序之后的数组，dp[i][j]表示序列前i个数当最大值为b[j]时的数组，那么就可以得到状态转移方程：dp[i][j] = abs(a[i] - b[j]) + dp[i-1][k]  (k &lt;= j)</p>
<p>用代码阐释：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ll solveup</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[<span class="number">0</span>][i] = <span class="built_in">abs</span>(a[<span class="number">0</span>]-b[i]);</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            dp[i][j] = <span class="built_in">abs</span>(a[i]-b[j]) + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[n<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[n<span class="number">-1</span>][i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于二维数组占用内存太大，下面再考虑构造一维滚动数组的情况：a,b数组如上所述，建立一个dp[n-1]的数组，表示当前轮次（序列为前多少个数）的dp[j]是当序列里最大的数为b[j]时所付出的最小代价。那么现在得到的状态转移方程为：dp[j] = dp[k] + abs(a[i]-b[j])  (k &lt;= j)</p>
<p>用具体代码阐释：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solveup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i] = <span class="built_in">abs</span>(a[<span class="number">0</span>]-b[i]);</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[j]);</span><br><span class="line">            dp[j] = v + <span class="built_in">abs</span>(a[i]-b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2020</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line">ll dp[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solveup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(b, b+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i] = <span class="built_in">abs</span>(a[<span class="number">0</span>] - b[i]);</span><br><span class="line">    <span class="keyword">register</span> ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[j]);</span><br><span class="line">            dp[j] = v + <span class="built_in">abs</span>(a[i] - b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        a[i] = b[i] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solveup());</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h2 id="3-区间dp"><a href="#3-区间dp" class="headerlink" title="3.区间dp"></a>3.区间dp</h2><p>区间DP，顾名思义是在区间上DP，它的主要思想就是先在小区间进行DP得到最优解，然后再利用小区间的最优解合并求大区间的最优解。</p>
<h4 id="1-【POJ-3186-Treats-for-the-Cows】"><a href="#1-【POJ-3186-Treats-for-the-Cows】" class="headerlink" title="(1)【POJ 3186 Treats for the Cows】"></a>(1)【<a href="https://vjudge.net/problem/POJ-3186" target="_blank" rel="noopener">POJ 3186</a> Treats for the Cows】</h4><p>给出的一系列的数字，可以看成一个双向队列，每次只能从队首或者队尾出队，第n个出队就拿这个数乘以n，最后将和加起来，求最大和</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i+<span class="number">1</span>][j]+a[i]*(n-len), dp[i][j<span class="number">-1</span>]+a[j]*(n-len));</span><br></pre></td></tr></table></figure>

<p>完整代码：(先枚举区间长度，再枚举起点，从而确定终点)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> val[<span class="number">2020</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2020</span>][<span class="number">2020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line">        dp[i][i] = val[i] * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; ++len) <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;<span class="comment">//枚举起点</span></span><br><span class="line">            <span class="keyword">int</span> j = i + len; <span class="comment">//j为枚举终点</span></span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j<span class="number">-1</span>] + val[j] * (n - len), dp[i+<span class="number">1</span>][j] + val[i] * (n - len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-记忆化搜索-dp"><a href="#4-记忆化搜索-dp" class="headerlink" title="4.记忆化搜索+dp"></a>4.记忆化搜索+dp</h2><p>在dfs搜索的时候加入dp进行节点记忆优化，以防超时</p>
<h4 id="（1）【HDU-1078-Fatmouse-and-Cheese"><a href="#（1）【HDU-1078-Fatmouse-and-Cheese" class="headerlink" title="（1）【HDU 1078 Fatmouse and Cheese]"></a>（1）【<a href="https://vjudge.net/problem/HDU-1078" target="_blank" rel="noopener">HDU 1078</a> Fatmouse and Cheese]</h4><p>记忆化搜索，下一步只能走到比上一步点数更大的点，每一步只能水平或者垂直走，走的步数有限制，为k， 给出一个大小为nxn的点数图</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1002</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[x][y]) <span class="keyword">return</span> dp[x][y];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = x + j * dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y1 = y + j * dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x1 &lt; <span class="number">0</span> || x1 &gt;= n || y1 &lt; <span class="number">0</span> || y1 &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[x1][y1] &gt; mp[x][y]) sum = <span class="built_in">max</span>(sum, dfs(x1, y1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x][y] = sum + mp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mp[i][j]);</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">0</span>,<span class="number">0</span>));   </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-最大对称子图"><a href="#5-最大对称子图" class="headerlink" title="5.最大对称子图"></a>5.最大对称子图</h2><ul>
<li><p>给你一个n*n的字符矩阵，从中选出一个最大的子矩阵（m*m）满足关于斜对角线（左下角到右上角）对称，求出这个矩阵的大小m；</p>
</li>
<li><p>我们可以用dp[i][j]表示当前位置到右上角这个子矩阵所能表示对称的矩阵最大值；</p>
</li>
</ul>
<h4 id="1-HDU-2859-Phalanx"><a href="#1-HDU-2859-Phalanx" class="headerlink" title="(1) [HDU 2859 Phalanx]"></a>(1) [<a href="https://vjudge.net/problem/HDU-2859" target="_blank" rel="noopener">HDU 2859</a> Phalanx]</h4><p><img src="https://images2015.cnblogs.com/blog/714429/201511/714429-20151104154045461-1769975329.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">状态转移方程：dp[i][j] = t &gt; dp[i<span class="number">-1</span>][j+<span class="number">1</span>] ? dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">1</span> : t;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1006</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;        </span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]);</span><br><span class="line">        <span class="keyword">int</span> maximum = <span class="number">1</span>;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!i) &#123;dp[i][j] = <span class="number">1</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">int</span> x = j, y = i;</span><br><span class="line">                <span class="keyword">while</span>(x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; mp[i][x] == mp[y][j])</span><br><span class="line">                &#123;++x; --y;&#125;</span><br><span class="line">                <span class="keyword">int</span> t = x - j; </span><br><span class="line">                dp[i][j] = t &gt; dp[i<span class="number">-1</span>][j+<span class="number">1</span>] ? dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">1</span> : t;  <span class="comment">//状态转移方程</span></span><br><span class="line">                maximum = <span class="built_in">max</span>(maximum, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maximum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dp[i][j]在markdown语言想敲出来要在两个方括号中间加一个转义符&#39;\‘, 才能打出来：][</li>
</ul>
]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>地毯（前缀和与差分）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E5%9C%B0%E6%AF%AF%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">2 2 3 3</span></span><br><span class="line"><span class="comment">3 3 5 5</span></span><br><span class="line"><span class="comment">1 2 1 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">0 1 1 1 0</span></span><br><span class="line"><span class="comment">0 1 1 0 0</span></span><br><span class="line"><span class="comment">0 1 2 1 1</span></span><br><span class="line"><span class="comment">0 0 1 1 1</span></span><br><span class="line"><span class="comment">0 0 1 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">int</span> x, y, a, b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= a; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i][y]++;</span><br><span class="line">            sum[i][b+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//val[i][j] = mp[i][j]+sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            sum[i][j] += sum[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, sum[i][j]); <span class="comment">//这里注意要输出一个空格</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1006 Biorhythms</title>
    <url>/2020/06/21/POJ/POJ-1006-Biorhythms/</url>
    <content><![CDATA[<a id="more"></a>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJ 1006 Biorhythms</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p, e, i, date, cnt=<span class="number">0</span>;  <span class="comment">//23,28,33</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;p, &amp;e, &amp;i, &amp;date))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">-1</span>&amp;&amp;i==<span class="number">-1</span>&amp;&amp;e==<span class="number">-1</span>&amp;&amp;date==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> p_0 = p % <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">int</span> e_0 = e % <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">int</span> i_0 = i % <span class="number">33</span>;</span><br><span class="line">        <span class="keyword">int</span> st, m_p, m_e, m_i, mark=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (date &lt; i_0) st = i_0;</span><br><span class="line">        <span class="keyword">else</span> st = ((date-i_0)/<span class="number">33</span>+<span class="number">1</span>)*<span class="number">33</span>+i_0;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            m_i = st + j * <span class="number">33</span>;</span><br><span class="line">            <span class="keyword">if</span>((m_i - e_0)&gt;=<span class="number">0</span>&amp;&amp;(m_i - e_0) % <span class="number">28</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((m_i - p_0)&gt;=<span class="number">0</span>&amp;&amp;(m_i - p_0) % <span class="number">23</span> == <span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    mark = j;                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mark &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ++cnt &lt;&lt; <span class="string">": the next triple peak occurs in "</span> &lt;&lt; st+mark*<span class="number">33</span>-date &lt;&lt; <span class="string">" days."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>最大加权矩形（二维前缀和+奇技淫巧）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%9C%80%E5%A4%A7%E5%8A%A0%E6%9D%83%E7%9F%A9%E5%BD%A2%EF%BC%88%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C+%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%EF%BC%89/</url>
    <content><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><img src="http://chuantu.xyz/t6/728/1586601125x1700468773.jpg" alt=""></p>
<h4 id="解题报告："><a href="#解题报告：" class="headerlink" title="解题报告："></a>解题报告：</h4><p>这道题可以说就是一道二维前缀和的板子题，值得一提的是有种奇技淫巧、、</p>
<p>对比一下，我的：</p>
<p><img src="http://chuantu.xyz/t6/728/1586601667x2099719707.jpg" alt=""></p>
<p>奇技淫巧式：</p>
<p><img src="http://chuantu.xyz/t6/728/1586601580x2099719707.jpg" alt=""></p>
<p>由此可见奇技淫巧是多么省时间</p>
<h5 id="my-二维前缀和的做法："><a href="#my-二维前缀和的做法：" class="headerlink" title="my 二维前缀和的做法："></a>my 二维前缀和的做法：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试样例：</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">0 -2 -7 0</span></span><br><span class="line"><span class="comment"> 9 2 -6 2</span></span><br><span class="line"><span class="comment">-4 1 -4  1 </span></span><br><span class="line"><span class="comment">-1 8  0 -2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">126</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)求二维数组前缀和：sum[i][j] = </span></span><br><span class="line"><span class="comment">//sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];</span></span><br><span class="line"><span class="comment">//(2)用前缀数组分别以(x1,y1)(x2,y2)为顶点的矩形的和：</span></span><br><span class="line"><span class="comment">//sum[x2][y2] - sum[x2][y1-1] - sum[x1-1][y2] + sum[x1-1][y1-1];</span></span><br><span class="line"><span class="comment">//(3)差分数组只有当需要对原数组的数据进行更改的时候才会用到</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] += sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> maxn = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="comment">//以(i,j)为左上顶点，(p,q)为右下顶点枚举</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = i; p &lt;= n; ++p)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q = j; q &lt;= n; ++q) &#123;</span><br><span class="line">                    <span class="comment">//temp是以(i,j)为左上顶点，(p,q)为右下顶点的矩形大小</span></span><br><span class="line">                    temp = sum[p][q]-sum[i<span class="number">-1</span>][q]-sum[p][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                    maxn = <span class="built_in">max</span>(maxn, temp);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="奇技淫巧式做法："><a href="#奇技淫巧式做法：" class="headerlink" title="奇技淫巧式做法："></a>奇技淫巧式做法：</h4><blockquote>
<p>该题算是P1115 最大子段和的一个升级版，其实思想差不多，都是DP，只不过该题需要先进行一个矩阵压缩，即二维变一维。</p>
<p><strong>矩阵压缩：</strong></p>
<p>假设有一个矩阵：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>如何对它进行压缩呢，其实不难，这边我做一个类比，如果我们把一行看做一个数，这里看做三个数a,b,c,那么将这三个相邻数的进行不同的组合，将这个新的组合视为一个新的数，这就是进行压缩处理，例如a,b,c可以组合为{[a],[ab],[abc],[b],[bc],[c]}，而矩阵压缩也类似。</p>
<p>先设置一个变量max用于保存压缩后的一维数组的最大子序列和。</p>
<p>第一次我们取第一行：</p>
<p>-5 6 4</p>
<p>则其最大子序列和为10，max=10。</p>
<p>第二次取第一二行：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>注意现在开始是矩阵压缩的精髓，我们将每一列的数进行相加，将多行变为一行。</p>
<p>第一列：-5+1=-4</p>
<p>第二列：6+(-2)=4</p>
<p>第三列：4+6=10</p>
<p>所以压缩后的一维数组为：</p>
<p>-4 4 10</p>
<p>则其最大子序列和为14，max=14。</p>
<p>第三次取第一二三行：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>对每一列进行压缩：</p>
<p>第一列：-5+1+2=-2</p>
<p>第二列：6+(-2)+1=5</p>
<p>第三列：4+6+(-3)=7</p>
<p>所以压缩后的一维数组为：</p>
<p>-2 5 7</p>
<p>则其最大子序列和为12，max=14。</p>
<p>第四次取第二行：</p>
<p>1 -2 6</p>
<p>则其最大子序列和为6，max=14。</p>
<p>第五次取第二三行：</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>对每一列进行压缩：</p>
<p>第一列：1+2=3</p>
<p>第二列：-2+1=-1</p>
<p>第三列：6+(-3)=3</p>
<p>所以压缩后的一维数组为：</p>
<p>3 -1 3</p>
<p>则其最大子序列和为5，max=14。</p>
<p>第六次取第三行：</p>
<p>2 1 -3</p>
<p>则其最大子序列和为3，max=14。</p>
<p>最后求得这个矩阵最大的子矩阵和为14</p>
<p>也就是第一二行的三四列</p>
<p>6 4</p>
<p>-2 6</p>
</blockquote>
<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> infinitesimal  -2100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> lli;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Created with IntelliJ Clion.</span></span><br><span class="line"><span class="comment"> *  @author  wanyu</span></span><br><span class="line"><span class="comment"> *  @Date: 2018-04-24</span></span><br><span class="line"><span class="comment"> *  @Time: 08:43</span></span><br><span class="line"><span class="comment"> *  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(t, x) memset(t,x,sizeof(t))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(a, b, c) for(int a=b;a&lt;=c;a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop2(a, b, c) for(int a=b;a&gt;=c;a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop3(a, b, c) for(int a=b;a&lt;c;a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop4(a, b, c) for(int a=b;a&gt;c;a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 150</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 20</span></span><br><span class="line"><span class="keyword">int</span> n, m, t;</span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans = infinitesimal;</span><br><span class="line"><span class="keyword">int</span> temp[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Arrsum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mset(dp, <span class="number">0</span>);</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], dp[i - <span class="number">1</span>] + temp[i]);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        mset(temp, <span class="number">0</span>);</span><br><span class="line">        loop(j, i, n) &#123;</span><br><span class="line">            loop(k, <span class="number">1</span>, n) &#123;</span><br><span class="line">                temp[k] += matrix[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            Arrsum();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        loop(j, <span class="number">1</span>, n) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MatrixSum();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子段和（前缀和）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/728/1586660536x2073513012.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">2 -4 3 -1 2 -4 3</span></span><br><span class="line"><span class="comment">output:4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxn = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum &gt; <span class="number">0</span> ? sum : <span class="number">0</span>; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        sum += x;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, sum);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>求和</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/727/1586423098x2099719707.jpg" alt=""></p>
<p>要求的是：$\sum\limits_{i=1}^n(x_i+z_i)(ID_x+ID_z)$     （注：$x_i$是纸条编号为$ID_x$时候的值）</p>
<p>我们将这个式子化简得到：$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$    <strong>（*)</strong></p>
<p>再观察这个题目，发现可行的一对$(ID_x, ID_z)$ 必须满足的条件是：$ID_x$和$ID_z$的奇偶性必须相同，这样才能使得点y到点x和点z的距离相等，这个用数学方法很容易证明，如：</p>
<p>（1）若$ID_y$为奇数：</p>
<p>奇数-奇数=偶数，奇数+奇数=偶数； 奇数-偶数=奇数，奇数+奇数=奇数；</p>
<p>（2）同理可证当$ID_y$为偶数的情况</p>
<p>有了上面的结论，就可以把纸带上的点进行分类，首先根据点的奇偶性分出来两个集合，然后把每个集合内部的点根据是否是同一种颜色再分成一个个小集合（储存的是点的$ID$，即奇偶性和颜色都相同的点的集合，使用变长数组$vector$进行储存），储存时注意要按照$ID$的大小从小到大储存，因为x是要小于z的。</p>
<p>当我们对小集合内部进行<strong>(*)</strong>式的累加时，对其使用数学手段进行优化：</p>
<p>假设这个小集合内部有5个点，分别以$x,y,a,b,z$ 代替，</p>
<img src="http://chuantu.xyz/t6/727/1586425311x2099719707.png" style="zoom:67%;" />

<p>可以看到每个点都可以与其他的点相连，每个点可以连4条边，但是重复的边要去掉，那么对于这个式子:$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$    <strong>（*)</strong></p>
<p>先要理解$(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$表示的是点$x_i$和点$z_i$连成一条边时候的一个三元组的和。那么图中的这5个点可以连成的边有：$(x,y),(x,a),(x,b),(x,z),(y,a),(y,b),(y,z),(a,b),(a,z),(b,z)$   ，每个点都连有4条边，所以<strong>(*)</strong>式展开后系数为$x_i,y_i,a_i,b_i,z_i $的项各有8个，这样下面的式子化简就好理解了。</p>
<p>只看系数为$x_i$的项，考虑到点x和其他所有点都连出一条边，则只包含系数$x_i$的项的总和为：$4xID_x+x(ID_y+ID_a+ID_b+ID_z) = 3xID_x+x(ID_x+ID_y+ID_a+ID_b+ID_z)=3xID_x+x\sum\limits_{i=x}^zID_i$</p>
<p>同理可得只包含系数$y_i$的项的总和为：$3yID_y+y\sum\limits_{i=x}^zID_i$</p>
<p>所以$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z3mID_m+\sum\limits_{m=x}^z(m\sum\limits_{n=x}^zID_n)$ </p>
<p>推广到n个点，$(n-1)$ 条边，则有：$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^z(m\sum\limits_{n=x}^zID_n)$ </p>
<p>另外值得一提的是，由于$x$与$ID_x$的地位相同，上式还可以写成：</p>
<p>$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^z(ID_m\sum\limits_{n=x}^zn)$ </p>
<p>此外，题目数据较大，结果要模10007，但为了以防数据范围溢出，我们可以在每一个计算的地方都模10007。</p>
<p>附，模运算公式：</p>
<ul>
<li>(a + b) % p = (a%p + b%p) %p</li>
<li>(a - b) % p = ((a%p - b%p) + p) %p</li>
<li>(a * b) % p = (a%p)*(b%p) %p</li>
</ul>
<p>则有：$\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^zID_m\sum\limits_{n=x}^zn=\sum\limits_{m=x}^z(n-2)%10007m%10007ID_m%10007+\sum\limits_{m=x}^z(ID_m%10007\sum\limits_{n=x}^zn%10007)$  </p>
<p>根据上面的式子，就容易理解代码了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试用样例</span></span><br><span class="line"><span class="comment">6 2</span></span><br><span class="line"><span class="comment">5 5 3 2 2 2</span></span><br><span class="line"><span class="comment">2 2 1 1 2 1</span></span><br><span class="line"><span class="comment">output: 82</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">15 4</span></span><br><span class="line"><span class="comment">5 10 8 2 2 2 9 9 7 7 5 6 4 2 4</span></span><br><span class="line"><span class="comment">2 2 3 3 4 3 3 2 4 4 4 4 1 1 1</span></span><br><span class="line"><span class="comment">output: 1388</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 10007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>; <span class="comment">//最多有maxn种颜色</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; odd[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; even[maxn];</span><br><span class="line">ll val[maxn];  <span class="comment">//点所对应的值</span></span><br><span class="line">ll n, m; <span class="comment">//n个点，m种颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</span><br><span class="line">    ll color;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;color);</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) odd[color].push_back(i);</span><br><span class="line">        <span class="keyword">else</span> even[color].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//到此输入全部完成</span></span><br><span class="line">    ll total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= m; ++t) <span class="comment">//列举每种颜色</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//开始计算奇数且颜色为t的集合的三元组的总和</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = odd[t].<span class="built_in">size</span>();        </span><br><span class="line">        ll val_sum = <span class="number">0</span>;        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            val_sum += val[odd[t][i]]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            total += ((<span class="built_in">size</span><span class="number">-2</span>)%mod*odd[t][i]%mod*</span><br><span class="line">            val[odd[t][i]]%mod+odd[t][i]%mod*val_sum%mod)%mod; </span><br><span class="line">            total %= mod;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始计算偶数且颜色为t的集合的三元组的总和</span></span><br><span class="line">        <span class="built_in">size</span> = even[t].<span class="built_in">size</span>();        </span><br><span class="line">        val_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            val_sum += val[even[t][i]]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            total += ((<span class="built_in">size</span><span class="number">-2</span>)%mod*even[t][i]%mod*</span><br><span class="line">            val[even[t][i]]%mod+even[t][i]%mod*val_sum%mod)%mod;</span><br><span class="line">            total %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, total%mod);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>海底高铁（前缀和+差分+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%B5%B7%E5%BA%95%E9%AB%98%E9%93%81%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E5%B7%AE%E5%88%86+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/728/1586660820x2073513012.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">9 10</span></span><br><span class="line"><span class="comment">3 1 4 1 5 9 2 6 5 3</span></span><br><span class="line"><span class="comment">200 100 50</span></span><br><span class="line"><span class="comment">300 299 100</span></span><br><span class="line"><span class="comment">500 200 500</span></span><br><span class="line"><span class="comment">345 234 123</span></span><br><span class="line"><span class="comment">100 50 100</span></span><br><span class="line"><span class="comment">600 100 1</span></span><br><span class="line"><span class="comment">450 400 80</span></span><br><span class="line"><span class="comment">2 1 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">6394</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dif[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Way</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> paper;</span><br><span class="line">    <span class="keyword">int</span> discount;</span><br><span class="line">    <span class="keyword">int</span> card;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dif, <span class="number">0</span>, <span class="keyword">sizeof</span>(dif));</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> city_num, pass_num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; city_num &gt;&gt; pass_num;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pass</span><span class="params">(pass_num)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;struct Way&gt; <span class="title">way</span><span class="params">(city_num)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pass_num; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pass[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= city_num - <span class="number">1</span>; ++i) </span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; way[i].paper &gt;&gt; way[i].discount &gt;&gt; way[i].card;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pass_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> st = pass[i];</span><br><span class="line">        <span class="keyword">int</span> ed = pass[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(st &gt; ed) swap(st, ed);</span><br><span class="line">        ++dif[st];</span><br><span class="line">        --dif[ed];  <span class="comment">//对每一段路的经过次数的差分数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= city_num - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        dif[i] += dif[i<span class="number">-1</span>];        </span><br><span class="line">        ll meth1 = way[i].paper * dif[i];</span><br><span class="line">        ll meth2 = way[i].card + way[i].discount * dif[i];</span><br><span class="line">        sum += <span class="built_in">min</span>(meth1, meth2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>领地选择（前缀和+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E9%A2%86%E5%9C%B0%E9%80%89%E6%8B%A9%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/04/12/GqqRYV.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试数据</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">1 2 3 1</span></span><br><span class="line"><span class="comment">-1 9 0 2</span></span><br><span class="line"><span class="comment">2 0 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; good;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    s-=<span class="number">1</span>;</span><br><span class="line">    good.first = <span class="number">1</span>;</span><br><span class="line">    good.second = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] += sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> maximum = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + s&lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + s&lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = i + s, q = j + s;</span><br><span class="line">            <span class="keyword">if</span>(p &lt;= n &amp;&amp; q &lt;= m) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = sum[p][q]-sum[p][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][q]+sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(maximum &lt; temp) &#123;</span><br><span class="line">                    good.first = i;</span><br><span class="line">                    good.second = j;</span><br><span class="line">                    maximum = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, good.first, good.second);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;          </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>Courses(二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Courses(%E6%B1%82%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E6%95%B0)/</url>
    <content><![CDATA[<p>点击“阅读全文”👇<a id="more"></a></p>
<h4 id="Courses【HDU-1083】"><a href="#Courses【HDU-1083】" class="headerlink" title="Courses【HDU 1083】"></a>Courses【HDU 1083】</h4><p>给定学生数和课程数，以及每门课程和学生的关系，验证最大匹配数是否和课程数相等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> n, p;  <span class="comment">//学生人数、课程数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i]==<span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  <span class="comment">//求最大匹配数是否为课程数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;p, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a); <span class="comment">//第i门课有a个学生</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                link[i][b] = <span class="literal">true</span>; <span class="comment">//给课程匹配学生</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, solve()==p?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一点我不是很懂，我在代码里面加了一句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p!=n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就会wa。</p>
<p>但是我觉得这道题要是想成立学生数和课程数一定得先相等啊。。。</p>
<p>A few moments later， 我懂了，原来是允许有学生一门课都不选的，，，这学生真，，，</p>
]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Fire Net(缩图+二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Fire-Net/</url>
    <content><![CDATA[<h3 id="Fire-Net-【HDU-1045】"><a href="#Fire-Net-【HDU-1045】" class="headerlink" title="Fire Net 【HDU 1045】"></a>Fire Net 【<a href="https://vjudge.net/problem/HDU-1045" target="_blank" rel="noopener">HDU 1045</a>】</h3><p>学艺不精，是个菜鸡。。。调试了一个小时发现一个逗号语句用错了</p>
<p>重新来学学一遍逗号表达式的用法：</p>
<blockquote>
<p>表达式1，表达式2，表达式3，…… ，表达式n</p>
<p>逗号表达式的要领：</p>
<p>(1) 逗号表达式的运算过程为：从左往右逐个计算表达式。</p>
<p>(2) 逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值。</p>
<p>(3) 逗号<a href="https://baike.baidu.com/item/运算符" target="_blank" rel="noopener">运算符</a>的优先级别在所有运算符中最低。</p>
</blockquote>
<p>我一开始在for循环里面写了这么一个鬼东西：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[i][k] == <span class="string">'.'</span> , k &lt; n; ++k)</span><br><span class="line">                        row[i][k] = rcnt;</span><br></pre></td></tr></table></figure>

<p>事实证明，有些东西用起来好像很nb，但如果不是非常明确这个东西怎么用就不要乱用，逗号表达式从左向右计算，它的值只是最后一个表达式的值，不要把它误用成“&amp;&amp;”。</p>
<p>好了，言归正传，这道题我看好多博客里面都是直接dfs做的，看起来十分暴躁朴素（？）。但这道题被归在匹配问题里面我就老老实实去用二分匹配图稿它了，这道题是道匈牙利算法，匈牙利那部分没有难度，难就难在建图（真的难想，反正我是没想到），这个建图运用了“缩图法”， 给图中每个点分配一个它所在的“行区域”和“列区域”，并以它的行区域和列区域编号分别代表它的行坐标和列坐标。</p>
<p><img src="http://a1.qpic.cn/psc?/V12SotN11LF5Eb/NZ9C4PTRAOGVNvAxFZDwtyHcIbqUDg52idTa73t00HaSbWEpRIt2xu410ZrdkWDM9dplS6..9gnsZVn03CdUxA!!/c&ek=1&kp=1&pt=0&bo=gAc4BAAAAAADJ7k!&tl=1&vuin=1517435708&tm=1585836000&sce=60-2-2&rf=0-0" alt=""></p>
<p>从图中可知（图画的确实挺丑的，逃），在该行相邻格子连通的格子组成一个行区域，同理可以定义列区域。</p>
<p>！！现在是重点，是建图的核心思想：若一个行区域和一个列区域相交，设这个相交区域为U，若U内有n个点，则这n个点中只能有一个点可以放炮台，也就是说U内的点是可以相互连通的，其中任意一个点可以发射炮弹到U中其他所有点。所以这道题就可以转化为求出这样的U区域最多有多少个。</p>
<p>根据二分图的定义，再来看一看这个图，所有的列区域互不相交，所有的行区域也是互不相交，可架设炮台的空地必为一个行区域和一个列区域交集中的一个元素，要求是求出行区域和列区域的交集最多有多少个。那么我们就可以把这个图看作一个二分图G，行区域集合和列区域集合分别看作点集U,V， 每个空地的行区域编号和列区域编号之间可以连线，这道题就实质上是一个二分图最大匹配问题，用匈牙利算法就可以轻松将其解决。</p>
<p>下面是代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(a,x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];   <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];  <span class="comment">//记录某个行区域和列区域是否相交</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];  <span class="comment">//记录这个列区域有没有被访问过</span></span><br><span class="line"><span class="keyword">int</span> ma[maxn], mma[maxn];  <span class="comment">//分别记录列区域匹配的是哪个行区域、行区域匹配的是哪个列区域</span></span><br><span class="line"><span class="keyword">int</span> row[maxn][maxn], col[maxn][maxn];  <span class="comment">//存储原图中点所在的行区域编号、列区域编号</span></span><br><span class="line"><span class="keyword">int</span> n, rcnt, ccnt;  <span class="comment">//矩阵规模、行区域编号、列区域编号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ccnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i]) </span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i] == <span class="number">-1</span> || judge(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                mma[x] = i;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span>  <span class="comment">//给行区域匹配列区域，反之亦可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RE(ma, <span class="number">-1</span>);</span><br><span class="line">    RE(mma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mma[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            RE(vis, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(judge(i))</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;</span><br><span class="line">        RE(row, <span class="number">-1</span>); RE(col, <span class="number">-1</span>); RE(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rcnt = <span class="number">0</span>, ccnt = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'.'</span> &amp;&amp; row[i][j] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[i][k] == <span class="string">'.'</span> &amp;&amp; k &lt; n; ++k)</span><br><span class="line">                        row[i][k] = rcnt;</span><br><span class="line">                    ++rcnt;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mp[j][i] == <span class="string">'.'</span> &amp;&amp; col[j][i] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[k][i] == <span class="string">'.'</span> &amp;&amp; k &lt; n; ++k)</span><br><span class="line">                        col[k][i] = ccnt;</span><br><span class="line">                    ++ccnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'.'</span>) link[row[i][j]][col[i][j]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getans());</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>The Accommodation of Students(判断二分图+二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/The-Accommodation-of-Students/</url>
    <content><![CDATA[<h4 id="The-Accommodation-of-Students【HDU-2444】"><a href="#The-Accommodation-of-Students【HDU-2444】" class="headerlink" title="The Accommodation of Students【HDU 2444】"></a>The Accommodation of Students【<a href="https://vjudge.net/problem/HDU-2444" target="_blank" rel="noopener">HDU 2444</a>】</h4><p>这道题核心是：判断二分图+二分图最大匹配</p>
<p>题目给定了总人数、匹配数、每一组匹配的关系双方，我的做法是先设定u,v两个数组，之后每输入一组关系，进行下列判断：</p>
<p>​    若输入存在关系的两点是a,b;</p>
<p>​    情形一：a点可以放进u， b进v;</p>
<p>​    情形二：b点可以放进v， a进u;</p>
<p>​    若a,b情形一、二均不满足，则不成图。</p>
<p>现在先讨论情形一成立需要满足的条件：</p>
<p>​    （1）a点之前不存在于u中。</p>
<p>​    （2）b点之前不存在于u中。</p>
<p>​    （3）a与u中的其余各点均不存在关系。</p>
<p>那么接下来我们讨论一下怎样让这三个条件都成立：首先，a,b之间存在关系已经是毋庸置疑的事实，那么在我们进行判断之前可以确定关系：link[a][b]=link[b][a]=true，这样条件（2）的判断就可以合并到条件（3）中，结合条件（1）可知，我们判断的过程是：对u进行for循环判断时，若a与循环里任何点有联系，就可以直接返回判断这个情形不成立，若情形一成立，就设置link[a][a]=link[b][b]=true; 这样条件（1）也可以合并到条件（3）中。</p>
<p>所以，使用这种方法，我们在判断二分图的过程中也完成了对二分图的划分，但是这种方法时间复杂度比较高，（但我用染色体法写出来的那个一直wa……我也很无奈，，，</p>
<p>那就先放一下我一开始用的那种方法写的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn]; <span class="comment">//两人是否认识</span></span><br><span class="line"><span class="keyword">int</span> ma[maxn]; <span class="comment">//两人是否可以在一个房间</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> u[maxn];</span><br><span class="line"><span class="keyword">int</span> v[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="comment">//总人数，认识的人的对数</span></span><br><span class="line"><span class="keyword">int</span> ucnt, vcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifu</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//判断这个人可不可以加入u组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ucnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u[i]!=x &amp;&amp; link[x][u[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         <span class="comment">//如果x和u组内其他任何人存在关系，就不能再加入u组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifv</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=x &amp;&amp; link[x][v[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v[i]] &amp;&amp; link[x][v[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[v[i]] == <span class="number">-1</span> || dfs(ma[v[i]]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[v[i]] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">//给u中的人匹配v</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    RE(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ucnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RE(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(u[i])) sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        ucnt = <span class="number">0</span>, vcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        RE(link, <span class="literal">false</span>);</span><br><span class="line">        RE(u, <span class="number">-1</span>);</span><br><span class="line">        RE(v, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                link[a][b] = link[b][a] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(ifu(a) &amp;&amp; ifv(b))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!link[a][a]) &#123;</span><br><span class="line">                        u[ucnt++] = a; </span><br><span class="line">                        link[a][a] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!link[b][b]) &#123;</span><br><span class="line">                        v[vcnt++] = b;                                      </span><br><span class="line">                        link[b][b] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ifv(a) &amp;&amp; ifu(b)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!link[a][a]) &#123;</span><br><span class="line">                        v[vcnt++] = a;</span><br><span class="line">                        link[a][a] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!link[b][b]) &#123;</span><br><span class="line">                        u[ucnt++] = b;</span><br><span class="line">                        link[b][b] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> flag = <span class="literal">false</span>;                                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Swap(二分图最大匹配)[HDU 2819]</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Swap(%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D)%5BHDU-2819%5D/</url>
    <content><![CDATA[<h4 id="Swap-二分图最大匹配-HDU-2819"><a href="#Swap-二分图最大匹配-HDU-2819" class="headerlink" title="Swap(二分图最大匹配)[HDU 2819]"></a>Swap(二分图最大匹配)[HDU 2819]</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> row[maxn], col[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i] == <span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) ++sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">                <span class="keyword">if</span>(a) link[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hungary() &lt; n) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            MEM(row, <span class="number">0</span>); MEM(col, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">1</span>; ma[j] != i &amp;&amp; j &lt;= n; ++j);</span><br><span class="line">                <span class="keyword">if</span>(i != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    row[cnt] = i;</span><br><span class="line">                    col[cnt++] = j;</span><br><span class="line">                    swap(ma[i], ma[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"C %d %d\n"</span>, row[i], col[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>匹配问题概述</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Introduction/</url>
    <content><![CDATA[<h1 id="匹配问题概述"><a href="#匹配问题概述" class="headerlink" title="匹配问题概述"></a>匹配问题概述</h1><p>匹配问题有很多，像二分图匹配、字符串匹配等</p>
<h4 id="一、匈牙利算法：https-blog-csdn-net-sunny-hun-article-details-80627351"><a href="#一、匈牙利算法：https-blog-csdn-net-sunny-hun-article-details-80627351" class="headerlink" title="一、匈牙利算法：https://blog.csdn.net/sunny_hun/article/details/80627351"></a>一、匈牙利算法：<a href="https://blog.csdn.net/sunny_hun/article/details/80627351" target="_blank" rel="noopener">https://blog.csdn.net/sunny_hun/article/details/80627351</a></h4><h4 id="二、增广路径讲解："><a href="#二、增广路径讲解：" class="headerlink" title="二、增广路径讲解："></a>二、增广路径讲解：</h4><p>这是我觉得讲得最详细的一个版本了：<a href="https://blog.csdn.net/reid_zhang1993/article/details/44080167" target="_blank" rel="noopener">https://blog.csdn.net/reid_zhang1993/article/details/44080167</a></p>
<h4 id="三、Hop-Craft算法："><a href="#三、Hop-Craft算法：" class="headerlink" title="三、Hop-Craft算法："></a>三、Hop-Craft算法：</h4><p><a href="https://blog.csdn.net/Wall_F/article/details/8248373?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/Wall_F/article/details/8248373?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p>
<p><a href="https://www.cnblogs.com/penseur/archive/2013/06/16/3138981.html" target="_blank" rel="noopener">https://www.cnblogs.com/penseur/archive/2013/06/16/3138981.html</a></p>
<h4 id="四、KM算法：https-www-cnblogs-com-wenruo-p-5264235-html"><a href="#四、KM算法：https-www-cnblogs-com-wenruo-p-5264235-html" class="headerlink" title="四、KM算法：https://www.cnblogs.com/wenruo/p/5264235.html"></a>四、KM算法：<a href="https://www.cnblogs.com/wenruo/p/5264235.html" target="_blank" rel="noopener">https://www.cnblogs.com/wenruo/p/5264235.html</a></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> love[MAXN][MAXN];   <span class="comment">// 记录每个妹子和每个男生的好感度</span></span><br><span class="line"><span class="keyword">int</span> ex_girl[MAXN];      <span class="comment">// 每个妹子的期望值</span></span><br><span class="line"><span class="keyword">int</span> ex_boy[MAXN];       <span class="comment">// 每个男生的期望值</span></span><br><span class="line"><span class="keyword">bool</span> vis_girl[MAXN];    <span class="comment">// 记录每一轮匹配匹配过的女生</span></span><br><span class="line"><span class="keyword">bool</span> vis_boy[MAXN];     <span class="comment">// 记录每一轮匹配匹配过的男生</span></span><br><span class="line"><span class="keyword">int</span> match[MAXN];        <span class="comment">// 记录每个男生匹配到的妹子 如果没有则为-1</span></span><br><span class="line"><span class="keyword">int</span> slack[MAXN];        <span class="comment">// 记录每个汉子如果能被妹子倾心最少还需要多少期望值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> girl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis_girl[girl] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> boy = <span class="number">0</span>; boy &lt; N; ++boy) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vis_boy[boy]) <span class="keyword">continue</span>; <span class="comment">// 每一轮匹配 每个男生只尝试一次</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gap = ex_girl[girl] + ex_boy[boy] - love[girl][boy];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;  <span class="comment">// 如果符合要求</span></span><br><span class="line">            vis_boy[boy] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (match[boy] == <span class="number">-1</span> || dfs( match[boy] )) &#123;    <span class="comment">// 找到一个没有匹配的男生 或者该男生的妹子可以找到其他人</span></span><br><span class="line">                match[boy] = girl;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slack[boy] = <span class="built_in">min</span>(slack[boy], gap);  <span class="comment">// slack 可以理解为该男生要得到女生的倾心 还需多少期望值 取最小值 备胎的样子【捂脸</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span> match);    <span class="comment">// 初始每个男生都没有匹配的女生</span></span><br><span class="line">    <span class="built_in">memset</span>(ex_boy, <span class="number">0</span>, <span class="keyword">sizeof</span> ex_boy);   <span class="comment">// 初始每个男生的期望值为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个女生的初始期望值是与她相连的男生最大的好感度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        ex_girl[i] = love[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            ex_girl[i] = <span class="built_in">max</span>(ex_girl[i], love[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试为每一个女生解决归宿问题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fill</span>(slack, slack + N, INF);    <span class="comment">// 因为要取最小值 初始化为无穷大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 为每个女生解决归宿问题的方法是 ：如果找不到就降低期望值，直到找到为止</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录每轮匹配中男生女生是否被尝试匹配过</span></span><br><span class="line">            <span class="built_in">memset</span>(vis_girl, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis_girl);</span><br><span class="line">            <span class="built_in">memset</span>(vis_boy, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis_boy);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dfs(i)) <span class="keyword">break</span>;  <span class="comment">// 找到归宿 退出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不能找到 就降低期望值</span></span><br><span class="line">            <span class="comment">// 最小可降低的期望值</span></span><br><span class="line">            <span class="keyword">int</span> d = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="keyword">if</span> (!vis_boy[j]) d = <span class="built_in">min</span>(d, slack[j]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">                <span class="comment">// 所有访问过的女生降低期望值</span></span><br><span class="line">                <span class="keyword">if</span> (vis_girl[j]) ex_girl[j] -= d;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 所有访问过的男生增加期望值</span></span><br><span class="line">                <span class="keyword">if</span> (vis_boy[j]) ex_boy[j] += d;</span><br><span class="line">                <span class="comment">// 没有访问过的boy 因为girl们的期望值降低，距离得到女生倾心又进了一步！</span></span><br><span class="line">                <span class="keyword">else</span> slack[j] -= d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配完成 求出所有配对的好感度的和</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        res += love[ match[i] ][i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;love[i][j]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, KM());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>棋盘问题（二分图最大匹配）</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="淦"><a href="#淦" class="headerlink" title="淦"></a>淦</h1><h4 id="棋盘问题【HDU-1281】"><a href="#棋盘问题【HDU-1281】" class="headerlink" title="棋盘问题【HDU 1281】"></a>棋盘问题【HDU 1281】</h4><p>wa了半天原来是因为数组开小了，题目给的数据范围是1~100，我出于对整数的一种强迫性偏执就开了100<em>100的数组，一直wa，后来改成102\</em>102就a了。。。。。。</p>
<p>这道就是一道板子题，在求最大匹配的基础上把每一个可行点暴力一遍，看看少了这个点以后最大匹配数会不会发生改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">bool</span> link[<span class="number">555</span>][<span class="number">555</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> saverow[maxn];</span><br><span class="line"><span class="keyword">int</span> savecol[maxn];</span><br><span class="line"><span class="keyword">int</span> row, col, n;</span><br><span class="line"><span class="keyword">int</span> kase = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= col; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i]==<span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span>  <span class="comment">//给行匹配列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) total++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;row, &amp;col, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            link[a][b] = <span class="literal">true</span>;</span><br><span class="line">            saverow[i] = a;</span><br><span class="line">            savecol[i] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = solve();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            link[saverow[i]][savecol[i]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(solve() &lt; sum) cnt++; </span><br><span class="line">            link[saverow[i]][savecol[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Board %d have %d important blanks for %d chessmen.\n"</span>, kase++, cnt, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>逆序数（离散化+树状数组）</title>
    <url>/2020/06/20/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E9%80%86%E5%BA%8F%E6%95%B0%EF%BC%88%E7%A6%BB%E6%95%A3%E5%8C%96+%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%89/</url>
    <content><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/problem/15163" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/15163</a><br>来源：牛客网</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。比如一个序列为4 5 1 3 2， 那么这个序列的逆序数为7，逆序对分别为(4, 1), (4, 3), (4, 2), (5, 1), (5, 3), (5, 2),(3, 2)。</p>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><blockquote>
<p>第一行有一个整数n(1 &lt;= n &lt;= 100000),  然后第二行跟着n个整数，对于第i个数a[i]，(0 &lt;= a[i] &lt;= 100000)。</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><blockquote>
<p>输出这个序列中的逆序数</p>
</blockquote>
<p>示例1</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">4 5 1 3 2</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h3 id="这类题的题解"><a href="#这类题的题解" class="headerlink" title="这类题的题解"></a>这类题的题解</h3><blockquote>
<p><a href="https://www.cnblogs.com/xiongmao-cpp/p/5043340.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiongmao-cpp/p/5043340.html</a></p>
<p><a href="https://www.cnblogs.com/Staceyacm/p/10781853.html" target="_blank" rel="noopener">https://www.cnblogs.com/Staceyacm/p/10781853.html</a></p>
<p><a href="https://www.cnblogs.com/zqy123/p/5017087.html" target="_blank" rel="noopener">https://www.cnblogs.com/zqy123/p/5017087.html</a></p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll tree[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn]; <span class="comment">//离散化处理数组</span></span><br><span class="line">pair&lt;ll, <span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += delta;</span><br><span class="line">        x += x&amp;(-x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += tree[x];</span><br><span class="line">        x -= x&amp;(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i].first;</span><br><span class="line">        p[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        r[p[i].second] = i;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        update(r[i], <span class="number">1</span>);</span><br><span class="line">        ans += i - getsum(r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 7</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树状数组</category>
      </categories>
      <tags>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>Catch That Cow（简单bfs）[POJ3278]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Catch-That-Cow%EF%BC%88%E7%AE%80%E5%8D%95bfs%EF%BC%89%5BPOJ3278%5D/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/HDU-2717" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>
<p>  * Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute<br>  * Teleporting: FJ can move from any point X to the point 2 × X in a single minute.</p>
<p>  If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it? </p>
<p>  简单翻译：在一条一维坐标轴上，给出起点和终点，该点一次只能走+1、-1、*2步，每走一次消耗一个单位时间，问一共最少消耗多少单位时间？</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>   Line 1: Two space-separated integers: N and K </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p> Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>5 17</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>4</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> start, terminal;</span><br><span class="line"><span class="keyword">int</span> marked[maxn]=&#123;<span class="number">0</span>&#125;;   <span class="comment">//记录该点有没有被走过</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">step</span>[maxn]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//记录走到该点消耗的步数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//struct Node  //用结构体这道题超内存了，</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    int pos;</span></span><br><span class="line"><span class="comment">//    int step;</span></span><br><span class="line"><span class="comment">//&#125;now,anext,head;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now,next;</span><br><span class="line">    marked[start]=<span class="number">1</span>;</span><br><span class="line">    q.push(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now==terminal)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">step</span>[now]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: next=now+<span class="number">1</span>;<span class="keyword">break</span>;<span class="comment">//switch()里面不能直接步数加一，之前存在队列里的已标记过的数组会被无缘无故</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: next=now<span class="number">-1</span>;<span class="keyword">break</span>;<span class="comment">//的加了一，之后再用front()方法使用它的时候会造成错误。</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: next=now*<span class="number">2</span>;<span class="keyword">break</span>;<span class="comment">//用结构体的话在这里加步数不会影响到队列里的元素，但用数组会，所以加步数在下面加</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!marked[next]&amp;&amp;next&gt;=<span class="number">0</span>&amp;&amp;next&lt;maxn)&#123;</span><br><span class="line">                marked[next]=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">step</span>[next]=<span class="built_in">step</span>[now]+<span class="number">1</span>;</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; empty;</span><br><span class="line">    swap(empty, q);   <span class="comment">//队列并没有.clear()方法，如果要用的话要自己定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;start&gt;&gt;terminal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">clear</span>(q);</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(marked, <span class="number">0</span>, <span class="keyword">sizeof</span>(marked));</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">step</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">step</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Fliptile（位运算搜索）[POJ3279]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Fliptile%EF%BC%88%E4%BD%8D%E8%BF%90%E7%AE%97%E6%90%9C%E7%B4%A2%EF%BC%89%5BPOJ3279%5D/</url>
    <content><![CDATA[<h3 id="二进制位运算："><a href="#二进制位运算：" class="headerlink" title="二进制位运算："></a>二进制位运算：</h3><h4 id="1-反转："><a href="#1-反转：" class="headerlink" title="1. 反转："></a>1. 反转：</h4><p>和1进行异或(^)会反转，和0不会。即：0^1=1，1^1=0； 而：0^0=0，1^0=1</p>
<h4 id="2-设置："><a href="#2-设置：" class="headerlink" title="2. 设置："></a>2. 设置：</h4><p>设置1：和1进行或(|)操作。 如：1|1=1,  0|1=1</p>
<p>​              二进制数和0进行或(|)保持不变</p>
<p>设置0：和0进行与(&amp;)操作。 如： 1&amp;0=0，0&amp;0=0</p>
<p>​              二进制数和1与(&amp;)保持不变</p>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  Farmer John knows that an intellectually satisfied cow is a happy cow who will give more milk. He has arranged a brainy activity for cows in which they manipulate an <em>M</em> × <em>N</em> grid (1 ≤ <em>M</em> ≤ 15; 1 ≤ <em>N</em> ≤ 15) of square tiles, each of which is colored black on one side and white on the other side.</p>
<p>  As one would guess, when a single white tile is flipped, it changes to black; when a single black tile is flipped, it changes to white. The cows are rewarded when they flip the tiles so that each tile has the white side face up. However, the cows have rather large hooves and when they try to flip a certain tile, they also flip all the adjacent tiles (tiles that share a full edge with the flipped tile). Since the flips are tiring, the cows want to minimize the number of flips they have to make.</p>
<p>  Help the cows determine the minimum number of flips required, and the locations to flip to achieve that minimum. If there are multiple ways to achieve the task with the minimum amount of flips, return the one with the least lexicographical ordering in the output when considered as a string. If the task is impossible, print one line with the word “IMPOSSIBLE”.</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>   Line 1: Two space-separated integers: <em>M</em> and <em>N</em><br>   Lines 2.. <em>M</em>+1: Line <em>i</em>+1 describes the colors (left to right) of row i of the grid with <em>N</em> space-separated integers which are 1 for black and 0 for white </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>  Lines 1.. <em>M</em>: Each line contains <em>N</em> space-separated integers, each specifying how many times to flip that particular location. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>4 4<br>1 0 0 1<br>0 1 1 0<br>0 1 1 0<br>1 0 0 1</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>0 0 0 0<br>1 0 0 1<br>1 0 0 1<br>0 0 0 0</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_len=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> ori[max_len];  <span class="comment">//记录最开始的地板的颜色情况</span></span><br><span class="line"><span class="keyword">int</span> temp[max_len];  <span class="comment">//记录每一次枚举的地板的颜色情况</span></span><br><span class="line"><span class="keyword">int</span> result[max_len];  <span class="comment">//记录每一次枚举的奶牛对地板的操作</span></span><br><span class="line"><span class="keyword">int</span> best[max_len];   <span class="comment">//每一次枚举后视least和now的大小关系对best(储存最少操作的情况)进行更新</span></span><br><span class="line"><span class="keyword">int</span> least,now;  <span class="comment">//分别记录最小操作数和当前枚举方法的操作数</span></span><br><span class="line"><span class="keyword">int</span> maxn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans*=a;</span><br><span class="line">        a*=a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBit</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> j, <span class="keyword">int</span> i)</span> <span class="comment">//将元素k的第j位设成i</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i) k |= (<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="keyword">else</span> k &amp;= ~(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> i)</span> <span class="comment">//得到元素k的第i位的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (k&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FlipBit</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> i)</span> <span class="comment">//将元素k的第i位进行反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k ^= (<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enume</span><span class="params">()</span>  <span class="comment">//enumeration:枚举</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t,switchs;   <span class="comment">//i,j是计数器</span></span><br><span class="line">    <span class="keyword">int</span> flag =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;maxn; i++)  <span class="comment">//按照字典序进行搜素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(temp,ori,<span class="keyword">sizeof</span>(ori)); <span class="comment">//把ori复制给temp对temp进行操作，不改动ori</span></span><br><span class="line">        switchs=i;  <span class="comment">//当前对该行进行的操作，switch的各位中：1代表反转，0代表保持不变</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[j]=switchs;  <span class="comment">//记录开关状态的比特值，也就是每一行各数位是否进行了反转，反转过则值为1，未反转过则值为0</span></span><br><span class="line">            <span class="keyword">for</span>(t=<span class="number">0</span>; t&lt;m; t++)  <span class="comment">//列举switchs存的每一位是1还是0；</span></span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">if</span>(GetBit(switchs, t))  <span class="comment">//如果得到switchs的该位是1， 则对该位进行反转</span></span><br><span class="line">                &#123;</span><br><span class="line">                    FlipBit(temp[j], t);</span><br><span class="line">                    <span class="keyword">if</span>(t&gt;<span class="number">0</span>) FlipBit(temp[j], t<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(t&lt;m<span class="number">-1</span>) FlipBit(temp[j], t+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;n<span class="number">-1</span>) temp[j+<span class="number">1</span>]^=switchs; <span class="comment">//更新第j行进行的反转操作对第j+1行产生的影响，temp[j+1]与switchs对应位进行异或，与1异或会反转，与0异或保持不变，上一行某一位的操作只可能对它垂直下方的数位产生影响，另外第n-1行由于没有下一行了，因此不进入该if语句            </span></span><br><span class="line">            switchs=temp[j]; <span class="comment">//switchs记录下一行需要进行的操作的情况，下一行需要进行反转的数为恰好是上一行值为1的数位，所以上一行各个数位的值就是需要施加给下一行对应数位的操作，因此直接把temp[j]赋值给switchs。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!temp[n<span class="number">-1</span>]) <span class="comment">//因为n-1行上面的所有行已经全部被操作为0，只需要判断第n-1行的值是否也为0，如果也是0，则说明操作成功，图中所有数位全部为0。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;n; p++)  <span class="comment">//计算这种情况总共需要的操作数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>; q&lt;m; q++)&#123;</span><br><span class="line">                    now+=GetBit(result[p],q);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(now&lt;least)  <span class="comment">//比较当前情况操作数是否小于之前的最小操作数，如果是，则把本次操作过程的记录result[]复制给best[]。</span></span><br><span class="line">            &#123;</span><br><span class="line">                least=now;</span><br><span class="line">                <span class="built_in">memcpy</span>(best, result, <span class="keyword">sizeof</span>(best));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            now=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(least==INF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;GetBit(best[i], j);</span><br><span class="line">                <span class="keyword">if</span>(j&lt;m<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            SetBit(ori[i], j, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=<span class="built_in">pow</span>(<span class="number">2</span>,m);  <span class="comment">//所有可能的操作情况</span></span><br><span class="line">    least=INF;</span><br><span class="line">    enume();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>I Hate It（线段树区间最大值）[HDU1754]</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/I-Hate-It%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%89%5BHDU1754%5D/</url>
    <content><![CDATA[<h4 id="I-Hate-It【HDU-1754】"><a href="#I-Hate-It【HDU-1754】" class="headerlink" title="I Hate It【HDU 1754】"></a>I Hate It【<a href="https://vjudge.net/problem/HDU-1754" target="_blank" rel="noopener">HDU 1754</a>】</h4><p>同样是道模板题，更新的时候语句换成这样：</p>
<p>tree[k].most = max(tree[k*2].most, tree[k*2+1].most);</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;  <span class="comment">//学生人数、操作数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> most;</span><br><span class="line">&#125;tree[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l = l;</span><br><span class="line">    tree[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].most);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span> ;</span><br><span class="line">    buildTree(k*<span class="number">2</span>, l, mid);</span><br><span class="line">    buildTree(k*<span class="number">2</span>+<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    tree[k].most = <span class="built_in">max</span>(tree[k*<span class="number">2</span>].most, tree[k*<span class="number">2</span>+<span class="number">1</span>].most);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].most = y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) updatePoint(k*<span class="number">2</span>, x, y);</span><br><span class="line">    <span class="keyword">else</span> updatePoint(k*<span class="number">2</span>+<span class="number">1</span>, x, y);</span><br><span class="line">    tree[k].most = <span class="built_in">max</span>(tree[k*<span class="number">2</span>].most, tree[k*<span class="number">2</span>+<span class="number">1</span>].most);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= tree[k].l &amp;&amp; y &gt;= tree[k].r)</span><br><span class="line">        <span class="keyword">return</span> tree[k].most;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; tree[k].r || y &lt; tree[k].l) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) ans = <span class="built_in">max</span>(ans, searchInterval(k*<span class="number">2</span>, x, y));</span><br><span class="line">    <span class="keyword">if</span>(y &gt;= mid) ans = <span class="built_in">max</span>(ans, searchInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();  <span class="comment">//调试了一遍这里必须吞掉换行符</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c %d %d"</span>, &amp;ch, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">'U'</span>) updatePoint(<span class="number">1</span>, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, searchInterval(<span class="number">1</span>, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        MEM(tree, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Dungeon Master（简单bfs）[POJ2251]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Dungeon-Master%EF%BC%88%E7%AE%80%E5%8D%95bfs%EF%BC%89%5BPOJ2251%5D/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/POJ-2251" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p> You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.</p>
<p> Is an escape possible? If yes, how long will it take? </p>
<p> 简单翻译：给一个三维的迷宫（立体空间当中的），给出起点和终点的三维坐标，求出从起点到终点的最短距离。</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>  The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br>  L is the number of levels making up the dungeon.<br>  R and C are the number of rows and columns making up the plan of each level.<br>  Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a ‘#’ and empty cells are represented by a ‘.’. Your starting position is indicated by ‘S’ and the exit by the letter ‘E’. There’s a single blank line after each level. Input is terminated by three zeroes for L, R and C. </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form.</p>
<p>“Escaped in x minute(s). “</p>
<p>where x is replaced by the shortest time it takes to escape.<br>If it is not possible to escape, print the line </p>
<p>“ Trapped! “</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>3 4 5<br>S….<br>.###.<br>.##..<br>###.#</p>
<p>#####<br>#####<br>##.##<br>##…</p>
<p>#####<br>#####<br>#.###<br>####E</p>
<p>1 3 3<br>S##<br>#E#<br>###</p>
<p>0 0 0</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>Escaped in 11 minute(s).<br>Trapped!</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span> [maxn][maxn][maxn];  <span class="comment">//map[z][x][y];</span></span><br><span class="line"><span class="keyword">bool</span> marked[maxn][maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> L,R,C;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dir</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;<span class="built_in">move</span>[]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//描述方向的时候不用结构化数组，用二维数组也可以，即：</span></span><br><span class="line"><span class="comment">//int dir[6][3]=&#123;&#123;1,0,0&#125;,......&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125;now,next,start,<span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//queue&lt;Node&gt; q;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void clear(queue&lt;Node&gt;&amp; q) &#123;</span></span><br><span class="line"><span class="comment">//    queue&lt;Node&gt; empty;</span></span><br><span class="line"><span class="comment">//    swap(empty, q);   //队列并没有.clear()方法，如果要用的话要自己定义</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> <span class="comment">//row, column, level</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[z][x][y]==<span class="string">'#'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(marked[z][x][y]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z&lt;<span class="number">0</span>||z&gt;=L) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=R) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;=C) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    q.push(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(now.l==<span class="built_in">end</span>.l&amp;&amp;now.r==<span class="built_in">end</span>.r&amp;&amp;now.c==<span class="built_in">end</span>.c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Escaped in "</span>&lt;&lt;now.<span class="built_in">step</span>&lt;&lt;<span class="string">" minute(s)."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                next.c=now.c+<span class="built_in">move</span>[i].c;</span><br><span class="line">                next.l=now.l+<span class="built_in">move</span>[i].l;</span><br><span class="line">                next.r=now.r+<span class="built_in">move</span>[i].r;</span><br><span class="line">                next.<span class="built_in">step</span> = now.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">stop</span>(next.r, next.c, next.l))</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(next);</span><br><span class="line">                    marked[next.l][next.r][next.c]=<span class="literal">true</span>;  <span class="comment">//一开始wa就是因为忘记标记了</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Trapped!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R&gt;&gt;C)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!L &amp;&amp; !R &amp;&amp; !C) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(z=<span class="number">0</span>; z&lt;L; z++)  <span class="comment">//L</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(x=<span class="number">0</span>; x&lt;R; x++)  <span class="comment">//R</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(y=<span class="number">0</span>; y&lt;C; y++)  <span class="comment">//C</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">char</span> ch;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">'S'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        start.c = y;</span><br><span class="line">                        start.r = x;</span><br><span class="line">                        start.l = z;</span><br><span class="line">                        start.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">                        marked[z][x][y]=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">end</span>.c = y;</span><br><span class="line">                        <span class="built_in">end</span>.r = x;</span><br><span class="line">                        <span class="built_in">end</span>.l = z;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">map</span>[z][x][y] = ch;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//吞掉换行符</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//按照题目要求每一层之间输入有一个空行</span></span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(marked, <span class="number">0</span>, <span class="keyword">sizeof</span>(marked));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>棋盘问题（dfs）</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98%5BPOJ%201321%5D(dfs%EF%BC%89/</url>
    <content><![CDATA[<h4 id="棋盘问题【POJ-1321】"><a href="#棋盘问题【POJ-1321】" class="headerlink" title="棋盘问题【POJ 1321】"></a>棋盘问题【POJ 1321】</h4><h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h4><blockquote>
<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。 </p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p> 输入含有多组测试数据。<br> 每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br> 当为-1 -1时表示输入结束。<br> 随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。 </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>2 1<br>#.<br>.#<br>4 4<br>…#<br>..#.<br>.#..<br>#…<br>-1 -1</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>2<br>1</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">bool</span> used[maxn];  <span class="comment">//记录该行每一列位置的被使用情况</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">stop</span>[maxn][maxn];  <span class="comment">//标记棋盘上哪些点不能放棋子</span></span><br><span class="line"><span class="keyword">int</span> cnt;  <span class="comment">//记录总共可能的情况总数</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="comment">//定义的全局变量如果不加以说明，则int型默认为0，bool型默认为false;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x)</span>  <span class="comment">//x作为计数器，衡量何时出现等于k值；num代表当前是第几行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;k)  </span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=num;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i]&amp;&amp;!<span class="built_in">stop</span>[j][i])</span><br><span class="line">            &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                dfs(j+<span class="number">1</span>, x+<span class="number">1</span>);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">char</span> x;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">                <span class="keyword">if</span>(x==<span class="string">'.'</span>) <span class="built_in">stop</span>[i][j]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">stop</span>[i][j]=<span class="literal">false</span>;  <span class="comment">//else语句必须写，一开始因为这里wa了，上一轮的标记会影响下一轮</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//cin会把换行符保存到缓冲区中，因此要把换行符吃掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        cnt=<span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树概述</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h4 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h4><p>线段树是一种二叉搜索树，主要是为了储存和查询信息</p>
<p>这篇博客讲得挺详细的：<a href="https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html" target="_blank" rel="noopener">https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html</a></p>
<h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><ul>
<li>建树</li>
<li>查询某个点的值</li>
<li>修改某个点的值</li>
<li>查询某个区间的值</li>
<li>修改某个区间的值（对一整个区间上所有元素加或减同一个数）</li>
</ul>
<h4 id="对几种主要操作的代码实现"><a href="#对几种主要操作的代码实现" class="headerlink" title="对几种主要操作的代码实现"></a>对几种主要操作的代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">666</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l;</span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	<span class="keyword">int</span> f;</span><br><span class="line">	<span class="keyword">int</span> sum;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建树操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//区间的范围是l~r, 树的编号是K</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tree[k].l = l;  </span><br><span class="line">	tree[k].r = r;</span><br><span class="line">	<span class="keyword">if</span>(l == r) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].sum);  <span class="comment">//当l==r时，说明这一段已经成一个点了，也就是叶节点</span></span><br><span class="line">	<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">	buildTree(l, mid, <span class="number">2</span> * k);</span><br><span class="line">	buildTree(mid + <span class="number">1</span>, r, <span class="number">2</span> * k + <span class="number">1</span>);</span><br><span class="line">	tree[k].sum = tree[<span class="number">2</span> * k].sum + tree[<span class="number">2</span> * k + <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询某点的值的操作,设待查询的点为x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchPoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span>  <span class="comment">//一开始的k是根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l == tree[k].r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) searchPoint(k * <span class="number">2</span>, x);</span><br><span class="line">	<span class="keyword">else</span> searchPoint(k * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改某点的值（只是在查询操作的基础上做了两个改动）</span></span><br><span class="line"><span class="comment">//将x点上的值改为y</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l == tree[k].r) </span><br><span class="line">	&#123;</span><br><span class="line">		tree[k].sum += delta;  <span class="comment">//这里有改动</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) updatePoint(k * <span class="number">2</span>, x, delta);</span><br><span class="line">	<span class="keyword">else</span> updatePoint(k * <span class="number">2</span> + <span class="number">1</span>, x, delta);</span><br><span class="line">	tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;  <span class="comment">//新增一条语句用于更新父结点的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询某区间的值</span></span><br><span class="line"><span class="comment">//x, y分别为区间的左端点、右端点, ans为区间的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)  <span class="comment">//该区间完全被包含在查询区域中</span></span><br><span class="line">		<span class="keyword">return</span> tree[k].sum;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x &gt; tree[k].r || y &lt; tree[k].l) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x  &lt;= mid) ans += searchInterval(k * <span class="number">2</span>, x, y);</span><br><span class="line">	<span class="keyword">if</span>(y &gt; mid) ans += searchInterval(k * <span class="number">2</span> + <span class="number">1</span>, x, y);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改某区间上的值</span></span><br><span class="line"><span class="comment">//（1）懒标记下传 [当前结点的懒标记的值储存在父结点（防止重复储存）]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tree[k*<span class="number">2</span>].f += tree[k].f;</span><br><span class="line">	tree[k*<span class="number">2</span>+<span class="number">1</span>].f += tree[k].f;</span><br><span class="line">	tree[k*<span class="number">2</span>].sum += tree[k].f * (tree[k*<span class="number">2</span>].r - tree[k*<span class="number">2</span>].l + <span class="number">1</span>);</span><br><span class="line">	tree[k*<span class="number">2</span>+<span class="number">1</span>].sum += tree[k].f * (tree[k*<span class="number">2</span>+<span class="number">1</span>].r - tree[k*<span class="number">2</span>+<span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">	tree[k].f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)进行修改，对目标区间[x,y]里面的每一个元素都加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)</span><br><span class="line">	&#123;</span><br><span class="line">		tree[k].sum += (tree[k].r - tree[k].l + <span class="number">1</span>) * delta;</span><br><span class="line">		tree[k].f += delta;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].f) pushDown(k);</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &gt;= x) updateInterval(k*<span class="number">2</span>, x, y, delta);</span><br><span class="line">	<span class="keyword">if</span>(mid &lt;= y) updateInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y, delta);</span><br><span class="line">	tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">6</span>, delta = <span class="number">1</span>;</span><br><span class="line">	buildTree(k, l, r); <span class="comment">//建树</span></span><br><span class="line">	searchPoint(k, x);  <span class="comment">//查询点的值</span></span><br><span class="line">	updatePoint(k, x, delta);  <span class="comment">//更改点的值</span></span><br><span class="line">	searchInterval(k, x, y);  <span class="comment">//查询区间的值</span></span><br><span class="line">	updateInterval(k, x, y, delta);  <span class="comment">//更改区间的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>敌兵布阵（线段树模板题）[HDU1166]</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5%E3%80%90HDU%201166%E3%80%91/</url>
    <content><![CDATA[<p>点击“阅读全文”👇<a id="more"></a></p>
<h4 id="敌兵布阵【HDU1166】"><a href="#敌兵布阵【HDU1166】" class="headerlink" title="敌兵布阵【HDU1166】"></a>敌兵布阵【<a href="https://vjudge.net/problem/HDU-1166" target="_blank" rel="noopener">HDU1166</a>】</h4><p>一道线段树的模板题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;tree[maxn*<span class="number">4</span>+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l = l;</span><br><span class="line">    tree[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = ( tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    buildTree(k*<span class="number">2</span>, l, mid);</span><br><span class="line">    buildTree(k*<span class="number">2</span>+<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum += delta;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) updatePoint(k*<span class="number">2</span>, x, delta);</span><br><span class="line">    <span class="keyword">else</span> updatePoint(k*<span class="number">2</span>+<span class="number">1</span>, x, delta);</span><br><span class="line">    tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)</span><br><span class="line">        <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l &gt; y || tree[k].r &lt; x) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//这行不能少</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= x) ans += searchInterval(k*<span class="number">2</span>, x, y);</span><br><span class="line">    <span class="keyword">if</span>(mid &lt;= y) ans += searchInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++cnt);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) &amp;&amp; s[<span class="number">0</span>] != <span class="string">'E'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>) updatePoint(<span class="number">1</span>, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'S'</span>) updatePoint(<span class="number">1</span>, x, -y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,searchInterval(<span class="number">1</span>, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        MEM(tree, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Latex——配置TexLive + VsCode</title>
    <url>/2020/06/20/%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/%E4%BD%BF%E7%94%A8Latex%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AETexLive-+-VsCode/</url>
    <content><![CDATA[<h2 id="一、下载Tex-Live"><a href="#一、下载Tex-Live" class="headerlink" title="一、下载Tex Live"></a>一、下载Tex Live</h2><p>不要直接去下载官网的安装包，下载极其慢。</p>
<p>下载前选择一个近一点的镜像下载zip包：<a href="http://tug.org/texlive/acquire-iso.html" target="_blank" rel="noopener">http://tug.org/texlive/acquire-iso.html</a></p>
<p><a href="http://mirrors.sjtug.sjtu.edu.cn/ctan/systems/texlive/Images/" target="_blank" rel="noopener">http://mirrors.sjtug.sjtu.edu.cn/ctan/systems/texlive/Images/</a></p>
<p>下载完成以后</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/NZ9C4PTRAOGVNvAxFZDwt4703mWPMAgRfp0Vx5jL7sVFDywr*a026O.Mn*hWDwsurg7VShk4HrStwBrStDT0iA!!/b&bo=jAXbAQAAAAADB3E!&rf=viewer_4" alt=""></p>
<p>对黄色那一项使用管理员身份打开，直接运行安装就可以，安装的时候不要自己去改路径了，使用默认路径就可以，安装的时候路径会自动加在环境变量里。</p>
<h2 id="二、-下载vscode并且安装texlive-workshop"><a href="#二、-下载vscode并且安装texlive-workshop" class="headerlink" title="二、 下载vscode并且安装texlive workshop"></a>二、 下载vscode并且安装texlive workshop</h2><p>搜索latex：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh7mXrkpnUS.4WJdjwCWS4L5ifEcLi9HeiMwnRqI5Kg2er3d3hFbT1Ch5PiGb*Vk5qJI3uSkXTVIrsScu3FyulmY!/b&bo=UQEgBAAAAAADF0Y!&rf=viewer_4" alt=""></p>
<h2 id="三、vscoded打开setting配置setting-json文件："><a href="#三、vscoded打开setting配置setting-json文件：" class="headerlink" title="三、vscoded打开setting配置setting.json文件："></a>三、vscoded打开setting配置setting.json文件：</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"editor.mouseWheelZoom"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Quiet Light"</span>,</span><br><span class="line">    <span class="attr">"debug.onTaskErrors"</span>: <span class="string">"debugAnyway"</span>,</span><br><span class="line">    <span class="attr">"C_Cpp.updateChannel"</span>: <span class="string">"Insiders"</span>,</span><br><span class="line">    <span class="attr">"http.proxySupport"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="attr">"latex-workshop.latex.magic.args"</span>: [</span><br><span class="line">        <span class="string">"-synctex=1"</span>,</span><br><span class="line">        <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">        <span class="string">"-file-line-error"</span>,</span><br><span class="line">        <span class="string">"%DOC%"</span>,</span><br><span class="line">    ],    </span><br><span class="line">  </span><br><span class="line">  <span class="attr">"latex-workshop.latex.tools"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 编译工具和命令</span></span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"-pdf"</span>,</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">  <span class="attr">"latex-workshop.latex.recipes"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xe-&gt;bib-&gt;xe-&gt;xe"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdf-&gt;bib-&gt;pdf-&gt;pdf"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接覆盖保存就可以，不会对其他语言的编译产生影响</p>
<h2 id="四、尝试编译一个test-tex文件"><a href="#四、尝试编译一个test-tex文件" class="headerlink" title="四、尝试编译一个test.tex文件"></a>四、尝试编译一个test.tex文件</h2><p>创建一个test.tex文件，并将下面的代码填入其中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">    \usepackage&#123;ctex&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">你好，Latex</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p>在左侧菜单栏找到tex点击xelatex编译：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh7cJVwfb3q*vduCGJvcovDj.1mugpM5*zy4W2jyh1oXry2M0FtWt5jNrfCeSz1MkPxTOx7rJ9I3SEba38x*p0Ws!/b&bo=FwN9AgAAAAADF1k!&rf=viewer_4" alt=""></p>
<p>这时会弹出窗口报错，查看报错信息，显示：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh5pRY9BgwaBnruiTBm9qY2Yj7OLmcqkagRIuxG3AIoRo7yqMzVdn6rLMZJGtkb1b8q2IUIxCcZl0eeXYA0tqLY8!/b&bo=mAJdAAAAAAADF*U!&rf=viewer_4" alt=""></p>
<p>推测是因为路径错误。</p>
<h2 id="五、添加路径"><a href="#五、添加路径" class="headerlink" title="五、添加路径"></a>五、添加路径</h2><p>打开环境变量，</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh2yLkElF*XK5lh*2sPN3k5XQzTtYU3GgclewQO.38PW9mB41h8PqchpIbhl1Q01xMwugbL6kPSStVaetLlkWpeo!/b&bo=ygOiAwAAAAADF1o!&rf=viewer_4" alt=""></p>
<p>对这两个path都添加：C:\Windows\System32 </p>
<p>再重启VsCode，发现可以编译成功。</p>
<h2 id="六、预览"><a href="#六、预览" class="headerlink" title="六、预览"></a>六、预览</h2><p>点击右上角图标即可预览</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh0bewXl4q4L9VY*kO9XTa4EYAIepTYFWumd4HMuYzNYAKFpC7gDS5ZH2JKhgRuq3XdcvrJ00sT1LTsETd.KCPh0!/b&bo=gAc4BAAAAAADF4k!&rf=viewer_4" alt=""></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>配置VsCode</title>
    <url>/2020/06/20/%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/%E9%85%8D%E7%BD%AEVsCode/</url>
    <content><![CDATA[<p>大概的可以参照这篇博客：<a href="https://blog.csdn.net/bat67/article/details/76095813" target="_blank" rel="noopener">https://blog.csdn.net/bat67/article/details/76095813</a></p>
<p>主要是贴一下launch.json 和 tasks.json这两个文件，其中launch,json这个文件博客里给的是个坑</p>
<ul>
<li>launch.json </li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,  </span><br><span class="line">    <span class="attr">"configurations"</span>: [  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(gdb) Launch"</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示  </span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,       <span class="comment">// 配置类型，这里只能为cppdbg  </span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,    <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）  </span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,<span class="comment">// 将要进行调试的程序的路径  </span></span><br><span class="line">            <span class="attr">"args"</span>: [],             <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,   <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false  </span></span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span></span><br><span class="line">            <span class="attr">"environment"</span>: [],  </span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">true</span>, <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台  </span></span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,  </span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin\\gdb32.exe"</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应  </span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"g++"</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span></span><br><span class="line">            <span class="attr">"setupCommands"</span>: [  </span><br><span class="line">                &#123;   </span><br><span class="line">		    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,  </span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,  </span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>tasks.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"g++"</span>, <span class="comment">//这里注意一下，见下文</span></span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin\\g++.exe"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>可使用system(“pause”);或者设置断点防止程序突然关闭</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Exponentiation(1001 高精度幂运算)</title>
    <url>/2020/06/20/%E9%AB%98%E7%B2%BE%E5%BA%A6%20%E3%80%81%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/Exponentiation(1001-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B9%82%E8%BF%90%E7%AE%97)/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_41376979/article/details/79197186" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41376979/article/details/79197186</a></p>
<h2 id="大整数乘法"><a href="#大整数乘法" class="headerlink" title="大整数乘法"></a>大整数乘法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> in1[MAX], in2[MAX];</span><br><span class="line">    <span class="keyword">int</span> out[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> IN1, IN2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; IN1 &gt;&gt; IN2;</span><br><span class="line">    <span class="keyword">int</span> len1=IN1.length(), len2=IN2.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">        in1[i] = IN1[len1-i<span class="number">-1</span>]<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len2; ++i)</span><br><span class="line">        in2[i] = IN2[len2-i<span class="number">-1</span>]<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; ++j)</span><br><span class="line">            out[i+j] += in1[i] * in2[j];</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1+len2; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(out[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            out[i+<span class="number">1</span>] += out[i] / <span class="number">10</span>;</span><br><span class="line">            out[i] = out[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(out[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag &amp;&amp; s.top()) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="高精度幂运算（POJ-1001）"><a href="#高精度幂运算（POJ-1001）" class="headerlink" title="高精度幂运算（POJ 1001）"></a>高精度幂运算（POJ 1001）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> p;  <span class="comment">//power</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str &gt;&gt; p)&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>, ans[MAX]=&#123;<span class="number">0</span>&#125;, pointNum=<span class="number">0</span>, cnt=<span class="number">0</span>, len = str.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[len<span class="number">-1</span>-i] != <span class="string">'.'</span>) ans[cnt++] = str[len<span class="number">-1</span>-i]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'.'</span>) pointNum=len-i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                num *= <span class="number">10</span>;</span><br><span class="line">                num += str[i]-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p == <span class="number">0</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        cnt=p;</span><br><span class="line">        <span class="keyword">while</span>(--cnt)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] *= num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;  MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[i+<span class="number">1</span>] += ans[i]/<span class="number">10</span>;</span><br><span class="line">                    ans[i] %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mark = <span class="number">0</span>;   <span class="comment">//mark:非0的最高位出现的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = MAX<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]) &#123;mark = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mark2 = <span class="number">0</span>;   <span class="comment">//mark2:后缀零起点的位置+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mark; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]) &#123;mark2 = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pointNum *= p;   <span class="comment">//pointNum:个位数出现的位置</span></span><br><span class="line">        <span class="keyword">if</span>(pointNum==<span class="number">0</span>)  <span class="comment">//没有小数点，全是整数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = mark; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mark2 == <span class="number">0</span>)    <span class="comment">//没有后缀0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mark &lt; pointNum) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pointNum - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                    <span class="keyword">if</span>(i == pointNum) <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//有后缀零,要把后缀零处理掉,也要判断后缀零和小数点位置的关系</span></span><br><span class="line">            <span class="keyword">if</span>(mark2<span class="number">-1</span> == pointNum<span class="number">-1</span>)  <span class="comment">//后缀零的位置在0.1上，则需小数点和后缀零都要舍去,即只打印到个位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= pointNum; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mark2 &lt; pointNum)  <span class="comment">//后缀零的位置在0.01,0.001.....及以后，则保留小数点，只打印到后缀零前一位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mark &lt; pointNum) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = pointNum - <span class="number">1</span>; i &gt;= mark2; --i)</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= mark2; --i) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                        <span class="keyword">if</span>(i == pointNum) <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//后缀零的位置在小数点之前，则结果是个整数，打印范围是最高位非零整数到后缀零前一位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i  = mark; i &lt;= mark2; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>高精度</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>简要记录一下第一次搭Github的弯路</title>
    <url>/2019/10/25/My-New-Post/</url>
    <content><![CDATA[<h1 id="一、事实证明在一篇好的博客的指导下搭建才行"><a href="#一、事实证明在一篇好的博客的指导下搭建才行" class="headerlink" title="一、事实证明在一篇好的博客的指导下搭建才行"></a>一、事实证明在一篇好的博客的指导下搭建才行</h1><p>我总结了一下自己这次搭博客的过程，中间也遇到了很多问题。每个博客里面说的都是大同小异，但在细节方面往往都会忽略掉，导致我这种菜鸡总是会卡在那些地方，所以最好还是多找几篇好的博客放在一起比对着完成每一步，这样一篇博客遗漏的细节另一篇就会提到。</p>
<h1 id="二、安装node-js"><a href="#二、安装node-js" class="headerlink" title="二、安装node.js"></a>二、安装node.js</h1><p>安装链接：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<h1 id="三、git-之后的操作都要在git的命令行中输入"><a href="#三、git-之后的操作都要在git的命令行中输入" class="headerlink" title="三、git (之后的操作都要在git的命令行中输入)"></a>三、git (之后的操作都要在git的命令行中输入)</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>安装链接：<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p>
<p>安装教程可以参考廖雪峰的网站：<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p>
<h2 id="2-git-命令"><a href="#2-git-命令" class="headerlink" title="2.git 命令"></a>2.git 命令</h2><p>成功安装git之后，会发现出现了三种输入git命令的方式：<img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571982512146.png" alt="1571982512146"></p>
<p>以下是这三种git的区别Git Bash：</p>
<p> <strong>Git Bash：</strong></p>
<p>Bash，Unix shell的一种，Linux与Mac OS X v10.4都将它作为默认shell。<br>Git Bash就是一个shell，是Windows下的命令行工具，可以执行Linux命令。<br>Git Bash是基于CMD的，在CMD的基础上增添一些新的命令与功能。所以建议在使用的时候，用Bash更加方便。</p>
<p><strong>Git CMD:</strong></p>
<p>（命令行提示符）是Windows操作系统上的命令行解释程序。当你在Windows上安装git并且习惯使用命令行时，可以使用cmd来运行git命令。</p>
<p> <strong>Git GUI:</strong></p>
<p>基本上针对那些不喜欢黑屏（即命令行）编码的人。它提供了一个图形用户界面来运行您喜欢的git命令。</p>
<p><strong><em>所以之后的操作还是选Git Bash比较好（我一开始用的是CDM，后来才知道用Bash更好）</em></strong></p>
<h1 id="四、安装Hexo（静态网页制作工具）"><a href="#四、安装Hexo（静态网页制作工具）" class="headerlink" title="四、安装Hexo（静态网页制作工具）"></a>四、安装Hexo（静态网页制作工具）</h1><p>安装可以直接参考官网指导：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>
<p>具体只要在git bash中输入这条命令即可：<code>$ npm install hexo-cli -g</code></p>
<h1 id="五、配置Github"><a href="#五、配置Github" class="headerlink" title="五、配置Github"></a>五、配置Github</h1><h2 id="1-注册、登录：https-github-com"><a href="#1-注册、登录：https-github-com" class="headerlink" title="1. 注册、登录：https://github.com/"></a>1. 注册、登录：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></h2><p>选一个以后一直要用并且好记的Username</p>
<h2 id="2-创建一个repo"><a href="#2-创建一个repo" class="headerlink" title="2. 创建一个repo"></a>2. 创建一个repo</h2><h3 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571983597725.png" alt="1571983597725"></h2><h3 id="（2）注意repository-name的格式"><a href="#（2）注意repository-name的格式" class="headerlink" title="（2）注意repository name的格式"></a>（2）注意repository name的格式</h3><p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571983667451.png" alt="1571983667451"></p>
<p>这个就比较坑了，填Repository name的时候一定要按照 Username.github.io的格式来填（Username要和注册的用户名一致），不按这个格式注册的话之后显示的域名会不对。</p>
<h3 id="（3）勾选创建read-me文件"><a href="#（3）勾选创建read-me文件" class="headerlink" title="（3）勾选创建read me文件"></a>（3）勾选创建read me文件</h3><p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571983881188.png" alt="1571983881188"></p>
<h2 id="3-添加密钥"><a href="#3-添加密钥" class="headerlink" title="3.添加密钥"></a>3.添加密钥</h2><p>在本地终端里输入 ssh-keygen -t rsa -C “Github的注册邮箱地址”</p>
<p>一路Enter过来就好，待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，用带格式的记事本打开id_rsa.pub，Ctrl + a复制里面的所有内容，然后进入<br> <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p>
<p>将复制的内容粘贴到Key的输入框，随便写好Title里面的内容，点击Add SSH key按钮即可</p>
<h1 id="六、创建博客"><a href="#六、创建博客" class="headerlink" title="六、创建博客"></a>六、创建博客</h1><h2 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1.初始化博客"></a>1.初始化博客</h2><h3 id="（1）在Users目录下创建一个hexo（应该是Hexo）文档"><a href="#（1）在Users目录下创建一个hexo（应该是Hexo）文档" class="headerlink" title="（1）在Users目录下创建一个hexo（应该是Hexo）文档"></a>（1）在Users目录下创建一个<del>hexo</del>（应该是Hexo）文档</h3><p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571984298405.png" alt="1571984298405"></p>
<h3 id="（2）打开Bash，cd到Hexo目录下，依次输入以下几个命令："><a href="#（2）打开Bash，cd到Hexo目录下，依次输入以下几个命令：" class="headerlink" title="（2）打开Bash，cd到Hexo目录下，依次输入以下几个命令："></a>（2）打开Bash，cd到Hexo目录下，依次输入以下几个命令：</h3><p><code>$ hexo init  
$ nmp install
$ hexo server</code></p>
<p>此时Hexo Server已经启动了，</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571984815964.png" alt="1571984815964"></p>
<p><strong><em>但是也有可能（包括之后）会出现这样的报错信息：</em></strong></p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571984892542.png" alt="1571984892542"></p>
<p><em>遇到4000端口被占用的情况，可以选择终止占用该端口的程序进程，一下是我在网上找到的解决方案：</em></p>
<p><em>首先打开本地CMD，切换到C盘根目录下</em></p>
<p>输入：<code>C:\&gt;netstat -aon|findstr &quot;4000&quot;</code>，查看是哪个应用程序占用了4000端口</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985079771.png" alt="1571985079771"></p>
<p><em>发现本机端口被进程号为21744的进程占用</em></p>
<p>输入：<code>C:\&gt;tasklist|findstr &quot;21744&quot;</code></p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985301792.png" alt="1571985301792"></p>
<p><em>查看到是node占用了4000端口</em></p>
<p>输入：<code>C:\&gt;taskkill /f /pid 21744</code></p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985373011.png" alt="1571985373011"></p>
<p><strong><em>终止了该进程</em></strong></p>
<p>在浏览器中打开 <a href="https://link.juejin.im/?target=http%3A%2F%2Flocalhost%3A4000">http://localhost:4000</a> ，显示如下页面：</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985574109.png" alt="1571985574109"></p>
<p>首次创建时会自带一个Hello World的markdown文件，就是上图显示的页面</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985736209.png" alt="1571985736209"></p>
<p>按Ctrl+C可以 停止Server</p>
<h2 id="2-编辑静态网页"><a href="#2-编辑静态网页" class="headerlink" title="2.编辑静态网页"></a>2.编辑静态网页</h2><h3 id="（1）打开一个新的Bash，输入：-hexo-new-quot-My-New-Post-quot"><a href="#（1）打开一个新的Bash，输入：-hexo-new-quot-My-New-Post-quot" class="headerlink" title="（1）打开一个新的Bash，输入：$ hexo new &quot;My New Post&quot;"></a>（1）打开一个新的Bash，输入：<code>$ hexo new &quot;My New Post&quot;</code></h3><p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571985933598.png" alt="1571985933598"></p>
<p>发现在_posts目录下新增了一个名为”My-New-Post”的markdown文件。</p>
<p>执行下面的命令，将markdown文件生成静态网页：</p>
<p><code>$ hexo generate</code></p>
<h3 id="（2）部署Github"><a href="#（2）部署Github" class="headerlink" title="（2）部署Github"></a>（2）部署Github</h3><p>在Hexo目录下找到_config.yml文件进行配置，找到deploy选项所在的位置，配置成下图所示：</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571986302004.png" alt="1571986302004"></p>
<p>其中repo中的Username改成你自己的github的用户名</p>
<h3 id="（3）安装hexo-deployer-git，-以及部署"><a href="#（3）安装hexo-deployer-git，-以及部署" class="headerlink" title="（3）安装hexo-deployer-git， 以及部署"></a>（3）安装hexo-deployer-git， 以及部署</h3><p>输入：</p>
<p><code>$ npm install hexo-deployer-git --save</code></p>
<p><code>$ hexo deploy</code></p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571986875412.png" alt="1571986875412"></p>
<p>现在可以看到自己的静态网站博客搭好了</p>
<h1 id="七、最后有一点问题就是在Bash里面用ctrl-C终止不了，没有反应。"><a href="#七、最后有一点问题就是在Bash里面用ctrl-C终止不了，没有反应。" class="headerlink" title="七、最后有一点问题就是在Bash里面用ctrl+C终止不了，没有反应。"></a>七、最后有一点问题就是在Bash里面用ctrl+C终止不了，没有反应。</h1>]]></content>
  </entry>
  <entry>
    <title>map——映射(UVA156)</title>
    <url>/2019/12/17/map%E2%80%94%E2%80%94%E6%98%A0%E5%B0%84(UVA156)/</url>
    <content><![CDATA[<h2 id="map——映射"><a href="#map——映射" class="headerlink" title="map——映射"></a>map——映射</h2><p><strong>特性</strong> ：map就是从键到值的映射，即键值对。因为重载了‘[]’运算符， map像是数组的“高级版”，其基本操作函数与set相同， 可以按照从小到大的顺序循环遍历其中的元素， 因为重载了‘[]’运算符， map也可以像数组一样使用， 因此map也被称作“关联数组”。</p>
<p><strong>用法</strong>：</p>
<blockquote>
<ol>
<li><p>count()： 使用count，返回的是被查找元素的个数。如果有，返回1；否则，返回0。注意，map中不存在相同元素，所以返回值只能是1或0。 如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map&lt;int,int&gt; int_val;</span><br><span class="line">int_val[32]&#x3D;22;</span><br><span class="line">int_val[32]&#x3D;32;   &#x2F;&#x2F;再次插入相同的key，value的值会被覆盖;</span><br><span class="line">int_val[12]&#x3D;22;</span><br><span class="line">cout&lt;&lt;&quot;键为32的map个数：&quot;&lt;&lt;int_val.count(32)&lt;&lt;&quot;\n键为32的map的值：&quot;&lt;&lt;int_val[32]&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="C:%5CUsers%5Cmerits%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1576832624492.png" alt="1576832624492"></p>
</li>
</ol>
</blockquote>
<h5 id="一个写得很好的博客"><a href="#一个写得很好的博客" class="headerlink" title="一个写得很好的博客"></a><a href="https://blog.csdn.net/qq_24016309/article/details/88535808" target="_blank" rel="noopener">一个写得很好的博客</a></h5><p><strong>例题</strong>：Ananagrams UVa 156</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; cnt; <span class="comment">//统计某一字符串的出现次数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words; <span class="comment">//用来存放原始字符串数据，且帮助遍历关联数组map</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">repr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span>  <span class="comment">//在不改变原始字符串数据的情况下产生排序后的字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=<span class="built_in">tolower</span>(ans[i]);        </span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> ans;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">        words.push_back(s);</span><br><span class="line">        s = repr(s);</span><br><span class="line">        <span class="keyword">if</span>(!cnt[s]) cnt[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> cnt[s]+=<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans; <span class="comment">//题目要求按照字典序的方式将所有符合要求的字符串输出，于是先另开一个vector保存所有符合要求的字符串，再进行排序。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;words.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[repr(words[i])]==<span class="number">1</span>) ans.push_back(words[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本题之所以不用map遍历而是要另外再开两个vector的原因是本题要求按照字典序（vector&lt;string&gt; ans）输出所有（vector&lt;string&gt; words）符合要求的字符串。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>priority_queue——优先队列(Ugly Numbers UVa136)</title>
    <url>/2020/07/16/priority_queue%E2%80%94%E2%80%94%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97(Ugly-Numbers-UVa136)/</url>
    <content><![CDATA[<p><strong>方法</strong>：与queue基本相同，但front()要改为top()</p>
<p><strong>重载运算符</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义结构，使用运算符重载,自定义优先级1  </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span>&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> a&gt;b;<span class="comment">//最小值优先  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp2</span>&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> a&lt;b;<span class="comment">//最大值优先  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//定义结构，使用运算符重载,自定义优先级2  </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number1</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> x;  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> number1 &amp;a) <span class="keyword">const</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> x&gt;a.x;<span class="comment">//最小值优先  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number2</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> x;  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> number2 &amp;a) <span class="keyword">const</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> x&lt;a.x;<span class="comment">//最大值优先  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   priority_queue&lt;<span class="keyword">int</span>&gt;que;<span class="comment">//采用默认优先级构造队列  </span></span><br><span class="line">  </span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp1&gt;que1;<span class="comment">//最小值优先  </span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp2&gt;que2;<span class="comment">//最大值优先  </span></span><br><span class="line">  </span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;que3;<span class="comment">//注意“&gt;&gt;”会被认为错误，  </span></span><br><span class="line">                                                      <span class="comment">//这是右移运算符，所以这里用空格号隔开  </span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt; &gt;que4;<span class="comment">////最大值优先  </span></span><br><span class="line">  </span><br><span class="line">    priority_queue&lt;number1&gt;que5;  <span class="comment">//结构体优先队列</span></span><br><span class="line">    priority_queue&lt;number2&gt;que6;  <span class="comment">//结构体优先队列</span></span><br></pre></td></tr></table></figure>



<p><strong>例题</strong>：</p>
<blockquote>
<p>题目描述：</p>
<p>我们把只包含因子2、3和5的数称作丑数（Ugly Number）。求按从小到大的顺序的第1500个丑数。例如6、8都是丑数，但14不是，因为它包含因子7。习惯上我们把1当做第一个丑数</p>
</blockquote>
<p><strong>AC代码</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt;q;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> arr[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    q.push(x);</span><br><span class="line">    s.insert(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1500</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> t=arr[j]*x;</span><br><span class="line">            <span class="keyword">if</span>(!s.count(t))&#123;</span><br><span class="line">                q.push(t);</span><br><span class="line">                s.insert(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>感想</strong>：题目难度一般，考察了逆向思维，并且利用set()去重，注意不用long long 过不了。</p>
]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>set——集合(UVA10815)</title>
    <url>/2019/12/17/set%E2%80%94%E2%80%94%E9%9B%86%E5%90%88(UVA10815)/</url>
    <content><![CDATA[<h2 id="set——集合"><a href="#set——集合" class="headerlink" title="set——集合"></a>set——集合</h2><h4 id="引文："><a href="#引文：" class="headerlink" title="引文："></a>引文：</h4><p>集合类似于数学中的集合， 其中每个元素只能出现一次， 与py相比不同的是， py使用set()返回的是一个无序的元组， 而在C++中set的string已经重载了’&lt;’运算符， 插入的字符串会以字典序进行排序。</p>
<p><strong>特征</strong>： 被插入进set的元素都会在set里进行自动排序和去重。  </p>
<p><strong>头文件</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><strong>声明方法</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; int_val;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; char_val;</span><br></pre></td></tr></table></figure>



<p><strong>操作元素</strong> ：使用迭代器，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set&lt;int&gt;::iterator it; &#x2F;&#x2F;新建了一个set&lt;int&gt;类型的迭代器， 迭代器的使用可以类比指针。</span><br></pre></td></tr></table></figure>



<p><strong>常用的访问方法</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先优化一个集合</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; val; <span class="comment">//声明一个int类型的集合</span></span><br><span class="line"></span><br><span class="line">val.insert(<span class="number">1</span>); <span class="comment">//插入一个元素</span></span><br><span class="line"></span><br><span class="line">val.<span class="built_in">size</span>(); <span class="comment">//返回集合的元素个数</span></span><br><span class="line"></span><br><span class="line">val.erase(val.<span class="built_in">begin</span>()); <span class="comment">//删除集合的第一个元素</span></span><br><span class="line">val.erase(val.<span class="built_in">end</span>()); <span class="comment">//删除集合的最后一个元素</span></span><br><span class="line">val.erase(<span class="number">4</span>); <span class="comment">//删除集合中‘4’这个元素，由于集合中的每一个元素都具有唯一性，因此可以直接删除</span></span><br><span class="line"></span><br><span class="line">it = val.<span class="built_in">find</span>(<span class="number">3</span>); <span class="comment">//返回键值为3的迭代器</span></span><br><span class="line"></span><br><span class="line">it = val.lower_bound(<span class="number">11</span>); <span class="comment">//返回一个大于等于11的定位器</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it; <span class="comment">//输出一个大于等于11的值</span></span><br><span class="line"></span><br><span class="line">it = val.upper_bound(<span class="number">11</span>); <span class="comment">//返回一个小于等于11的定位器</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it; <span class="comment">//输出一个小于等于11的值</span></span><br><span class="line"></span><br><span class="line">val.<span class="built_in">clear</span>() <span class="comment">//清空集合中的所有元素</span></span><br><span class="line">    </span><br><span class="line">val.empty() <span class="comment">//判断集合是否为空，若为空则返回false，非空返回true</span></span><br></pre></td></tr></table></figure>



<p><strong>遍历集合中元素的方法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(set&lt;string&gt;::iterator it &#x3D; dict.begin(); it !&#x3D; dict.end(); ++it)</span><br></pre></td></tr></table></figure>



<h4 id="例题：-Andy’s-first-dictionary-UVa-10185"><a href="#例题：-Andy’s-first-dictionary-UVa-10185" class="headerlink" title="例题： Andy’s first dictionary  UVa 10185"></a>例题： Andy’s first dictionary  UVa 10185</h4><p>按照字典序输出一句话中出现的所有单词， 每个单词仅输出一次， 代码如下： </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> buf, s;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[i])) s[i]=<span class="built_in">tolower</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> s[i]=<span class="string">' '</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;        </span><br><span class="line">        <span class="keyword">while</span>(ss&gt;&gt;buf) dict.insert(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it=dict.<span class="built_in">begin</span>(); it!=dict.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>queue——队列(Team Queue UVa540)</title>
    <url>/2020/07/16/queue%E2%80%94%E2%80%94%E9%98%9F%E5%88%97(Team-Queue-UVa540)/</url>
    <content><![CDATA[<p><strong>特征</strong>：</p>
<blockquote>
<p>1.队列(queue)是符合“先进先出”规则的公平队列</p>
<p>2.队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作 </p>
</blockquote>
<p><strong>方法</strong>：</p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C++队列Queue类成员函数如下:</span><br><span class="line"></span><br><span class="line">back()返回最后一个元素</span><br><span class="line"></span><br><span class="line">empty()如果队列空则返回真</span><br><span class="line"></span><br><span class="line">front()返回第一个元素</span><br><span class="line"></span><br><span class="line">pop()删除第一个元素</span><br><span class="line"></span><br><span class="line">push()在末尾加入一个元素</span><br><span class="line"></span><br><span class="line"><span class="built_in">size</span>()返回队列中元素的个数</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>例题</strong>：</p>
<blockquote>
<p>题目描述：有t个团队的人正在排一个长队。每次新来一个人时,如果他有队友在排队,那么这个<br> 新人会插队到最后一个队友的身后。如果没有任何一个队友排队,则他会排到长队的队尾。<br> 输入每个团队中所有队员的编号,要求支持如下3种指令(前两种指令可以穿插进行)。<br> ENQUEUEx:编号为x的人进入长队。<br> DEQUEUE:长队的队首出队。<br> STOP:停止模拟。</p>
</blockquote>
<p><strong>AC代码如下：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t)==<span class="number">1</span>)&amp;&amp;t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\n"</span>, ++kase);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; team;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">while</span>(n--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">                team[x]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q, q2[maxt]; <span class="comment">//q是团队的队列，而q2[maxt]是每个团队内部的队列，如q2[0],q2[1]...等</span></span><br><span class="line">        <span class="built_in">string</span> cmd;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;cmd&amp;&amp;cmd[<span class="number">0</span>]!=<span class="string">'S'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cmd[<span class="number">0</span>]==<span class="string">'E'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">                <span class="keyword">if</span>(q2[team[x]].empty()) q.push(team[x]);</span><br><span class="line">                q2[team[x]].push(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> team = q.front();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;q2[team].front()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                q2[team].pop();</span><br><span class="line">                <span class="keyword">if</span>(q2[team].empty()) q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>感想</strong>：水题，解题思路非常明显，map关联数组构建团队与队员的对应关系，q队列储存团队整体的队列顺序，q2[maxt]是队列的数组，储存每一个团队中所有队员的队列顺序。</p>
]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>stack——栈 （UVA12096)</title>
    <url>/2020/07/16/stack%E2%80%94%E2%80%94%E6%A0%88%20%EF%BC%88The%20SetStack%20Computer%20%20UVA12096)/</url>
    <content><![CDATA[<h2 id="stack——栈-（UVA12096"><a href="#stack——栈-（UVA12096" class="headerlink" title="stack——栈 （UVA12096)"></a>stack——栈 （UVA12096)</h2><p><strong>简介</strong>： </p>
<p>1.栈是STL提供的3种特殊的数据结构之一（其他两种分别是队列和优先队列）</p>
<p>2.栈是符合“后进后出”（Last In First Out, LIFO)规则的数据结构</p>
<p>3.有push, pop, top等操作</p>
<p>4.头文件及声明方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;  //头文件</span></span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;  <span class="comment">//声明一个栈</span></span><br></pre></td></tr></table></figure>



<p><strong>例题：集合栈计算机 (UVA12096)</strong>:</p>
<p><em>题目描述：</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">有一个专门为了集合运算而设计的“集合栈”计算机。该机器有一个初始为空的栈，并且支持以下操作：</span><br><span class="line">PUSH：空集“&#123;&#125;”入栈</span><br><span class="line">DUP：把当前栈顶元素复制一份后再入栈</span><br><span class="line">UNION：出栈两个集合，然后把两者的并集入栈</span><br><span class="line">INTERSECT：出栈两个集合，然后把二者的交集入栈</span><br><span class="line">ADD：出栈两个集合，然后把先出栈的集合加入到后出栈的集合中，把结果入栈</span><br><span class="line"><span class="code">       每次操作后，输出栈顶集合的大小（即元素个数）。例如栈顶元素是A=&#123; &#123;&#125;， &#123;&#123;&#125;&#125; &#125;， 下一个元素是B=&#123; &#123;&#125;， &#123;&#123;&#123;&#125;&#125;&#125; &#125;，则：</span></span><br><span class="line">UNION操作将得到&#123; &#123;&#125;， &#123;&#123;&#125;&#125;， &#123;&#123;&#123;&#125;&#125;&#125; &#125;，输出3.</span><br><span class="line">INTERSECT操作将得到&#123; &#123;&#125; &#125;，输出1</span><br><span class="line">ADD操作将得到&#123; &#123;&#125;， &#123;&#123;&#123;&#125;&#125;&#125;， &#123; &#123;&#125;， &#123;&#123;&#125;&#125; &#125; &#125;，输出3.</span><br><span class="line">（输入：先输入测试次数，再输入操作次数，再输入具体操作）</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INS(x) inserter(x,x.begin())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Set;</span><br><span class="line"><span class="built_in">map</span>&lt;Set,<span class="keyword">int</span>&gt; IDcache;</span><br><span class="line"><span class="built_in">vector</span>&lt;Set&gt; Setcache;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ID</span><span class="params">(Set x)</span> <span class="comment">//给栈中的每一个集合一个ID值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IDcache.count(x)) <span class="keyword">return</span> IDcache[x]; <span class="comment">//查找映射中有无含有给定集合的ID</span></span><br><span class="line">    Setcache.push_back(x); <span class="comment">//如果给定集合的ID不存在，将其压入vector中</span></span><br><span class="line">    <span class="keyword">return</span> IDcache[x]=Setcache.<span class="built_in">size</span>()<span class="number">-1</span>;  <span class="comment">//集合的ID值从0开始</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">string</span> ss;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line">        <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'P'</span>) s.push(ID(Set()));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'D'</span>) s.push(s.top());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Set x1=Setcache[s.top()]; s.pop();</span><br><span class="line">            Set x2=Setcache[s.top()]; s.pop();</span><br><span class="line">            Set x;</span><br><span class="line">            <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'U'</span>) set_union(ALL(x1), ALL(x2), INS(x));  <span class="comment">//并集函数，头文件是&lt;algorithm&gt;</span></span><br><span class="line">            <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'I'</span>) set_intersection(ALL(x1), ALL(x2), INS(x));</span><br><span class="line">            <span class="keyword">if</span>(ss[<span class="number">0</span>]==<span class="string">'A'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x=x2;</span><br><span class="line">                x.insert(ID(x1));</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(ID(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Setcache[s.top()].<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"***"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>数据离散化处理(无穷变有限)、unique去重函数的使用</title>
    <url>/2020/07/16/%E6%95%B0%E6%8D%AE%E7%A6%BB%E6%95%A3%E5%8C%96%E5%A4%84%E7%90%86(%E6%97%A0%E7%A9%B7%E5%8F%98%E6%9C%89%E9%99%90)%E3%80%81unique%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="题目：城市正视图（Urban-Elevations）UVa221"><a href="#题目：城市正视图（Urban-Elevations）UVa221" class="headerlink" title="题目：城市正视图（Urban Elevations）UVa221"></a>题目：<a href="https://vjudge.net/problem/UVA-221" target="_blank" rel="noopener">城市正视图（Urban Elevations）UVa221</a></h3><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">//id为建筑物的编号，按照输入顺序来赋值</span></span><br><span class="line">    <span class="keyword">double</span> x, y, w, d, h; <span class="comment">//横(x)纵(y)坐标、长(width)、宽(depth)、高(height)</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Building&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;rhs.x || (x==rhs.x&amp;&amp;y&lt;rhs.y);    <span class="comment">//定义排序方式：从小到大按x的顺序排，x相等找y</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> mx)</span> <span class="comment">//判断点mx是否在建筑物i的x坐标囊括的区间内</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b[i].x&lt;=mx &amp;&amp; b[i].x+b[i].w&gt;=mx; <span class="comment">//左端点&lt;=mx&lt;=右端点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">visible</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> mx)</span>  <span class="comment">//判断建筑物i前面是否有遮挡</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cover(i,mx)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;T; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cover(k,mx) &amp;&amp; b[k].y&lt;b[i].y &amp;&amp; b[k].h&gt;=b[i].h) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x[<span class="number">2</span>*maxn];</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!T) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b[i].x&gt;&gt;b[i].y&gt;&gt;b[i].w&gt;&gt;b[i].d&gt;&gt;b[i].h;</span><br><span class="line">            b[i].id=i+<span class="number">1</span>;</span><br><span class="line">            x[<span class="number">2</span>*i]=b[i].x;</span><br><span class="line">            x[<span class="number">2</span>*i+<span class="number">1</span>]=b[i].x+b[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b,b+T);</span><br><span class="line">        sort(x,x+<span class="number">2</span>*T);</span><br><span class="line">        <span class="keyword">int</span> m = unique(x, x+T*<span class="number">2</span>) - x;  <span class="comment">//端点去重化处理</span></span><br><span class="line">        <span class="keyword">if</span>(kase++) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"For map #"</span>&lt;&lt;kase&lt;&lt;<span class="string">", the visible buildings are numbered as follows:\n"</span>&lt;&lt;b[<span class="number">0</span>].id;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;T; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j+<span class="number">1</span>&lt;m;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(visible(i,(x[j]+x[j+<span class="number">1</span>])/<span class="number">2</span>))&#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;b[i].id;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="感想：做法不是很容易理解"><a href="#感想：做法不是很容易理解" class="headerlink" title="感想：做法不是很容易理解"></a>感想：做法不是很容易理解</h4>]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>离散化 unique()去重函数</tag>
      </tags>
  </entry>
  <entry>
    <title>swap函数的异或实现及对反转数组的应用</title>
    <url>/2020/07/16/swap%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%88%96%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%AF%B9%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>异或运算(^)</strong> : a^b，当a,b中只有一个为真时异或的结果为真。异或又被称为布尔运算中的加法运算，其中元素的加法逆元为其本身，如a^a=0。</p>
<p><strong>swap()函数的异或实现</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inplace_swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a = *a ^ *b;</span><br><span class="line">    *b = *a ^ *b;</span><br><span class="line">    *a = *a ^ *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对反转数组的应用</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_array</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first, last;</span><br><span class="line">    <span class="keyword">for</span>(first=<span class="number">0</span>, last=cnt<span class="number">-1</span>; first&lt;last; first++, last--) inplace_swap(&amp;a[first], &amp;a[last]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>swap()</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库(database) UVa1592</title>
    <url>/2020/07/16/%E6%95%B0%E6%8D%AE%E5%BA%93(database)-UVa1592/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://vjudge.net/problem/UVA-1592" target="_blank" rel="noopener">题目链接</a></p>
<p><strong>题目</strong>：</p>
<p>Peter studies the theory of relational databases. Table in the relational database consists of values that are arranged in rows and columns.</p>
<p>There are different normal forms that database may adhere to. Normal forms are designed to minimize the redundancy of data in the database. For example, a database table for a library might have a row for each book and columns for book name, book author, and author’s email.</p>
<p>If the same author wrote several books, then this representation is clearly redundant. To formally define this kind of redundancy Peter has introduced his own normal form. A table is in Peter’s Normal Form (PNF) if and only if there is no pair of rows and a pair of columns such that the values in the corresponding columns are the same for both rows.</p>
<p>How to compete in ACM ICPC    Peter    peter@neerc .ifmo.ru<br>How to win ACM ICPC    Michael    <a href="mailto:michael@neerc.ifmo.ru">michael@neerc.ifmo.ru</a><br>Notes from ACM ICPC champion    Michael    <a href="mailto:michael@neerc.ifmo.ru">michael@neerc.ifmo.ru</a></p>
<p>The above table is clearly not in PNF, since values for 2rd and 3rd columns repeat in 2nd and 3rd rows. However, if we introduce unique author identifier and split this table into two tables – one containing book name and author id, and the other containing book id, author name, and author email, then both resulting tables will be in PNF.</p>
<p>Given a table your task is to figure out whether it is in PNF or not.</p>
<p>Input<br>Input contains several datasets. The first line of each dataset contains two integer numbersn and m (1n10000, 1m10), the number of rows and columns in the table. The following n lines contain table rows. Each row hasm column values separated by commas. Column values consist of ASCII characters from space (ASCII code 32) to tilde (ASCII code 126) with the exception of comma (ASCII code 44). Values are not empty and have no leading and trailing spaces. Each row has at most 80 characters (including separating commas).</p>
<p>Output<br>For each dataset, if the table is in PNF write to the output file a single word <code>YES&quot; (without quotes). If the table is not in PNF, then write three lines. On the first line write a single word</code>NO” (without quotes). On the second line write two integer row numbers r1 andr2 (1r1,r2n,r1r2), on the third line write two integer column numbers c1 andc2 (1c1,c2m,c1c2), so that values in columnsc1 andc2 are the same in rowsr1 andr2.</p>
<p>Sample Input </p>
<p>3 3<br>How to compete in ACM ICPC,Peter,<a href="mailto:peter@neerc.ifmo.ru">peter@neerc.ifmo.ru</a><br>How to win ACM ICPC,Michael,<a href="mailto:michael@neerc.ifmo.ru">michael@neerc.ifmo.ru</a><br>Notes from ACM ICPC champion,Michael,<a href="mailto:michael@neerc.ifmo.ru">michael@neerc.ifmo.ru</a><br>2 3<br>1,Peter,<a href="mailto:peter@neerc.ifmo.ru">peter@neerc.ifmo.ru</a><br>2,Michael,<a href="mailto:michael@neerc.ifmo.ru">michael@neerc.ifmo.ru</a></p>
<p>Sample Output </p>
<p>NO<br>2 3<br>2 3<br>YES</p>
<p>题意：</p>
<p>给一个数据库，查找是否存在（r1,c1)=（r2,c1) &amp;&amp; (r1,c2)=(r2,c2)，即：不同的二行，对应二列字符串相同</p>
</blockquote>
<h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="comment">//全局变量未初始化默认值为零，用这个变量为每个字符串分配ID</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p;  <span class="comment">//表示info中的二元组，即同一行中不同列元素的值</span></span><br><span class="line"><span class="comment">//vector&lt;string&gt; v;  //存放原始字符串，将所有不重复的字符串压入vector,以其元素个数的下一个来分配ID，集合栈计算机那道题需要，本题中没必要用。</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; IDcache;  <span class="comment">//给表中的每个字符串生成一个ID</span></span><br><span class="line"><span class="built_in">map</span>&lt;p,<span class="keyword">int</span>&gt; info;  <span class="comment">//暂时储存两列中不同行的二元组以及所对应的行的值</span></span><br><span class="line"><span class="keyword">int</span> table[<span class="number">10002</span>][<span class="number">10</span>];  <span class="comment">//储存字符串ID的表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="built_in">string</span> temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IDcache.count(temp)) <span class="keyword">return</span> IDcache[temp];</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">return</span> IDcache[temp]= cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span>  <span class="comment">//三重遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,z;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;column<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;column;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(z=<span class="number">0</span>;z&lt;row;z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=table[z][i];</span><br><span class="line">                <span class="keyword">int</span> y=table[z][j];</span><br><span class="line">                <span class="keyword">if</span>(info.count(p(x,y)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;info[p(x,y)]+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;z+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    info[p(x,y)]=z;  <span class="comment">//储存二元组以及它们所对应的行的值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            info.<span class="built_in">clear</span>();  <span class="comment">//第i和j列没有找到满足条件的元素，清空info，更新i和j</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row,column;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;row&gt;&gt;column)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;column; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> ch;</span><br><span class="line">                <span class="keyword">while</span>(ch=getchar())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">','</span>||ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">                    temp+=ch;</span><br><span class="line">                &#125;</span><br><span class="line">                table[i][j]=ID(temp);</span><br><span class="line">                temp.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output(row,column);</span><br><span class="line">        IDcache.<span class="built_in">clear</span>();</span><br><span class="line">        info.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h3><p>难度分为四个方面：</p>
<p>一、把题读懂就挺困难的</p>
<p>二、把字符串的表转换成储存整数值ID的表</p>
<p>三、map储存二元组以及对应的行值</p>
<p>四、利用info这个map关联数组将四重遍历简化成三重遍历</p>
]]></content>
      <categories>
        <category>STL fresher</category>
      </categories>
      <tags>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireless Network POJ - 2236</title>
    <url>/2020/07/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/Wireless-Network-POJ---2236/</url>
    <content><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><a href="https://vjudge.net/problem/POJ-2236" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> n, gap;</span><br><span class="line"><span class="keyword">bool</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> posx[maxn];</span><br><span class="line"><span class="keyword">int</span> posy[maxn];</span><br><span class="line"><span class="keyword">int</span> visit[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	    father[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findfather</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findfather(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;gap;</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;posx[i]&gt;&gt;posy[i];</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">int</span> p,q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((posx[i]-posx[j])*(posx[i]-posx[j])+(posy[i]-posy[j])*(posy[i]-posy[j])&lt;=gap*gap) mp[i][j]=mp[j][i]=<span class="literal">true</span>;</span><br><span class="line">		&#125;  <span class="comment">//用sqrt()函数不精准</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;ch)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">'O'</span>)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line">			visit[p]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(mp[p][i]&amp;&amp;visit[i]&amp;&amp;p!=i)&#123;</span><br><span class="line">				    <span class="keyword">int</span> ifa=findfather(i);</span><br><span class="line">				    <span class="keyword">int</span> pfa=findfather(p);</span><br><span class="line">					<span class="keyword">if</span>(ifa==pfa) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span> father[ifa]=pfa;  <span class="comment">//全找的是根父节点</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'S'</span>)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">			<span class="keyword">if</span>(findfather(p)==findfather(q)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"SUCCESS"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"FAIL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>The Suspects POJ - 1611</title>
    <url>/2020/07/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/The-Suspects-POJ---1611/</url>
    <content><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><a href="https://vjudge.net/problem/POJ-1611" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;  <span class="comment">//学生人数， 组数</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) father[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findfather</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findfather(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>&amp;&amp;n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> k,a;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">                <span class="keyword">if</span>(!a) flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> q.push(a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!q.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x=q.front();</span><br><span class="line">                    father[findfather(x)]=<span class="number">0</span>;</span><br><span class="line">                    q.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">bool</span> flag2=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">int</span> fa=findfather(x);</span><br><span class="line">                <span class="keyword">while</span>(!q.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> y=q.front();</span><br><span class="line">                    q.pop();</span><br><span class="line">                    <span class="keyword">if</span>(findfather(y)==<span class="number">0</span>) flag2=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> father[findfather(y)]=fa;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag2) father[fa]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(findfather(i)==<span class="number">0</span>) ++sum;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Arbitrage POJ - 2240</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Arbitrage-POJ---2240/</url>
    <content><![CDATA[<h2 id="判断是否是增加的环"><a href="#判断是否是增加的环" class="headerlink" title="判断是否是增加的环"></a>判断是否是增加的环</h2><p><a href="https://vjudge.net/problem/POJ-2240" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">35</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m; <span class="comment">//货币的种类数量， 兑换的方式数量</span></span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">double</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">double</span> rate;</span><br><span class="line">&#125;e[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    e[++cnt].to=y;</span><br><span class="line">    e[cnt].next=p[x];</span><br><span class="line">    e[cnt].rate=r;</span><br><span class="line">    p[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis[st]=<span class="number">1</span>;</span><br><span class="line">    q.push(st);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        visit[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=p[x]; i; i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&lt;dis[x]*e[i].rate)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[x]*e[i].rate;</span><br><span class="line">                <span class="keyword">if</span>(dis[st]&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!visit[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(y);</span><br><span class="line">                    visit[y]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            id[s]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="keyword">double</span> ee;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;ee&gt;&gt;b;</span><br><span class="line">            _add(id[a], id[b], ee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(spfa(i))</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;kase++&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Frogger POJ - 2253</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Frogger%20POJ%20-%202253%20/</url>
    <content><![CDATA[<h2 id="求从点1到2的最大边权的最小值"><a href="#求从点1到2的最大边权的最小值" class="headerlink" title="求从点1到2的最大边权的最小值"></a>求从点1到2的最大边权的最小值</h2><p><a href="https://vjudge.net/problem/POJ-2253" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,kase;</span><br><span class="line"><span class="keyword">double</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">double</span> b)&#123;x=a; d=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(d==a.d) <span class="keyword">return</span> x&lt;a.x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d&gt;a.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">temp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">&#125;t[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dirkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) dis[i]=INF;</span><br><span class="line">    dis[st]=<span class="number">0</span>;</span><br><span class="line">    q.push(node(st, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y=eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[y.x]&gt;<span class="built_in">max</span>(y.d,dis[x.x]))</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y.x]=<span class="built_in">max</span>(y.d, dis[x.x]);</span><br><span class="line">                q.push(node(y.x, dis[y.x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> a,b;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k=n;</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            t[cnt].x=a;</span><br><span class="line">            t[cnt].y=b;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                eg[i].push_back(node(j, <span class="built_in">sqrt</span>((t[i].x-t[j].x)*(t[i].x-t[j].x)+(t[i].y-t[j].y)*(t[i].y-t[j].y))));</span><br><span class="line">                eg[j].push_back(node(i, <span class="built_in">sqrt</span>((t[i].x-t[j].x)*(t[i].x-t[j].x)+(t[i].y-t[j].y)*(t[i].y-t[j].y))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Dirkstra(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;<span class="number">1</span>+kase++&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Frog Distance = %.3lf\n\n"</span>, dis[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) eg[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Currency Exchange POJ - 1860</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Currency-Exchange-POJ---1860/</url>
    <content><![CDATA[<h2 id="求是否是正权环"><a href="#求是否是正权环" class="headerlink" title="求是否是正权环"></a>求是否是正权环</h2><p><a href="https://vjudge.net/problem/POJ-1860" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">double</span> dis[maxn], cost[maxn][maxn], rate[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> m,n,p; <span class="comment">//货币种类数、兑换站点个数、Jack所持货币的种类</span></span><br><span class="line"><span class="keyword">double</span> q;  <span class="comment">//Jack所持的货币的总量</span></span><br><span class="line"><span class="keyword">int</span> a,b;  <span class="comment">//一个兑换点允许兑换的货币种类</span></span><br><span class="line"><span class="keyword">double</span> c,d,e,f;  <span class="comment">//汇率、佣金、汇率、佣金</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[st]=q;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;qt;</span><br><span class="line">    qt.push(st);</span><br><span class="line">    <span class="keyword">while</span>(!qt.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=qt.front();</span><br><span class="line">        qt.pop();</span><br><span class="line">        visit[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i]&lt;(dis[x]-cost[x][i])*rate[x][i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i]=(dis[x]-cost[x][i])*rate[x][i];</span><br><span class="line">                <span class="keyword">if</span>(dis[st]&gt;q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!visit[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    visit[i]=<span class="literal">true</span>;</span><br><span class="line">                    qt.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;f;</span><br><span class="line">        cost[a][b]=d;</span><br><span class="line">        cost[b][a]=f;</span><br><span class="line">        rate[a][b]=c;</span><br><span class="line">        rate[b][a]=e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(spfa(p)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Candies POJ - 3159</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Candies-POJ---3159/</url>
    <content><![CDATA[<h2 id="dirkstra"><a href="#dirkstra" class="headerlink" title="dirkstra()"></a>dirkstra()</h2><p><a href="https://vjudge.net/problem/POJ-3159" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p1, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.first&gt;p2.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> to;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">&#125;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span><br><span class="line">&#123;</span><br><span class="line">	eg[++cnt].to=y;</span><br><span class="line">	eg[cnt].next=p[x];</span><br><span class="line">	eg[cnt].len=w;</span><br><span class="line">	p[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; , <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;, cmp&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) dis[i]=INF;</span><br><span class="line">	dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.top().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span>(visit[x]) <span class="keyword">continue</span>;</span><br><span class="line">		visit[x]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=p[x]; i; i=eg[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> y=eg[i].to;</span><br><span class="line">			<span class="keyword">if</span>(dis[y]&gt;dis[x]+eg[i].len)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[y]=dis[x]+eg[i].len;</span><br><span class="line">				q.push(make_pair(dis[y], y));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">while</span>(m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a,&amp;b,&amp;c);</span><br><span class="line">		_add(a,b,c);</span><br><span class="line">	&#125;</span><br><span class="line">	dij(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Heavy Transportation POJ - 1797</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Heavy%20Transportation%20POJ%20-%201797/</url>
    <content><![CDATA[<h2 id="求两点之间最小边权的最大值"><a href="#求两点之间最小边权的最大值" class="headerlink" title="求两点之间最小边权的最大值"></a>求两点之间最小边权的最大值</h2><p><a href="https://vjudge.net/problem/POJ-1797" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;x=a; d=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d&lt;a.d;  <span class="comment">//求最大边权的最小值的时候要从大到小排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dirkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>]=INF;  <span class="comment">//与求最小边权的最大值正好相反</span></span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(st, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y=eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[y.x]&lt;<span class="built_in">min</span>(y.d, dis[x.x]))  <span class="comment">//相反</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[y.x]=<span class="built_in">min</span>(y.d,dis[x.x]);</span><br><span class="line">                q.push(node(y.x, dis[y.x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) dis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            eg[a].push_back(node(b,c));</span><br><span class="line">            eg[b].push_back(node(a,c));</span><br><span class="line">        &#125;</span><br><span class="line">        Dirkstra(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>, kase++);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>, dis[n]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) eg[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Invitation Cards POJ - 1511</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Invitation-Cards-POJ---1511/</url>
    <content><![CDATA[<h2 id="从原点出发到所有点再回来的最短距离（dir正反向存图）"><a href="#从原点出发到所有点再回来的最短距离（dir正反向存图）" class="headerlink" title="从原点出发到所有点再回来的最短距离（dir正反向存图）"></a>从原点出发到所有点再回来的最短距离（dir正反向存图）</h2><p><a href="https://vjudge.net/problem/POJ-1511" target="_blank" rel="noopener">链接</a></p>
<p>卡输入，cin过不了，tle</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="keyword">int</span> from[maxn], to[maxn];</span><br><span class="line">ll cost[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, ll b)&#123;x=a; w=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&gt;a.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        eg[i].<span class="built_in">clear</span>();</span><br><span class="line">        dis[i]=INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dirkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.push(node(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y = eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[y.x]&gt;dis[x.x]+y.w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y.x]=dis[x.x]+y.w;</span><br><span class="line">                q.push(node(y.x, dis[y.x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        ll c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            from[i]=a;</span><br><span class="line">            to[i]=b;</span><br><span class="line">            cost[i]=c;</span><br><span class="line">            eg[a].push_back(node(b, c));</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        dirkstra();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            sum+=dis[i];</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            eg[to[i]].push_back(node(from[i], cost[i]));</span><br><span class="line">        dirkstra();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            sum+=dis[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Cow Contest POJ - 3660</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Cow-Contest-POJ---3660/</url>
    <content><![CDATA[<h2 id="判断某个点在所有点中的位置是否是确定的（Floyd"><a href="#判断某个点在所有点中的位置是否是确定的（Floyd" class="headerlink" title="判断某个点在所有点中的位置是否是确定的（Floyd)"></a>判断某个点在所有点中的位置是否是确定的（Floyd)</h2><p><a href="https://vjudge.net/problem/POJ-3660" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">102</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;  <span class="comment">//奶牛的总数量， 比赛的数量；</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            dis[i][j]=<span class="number">0</span>;  <span class="comment">//“0”为为确立关系， “1”为关系已确立；</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        dis[a][b]=<span class="number">1</span>;  <span class="comment">//输入时不能加dis[b][a],关系就乱了。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(k!=i&amp;&amp;k!=j&amp;&amp;i!=j)</span><br><span class="line">                    <span class="keyword">if</span>(dis[i][k]&amp;&amp;dis[k][j]) dis[i][j]=<span class="number">1</span>;  <span class="comment">//不能加dis[j][i]=1,原因同上；</span></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i][j]||dis[j][i]) ++cnt;  <span class="comment">//这里用或，无论是击败还是被击败，关系都是确立的；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) ++ans;  <span class="comment">//只要一个点和其他所有点的关系确定了， 那这个点的位置就是确定的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>MPI Maelstrom POJ - 1502</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/MPI-Maelstrom-POJ---1502/</url>
    <content><![CDATA[<h2 id="找最短路里的最大权值"><a href="#找最短路里的最大权值" class="headerlink" title="找最短路里的最大权值"></a>找最短路里的最大权值</h2><p><a href="https://vjudge.net/problem/POJ-1502" target="_blank" rel="noopener">链接</a></p>
<p>C11里的stoi()函数过不了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">102</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> n; <span class="comment">//处理器的总数量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;x=a; w=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&gt;a.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dirkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y=eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[y.x]&gt;dis[x.x]+y.w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y.x]=dis[x.x]+y.w;</span><br><span class="line">                q.push(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'x'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                eg[i].push_back(node(j, atoi(ch)));</span><br><span class="line">                eg[j].push_back(node(i, atoi(ch)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) dis[i]=INF;</span><br><span class="line">    dirkstra();</span><br><span class="line">    <span class="keyword">int</span> maximum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maximum=<span class="built_in">max</span>(maximum, dis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maximum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Silver Cow Party POJ - 3268</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Silver-Cow-Party-POJ---3268/</url>
    <content><![CDATA[<h2 id="求所有点到某定点的最短路的最大值"><a href="#求所有点到某定点的最短路的最大值" class="headerlink" title="求所有点到某定点的最短路的最大值"></a>求所有点到某定点的最短路的最大值</h2><p><a href="https://vjudge.net/problem/POJ-3268" target="_blank" rel="noopener">链接</a></p>
<h4 id="Floyd-tle"><a href="#Floyd-tle" class="headerlink" title="Floyd(tle)"></a>Floyd(tle)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> pos[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,x;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j) pos[i][j]=INF; <span class="keyword">else</span> pos[i][j]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        pos[a][b]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">                <span class="keyword">if</span>(pos[i][j]&gt;pos[i][k]+pos[k][j])</span><br><span class="line">                    pos[i][j]=pos[i][k]+pos[k][j];</span><br><span class="line">    <span class="keyword">int</span> maximum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        maximum=<span class="built_in">max</span>(pos[i][x]+pos[x][i],maximum);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maximum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Dirkstra"><a href="#Dirkstra" class="headerlink" title="Dirkstra"></a>Dirkstra</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, d;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;x=a; d=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(d == a.d) <span class="keyword">return</span> x&lt;a.x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d&gt;a.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dirkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(st,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y=eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[st][y.x]&gt;dis[st][x.x]+y.d)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[st][y.x]=dis[st][x.x]+y.d;</span><br><span class="line">                q.push(node(y.x, dis[st][y.x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        eg[a].push_back(node(b,c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) <span class="keyword">if</span>(i!=j) dis[i][j]=INF; <span class="keyword">else</span> dis[i][j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) dirkstra(i);  <span class="comment">//把每个点都枚举一遍，求出任意两点间的最小距离</span></span><br><span class="line">    <span class="keyword">int</span> maximum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) maximum=<span class="built_in">max</span>(maximum, dis[x][i]+dis[i][x]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maximum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>expensive offer POJ - 1062</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/expensive-offer-POJ---1062/</url>
    <content><![CDATA[<h2 id="dirkstra"><a href="#dirkstra" class="headerlink" title="dirkstra()"></a>dirkstra()</h2><p><a href="https://vjudge.net/problem/POJ-1062" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> ban, total;</span><br><span class="line"><span class="keyword">int</span> status[maxn];</span><br><span class="line"><span class="keyword">int</span> price[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p1, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.second&gt;p2.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> to;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">&#125;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span><br><span class="line">&#123;</span><br><span class="line">	eg[++cnt].to=y;</span><br><span class="line">	eg[cnt].next=p[x];</span><br><span class="line">	eg[cnt].w=w;</span><br><span class="line">	p[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; , <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;, cmp&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=total; i++) dis[i]=INF;</span><br><span class="line">	dis[<span class="number">1</span>]=price[<span class="number">1</span>];</span><br><span class="line">	q.push(make_pair(<span class="number">1</span>, dis[<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.top().first;</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span>(visit[x]) <span class="keyword">continue</span>;</span><br><span class="line">		visit[x]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=p[x]; i; i=eg[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> y=eg[i].to;</span><br><span class="line">			<span class="keyword">if</span>(ban&amp;&amp;<span class="built_in">abs</span>(status[y]-status[<span class="number">1</span>])&gt;ban) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(dis[y]&gt;dis[x]-price[x]+eg[i].w+price[y])&#123;</span><br><span class="line">                dis[y]=dis[x]-price[x]+eg[i].w+price[y];</span><br><span class="line">                q.push(make_pair(y, dis[y]));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ban&gt;&gt;total; <span class="comment">//地位差， 物品总数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c;  <span class="comment">//单价， 地位， 可替代物品数</span></span><br><span class="line">    <span class="keyword">int</span> d,e;  <span class="comment">//替代物品的编号， 替代物品之后的优惠价</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        price[i]=a;</span><br><span class="line">        status[i]=b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=c; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d&gt;&gt;e;</span><br><span class="line">            _add(i,d,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dijkstra();</span><br><span class="line">    <span class="keyword">int</span> minimum=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=total; i++) &#123;</span><br><span class="line">        minimum=<span class="built_in">min</span>(minimum, dis[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;minimum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Till the Cows Come Home POJ - 2387</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/ill%20the%20Cows%20Come%20Home%20POJ%20-%202387/</url>
    <content><![CDATA[<h2 id="求从点1到N的最短路径"><a href="#求从点1到N的最短路径" class="headerlink" title="求从点1到N的最短路径"></a>求从点1到N的最短路径</h2><p><a href="https://vjudge.net/problem/POJ-2387#author=ght5160" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, d;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;x=a; d=b;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(d == a.d) <span class="keyword">return</span> x&lt;a.x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d&gt;a.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;eg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dirkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=pos;i++) dis[i]=INF;</span><br><span class="line">    dis[st]=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(node(st,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eg[x.x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node y=eg[x.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[y.x]&gt;x.d+y.d)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y.x]=x.d+y.d;</span><br><span class="line">                q.push(node(y.x, dis[y.x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;cnt&gt;&gt;pos;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(cnt--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        eg[a].push_back(node(b,c));</span><br><span class="line">        eg[b].push_back(node(a,c));</span><br><span class="line">    &#125;</span><br><span class="line">    dirkstra(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[pos];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Wormholes POJ - 3259</title>
    <url>/2020/07/16/%E6%9C%80%E7%9F%AD%E8%B7%AF/Wormholes-POJ---3259/</url>
    <content><![CDATA[<h2 id="判负权环"><a href="#判负权环" class="headerlink" title="判负权环"></a>判负权环</h2><p><a href="https://vjudge.net/problem/POJ-3259" target="_blank" rel="noopener">链接</a></p>
<p>run time error数组开大了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> fi, pa, wo;  <span class="comment">//filed、path、worm hole的个数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">&#125;eg[<span class="number">5500</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    eg[++cnt].to=y;</span><br><span class="line">    eg[cnt].next=p[x];</span><br><span class="line">    eg[cnt].len=len;</span><br><span class="line">    p[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.push(st);</span><br><span class="line">    num[st]=<span class="number">1</span>;</span><br><span class="line">    dis[st]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        visit[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=p[x]; i; i=eg[i].next)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> temp=eg[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[temp]&gt;dis[x]+eg[i].len)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[temp]=dis[x]+eg[i].len;</span><br><span class="line">                <span class="keyword">if</span>(!visit[temp])</span><br><span class="line">                &#123;</span><br><span class="line">                    visit[temp]=<span class="literal">true</span>;</span><br><span class="line">                    q.push(temp);                    </span><br><span class="line">                    <span class="keyword">if</span>(++num[temp]&gt;=fi) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;fi&gt;&gt;pa&gt;&gt;wo;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="keyword">while</span>(pa--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            _add(a,b,c);</span><br><span class="line">            _add(b,a,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(wo--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            _add(a,b,<span class="number">-1</span>*c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(spfa(<span class="number">1</span>))</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>最短路</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Pots(POJ 3414)</title>
    <url>/2020/07/23/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Pots(POJ-3414)/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>You are given two pots, having the volume of <strong>A</strong> and <strong>B</strong> liters respectively. The following operations can be performed:</p>
<ol>
<li>FILL(i)    fill the pot <strong>i</strong> (1 ≤ <strong>i</strong> ≤ 2) from the tap;</li>
<li>DROP(i)   empty the pot <strong>i</strong> to the drain;</li>
<li>POUR(i,j)  pour from pot <strong>i</strong> to pot <strong>j</strong>; after this operation either the pot <strong>j</strong> is full (and there may be some water left in the pot <strong>i</strong>), or the pot <strong>i</strong> is empty (and all its contents have been moved to the pot <strong>j</strong>).</li>
</ol>
<p>Write a program to find the shortest possible sequence of these operations that will yield exactly <strong>C</strong> liters of water in one of the pots.</p>
<blockquote>
<p>有A、B两个瓶子，可以进行上述三种操作，要求求出步数最少的操作过程使得其中一个瓶子最后装了C liters的水。</p>
</blockquote>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>On the first and only line are the numbers <strong>A</strong>, <strong>B</strong>, and <strong>C</strong>. These are all integers in the range from 1 to 100 and <strong>C</strong>≤max(<strong>A</strong>,<strong>B</strong>).</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>The first line of the output must contain the length of the sequence of operations <strong>K</strong>. The following <strong>K</strong> lines must each describe one operation. If there are several sequences of minimal length, output any one of them. If the desired result can’t be achieved, the first and only line of the file must contain the word ‘<strong>impossible</strong>’.</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5 4</span><br></pre></td></tr></table></figure>

<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">FILL(2)</span><br><span class="line">POUR(2,1)</span><br><span class="line">DROP(1)</span><br><span class="line">POUR(2,1)</span><br><span class="line">FILL(2)</span><br><span class="line">POUR(2,1)</span><br></pre></td></tr></table></figure>



<h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> ope[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sear[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,c;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pot</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> steps;</span><br><span class="line">    <span class="keyword">int</span> now;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pot&gt; q;</span><br><span class="line">    <span class="keyword">int</span> tol=<span class="number">0</span>;</span><br><span class="line">    pot ori, re;</span><br><span class="line">    ori.a=<span class="number">0</span>;</span><br><span class="line">    ori.b=<span class="number">0</span>;</span><br><span class="line">    ori.steps=<span class="number">0</span>;</span><br><span class="line">    ori.now = <span class="number">0</span>;</span><br><span class="line">    ope[ori.now] = <span class="string">' '</span>;</span><br><span class="line">    sear[ori.now] = <span class="number">-1</span>;</span><br><span class="line">    q.push(ori);</span><br><span class="line">    used[ori.a][ori.b]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ori=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(ori.a==c||ori.b==c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ori.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">int</span> t=ori.now;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=ori.steps; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                result[ori.steps-k]=ope[t];</span><br><span class="line">                t=sear[t];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=ori.steps; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> ch;</span><br><span class="line">                ch=result[k<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">'F'</span>) <span class="built_in">printf</span>(<span class="string">"FILL(1)\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'f'</span>) <span class="built_in">printf</span>(<span class="string">"FILL(2)\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'D'</span>) <span class="built_in">printf</span>(<span class="string">"DROP(1)\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'d'</span>) <span class="built_in">printf</span>(<span class="string">"DROP(2)\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'P'</span>) <span class="built_in">printf</span>(<span class="string">"POUR(2,1)\n"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'p'</span>) <span class="built_in">printf</span>(<span class="string">"POUR(1,2)\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;<span class="number">6</span>; p++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">                re.a = i;</span><br><span class="line">                re.b = ori.b;</span><br><span class="line">                <span class="keyword">if</span> (used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'F'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>) &#123;</span><br><span class="line">                re.a = ori.a;</span><br><span class="line">                re.b = j;</span><br><span class="line">                <span class="keyword">if</span> (used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'f'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">2</span>) &#123;</span><br><span class="line">                re.a = <span class="number">0</span>;</span><br><span class="line">                re.b = ori.b;</span><br><span class="line">                <span class="keyword">if</span> (used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'D'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">3</span>) &#123;</span><br><span class="line">                re.a = ori.a;</span><br><span class="line">                re.b = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'d'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ori.b&lt;=i-ori.a)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.a=ori.a+ori.b;</span><br><span class="line">                    re.b=<span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.a=i;</span><br><span class="line">                    re.b=ori.b-(i-ori.a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'P'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p == <span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ori.a&lt;=j-ori.b)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.b=ori.b+ori.a;</span><br><span class="line">                    re.a=<span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.b=j;</span><br><span class="line">                    re.a=ori.a-(j-ori.b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(used[re.a][re.b]) <span class="keyword">continue</span>;</span><br><span class="line">                used[re.a][re.b]=<span class="number">1</span>;</span><br><span class="line">                re.steps = ori.steps + <span class="number">1</span>;</span><br><span class="line">                re.now = ++tol;</span><br><span class="line">                ope[re.now] = <span class="string">'p'</span>;</span><br><span class="line">                sear[re.now] = ori.now;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;c))</span><br><span class="line">    &#123;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(used));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Oil Deposits(HDU 1241)</title>
    <url>/2020/07/23/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Oil-Deposits(HDU-1241)/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1241" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1241</a></p>
<h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either <code>*&#39;, representing the absence of oil, or</code>@’, representing an oil pocket.</p>
<blockquote>
<p>在一个油田图中，*代表该点无油，@代表该点有油，有油的点如果跟其他有油点四角或上下左右相通则认为他们属于一个油田，求这个油田图中一共有多少块油田？</p>
</blockquote>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">*</span><br><span class="line">3 5</span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line">1 8</span><br><span class="line">@@****@*</span><br><span class="line">5 5 </span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>



<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>



<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h1><p>实质上就是求最多有几条dfs路线把所有@点遍历</p>
<h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m&amp;&amp;pos[x][y]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos[x][y]) pos[x][y]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;<span class="number">8</span>; h++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> xx = x+dir[h][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> yy = y+dir[h][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">stop</span>(xx, yy)) dfs(xx, yy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">	&#123;</span><br><span class="line">	    getchar();</span><br><span class="line">		<span class="keyword">char</span> q;</span><br><span class="line">		<span class="keyword">if</span>(!n&amp;&amp;!m) <span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;q);</span><br><span class="line">				<span class="keyword">if</span>(q==<span class="string">'@'</span>) pos[i][j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(pos[i][j])&#123;</span><br><span class="line">					++sum;</span><br><span class="line">					dfs(i, j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Find The Multiple（POJ1426)</title>
    <url>/2020/07/22/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Find-The-Multiple%EF%BC%88POJ1426)/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/POJ-1426" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits. </p>
<p>  给一个正整数n,找到一个它的倍数m，要求m只由0和1构成，且位数不超过100位(转换成十进制后)。</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<pre><code>The input file may contain multiple test cases. Each line contains a value of n (1 &lt;= n &lt;= 200). A line containing a zero terminates the input. </code></pre></blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p> For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>2<br>6<br>19<br>0</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>10<br>100100100100100100<br>111111111111111111</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><h5 id="版本一（bfs-queue-会tle"><a href="#版本一（bfs-queue-会tle" class="headerlink" title="版本一（bfs+queue) 会tle:"></a>版本一（bfs+queue) 会tle:</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> now;</span><br><span class="line">        now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!(now%n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.push(now*<span class="number">10</span>);</span><br><span class="line">        q.push(now*<span class="number">10</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        bfs(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="版本二（bfs-递归）AC："><a href="#版本二（bfs-递归）AC：" class="headerlink" title="版本二（bfs+递归）AC："></a>版本二（bfs+递归）AC：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">short flag=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;<span class="number">19</span>||!flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(!(n%x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bfs(n*<span class="number">10</span>,t+<span class="number">1</span>);</span><br><span class="line">    bfs(n*<span class="number">10</span>+<span class="number">1</span>,t+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        bfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Find a way(HDU 2612)</title>
    <url>/2020/07/22/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Find-a-way(HDU-2612)/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/HDU-2612" target="_blank" rel="noopener">Question</a>:</h4><p>Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki.<br>Yifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest.<br>Now give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes.</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><p>The input contains multiple test cases.<br>Each test case include, first two integers n, m. (2&lt;=n,m&lt;=200).<br>Next n lines, each line included m character.<br>‘Y’ express yifenfei initial position.<br>‘M’   express Merceki initial position.<br>‘#’ forbid road;<br>‘.’ Road.<br>‘@’ KCF</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><p>For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet.</p>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><p>4 4<br>Y.#@<br>….<br>.#..<br>@..M<br>4 4<br>Y.#@<br>….<br>.#..<br>@#.M<br>5 5<br>Y..@.<br>.#…<br>.#…<br>@..M.<br>#…#</p>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><p>66<br>88<br>66</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>分别对M、Y两人进行bfs，开两个二维数组分别用来保存他们到图中所有点的最短时间，两次bfs之后遍历整个图，对于每个标记为@的点，计算他们两个到这个点的时间和，算出到其中一个@点的最短时间。</p>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> usedy[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> usedm[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> pos[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> timey[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> timem[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ROW, COLUMN;</span><br><span class="line"><span class="keyword">int</span> startyc, startyr, startmc, startmr;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> column;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;NODE&gt; q;</span><br><span class="line">    NODE node&#123;startyr, startyc,<span class="number">0</span>&#125;;</span><br><span class="line">    NODE re&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    q.push(node);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            re=node;</span><br><span class="line">            re.row+=dir[i][<span class="number">1</span>];</span><br><span class="line">            re.column+=dir[i][<span class="number">0</span>];</span><br><span class="line">            re.time++;</span><br><span class="line">            <span class="keyword">if</span>(usedy[re.row][re.column]||pos[re.row][re.column]==<span class="string">'#'</span>||re.row&lt;<span class="number">0</span>||re.row&gt;=ROW||re.column&lt;<span class="number">0</span>||re.column&gt;=COLUMN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                usedy[re.row][re.column]=<span class="literal">true</span>;</span><br><span class="line">                timey[re.row][re.column]=re.time;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node.row=startmr;</span><br><span class="line">    node.column=startmc;</span><br><span class="line">    node.time=<span class="number">0</span>;</span><br><span class="line">    q.push(node);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            re=node;</span><br><span class="line">            re.row+=dir[i][<span class="number">1</span>];</span><br><span class="line">            re.column+=dir[i][<span class="number">0</span>];</span><br><span class="line">            re.time++;</span><br><span class="line">            <span class="keyword">if</span>(usedm[re.row][re.column]||pos[re.row][re.column]==<span class="string">'#'</span>||re.row&lt;<span class="number">0</span>||re.row&gt;=ROW||re.column&lt;<span class="number">0</span>||re.column&gt;=COLUMN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                usedm[re.row][re.column]=<span class="literal">true</span>;</span><br><span class="line">                timem[re.row][re.column]=re.time;</span><br><span class="line">                q.push(re);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> least=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ROW; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;COLUMN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[i][j]==<span class="string">'@'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                least=<span class="built_in">min</span>(least, timem[i][j]+timey[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;least*<span class="number">11</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;ROW&gt;&gt;COLUMN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(usedm, <span class="number">0</span>, <span class="keyword">sizeof</span>(usedm));</span><br><span class="line">        <span class="built_in">memset</span>(usedy, <span class="number">0</span>, <span class="keyword">sizeof</span>(usedy));</span><br><span class="line">        <span class="built_in">memset</span>(timem, INF, <span class="keyword">sizeof</span>(timem));</span><br><span class="line">        <span class="built_in">memset</span>(timey, INF, <span class="keyword">sizeof</span>(timey));</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ROW; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;COLUMN; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">                pos[i][j]=ch;</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">'Y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    startyr=i;</span><br><span class="line">                    startyc=j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'M'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    startmr=i;</span><br><span class="line">                    startmc=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        usedm[startmr][startmc]=<span class="literal">true</span>;</span><br><span class="line">        usedm[startyr][startyc]=<span class="literal">true</span>;</span><br><span class="line">        bfs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Fire!（UVA 11624)</title>
    <url>/2020/07/22/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Fire!%EF%BC%88UVA-11624)/</url>
    <content><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/UVA-11624" target="_blank" rel="noopener">Question</a>:</h2><p>Joe works in a maze. Unfortunately, portions of the maze have caught on fire, and the owner of the maze neglected to create a fire escape plan. Help Joe escape the maze. Given Joe’s location in the maze and which squares of the maze are on fire, you must determine whether Joe can exit the maze before the fire reaches him, and how fast he can do it. Joe and the fire each move one square per minute, vertically or horizontally (not diagonally). The fire spreads all four directions from each square that is on fire. Joe may exit the maze from any square that borders the edge of the maze. Neither Joe nor the fire may enter a square that is occupied by a wall.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h2><p>The first line of input contains a single integer, the number of test cases to follow. The first line of each test case contains the two integers R and C, separated by spaces, with 1 ≤ R, C ≤ 1000. The following R lines of the test case each contain one row of the maze. Each of these lines contains exactly C characters, and each of these characters is one of: • #, a wall • ., a passable square • J, Joe’s initial position in the maze, which is a passable square • F, a square that is on fire There will be exactly one J in each test case.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h2><p>For each test case, output a single line containing ‘IMPOSSIBLE’ if Joe cannot exit the maze before the fire reaches him, or an integer giving the earliest time Joe can safely exit the maze, in minutes.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><p>2 </p>
<p>4 4 </p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>#JF# </p>
<p>#..#</p>
<p> #..# </p>
<p>3 3 </p>
<p>###</p>
<p> #J. </p>
<p>#.F</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><p>3</p>
<p>IMPOSSIBLE</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions:"></a>Solutions:</h2><p>比火和人谁跑的更快，先对Fire进行一次bfs再对Jack进行一次bfs比较时间就可以</p>
<h2 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0X3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> used[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> pos[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> Time[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ROW, COLUMN;</span><br><span class="line"><span class="keyword">int</span> startr,startc;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">int</span> column;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;NODE&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;NODE&gt;&amp; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stop</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> used[row][column] || pos[row][column] == <span class="string">'#'</span> || row &lt; <span class="number">0</span> || column &lt; <span class="number">0</span> || row &gt;= ROW || column &gt;= COLUMN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE node,re;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            re=node;</span><br><span class="line">            re.row+=dir[i][<span class="number">0</span>];</span><br><span class="line">            re.column+=dir[i][<span class="number">1</span>];</span><br><span class="line">            re.time++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">stop</span>(re.row,re.column)) <span class="keyword">continue</span>;</span><br><span class="line">            used[re.row][re.column]=<span class="literal">true</span>;</span><br><span class="line">            Time[re.row][re.column]=re.time;</span><br><span class="line">            q.push(re);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">    used[startr][startc]=<span class="literal">true</span>;</span><br><span class="line">    node.row=startr;</span><br><span class="line">    node.column=startc;</span><br><span class="line">    node.time=<span class="number">0</span>;</span><br><span class="line">    q.push(node);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            re=node;</span><br><span class="line">            re.row+=dir[i][<span class="number">0</span>];</span><br><span class="line">            re.column+=dir[i][<span class="number">1</span>];</span><br><span class="line">            re.time++;</span><br><span class="line">            <span class="keyword">if</span>(re.row&lt;<span class="number">0</span>||re.row&gt;=ROW||re.column&lt;<span class="number">0</span>||re.column&gt;=COLUMN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;re.time&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pos[re.row][re.column]==<span class="string">'#'</span>||used[re.row][re.column]||Time[re.row][re.column]&lt;=re.time)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            used[re.row][re.column]=<span class="literal">true</span>;</span><br><span class="line">            q.push(re);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="built_in">memset</span>(Time, INF, <span class="keyword">sizeof</span>(Time));</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;ROW&gt;&gt;COLUMN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ROW; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;COLUMN; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">                pos[i][j]=ch;</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">'F'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    NODE node&#123;i,j,<span class="number">0</span>&#125;;</span><br><span class="line">                    q.push(node);</span><br><span class="line">                    used[i][j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'J'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    startr=i;</span><br><span class="line">                    startc=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="built_in">clear</span>(q);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Prime Path（POJ3126)</title>
    <url>/2020/07/22/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Prime-Path%EF%BC%88POJ3126)/</url>
    <content><![CDATA[<h4 id="Question-https-vjudge-net-problem-POJ-3126"><a href="#Question-https-vjudge-net-problem-POJ-3126" class="headerlink" title="Question]( https://vjudge.net/problem/POJ-3126  ):"></a>Question]( <a href="https://vjudge.net/problem/POJ-3126" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-3126</a>  ):</h4><blockquote>
<p>  The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices.</p>
<p>  Now, the minister of finance, who had been eavesdropping, intervened.— No unnecessary expenditure, please! I happen to know that the price of a digit is one pound.— Hmm, in that case I need a computer program to minimize the cost. You don’t know some very cheap software gurus, do you?— In fact, I do. You see, there is this programming contest going on… Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.</p>
<blockquote>
<p>1033<br>1733<br>3733<br>3739<br>3779<br>8779<br>8179</p>
</blockquote>
<p>  The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step – a new 1 must be purchased.</p>
<p>  题意：所给的数字都是四位数，从第一个数变成第二个数，最少需要几次。变换规则：一次只能改变其中的一位数，且改变后的数字为素数，如1033到8179的变换规则：1033 -&gt;1733-&gt; 3733&gt;3739 -&gt;3779 &gt;8779 -&gt;8179,总共变换了6次，且变换过程中，每一位都是素数。</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<pre><code>One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros). </code></pre></blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p> One line for each case, either with a number stating the minimal cost or containing the word “Impossible”. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>3<br>1033 8179<br>1373 8017<br>1033 1033</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>6<br>7<br>0</p>
</blockquote>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>素数路问题，首先将1000~9999之间的所有素数打表，然后利用bfs看需要多少步才能将目标初始数字变成目标素数</p>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">step</span>[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> m,n,prime_num=<span class="number">0</span>;  <span class="comment">//prime_num代表1000~9999的素数总数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; empty;</span><br><span class="line">    swap(empty, q);   <span class="comment">//队列并没有.clear()方法，如果要用的话要自己定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(g&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i*i&lt;=g; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(g%i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">all_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1001</span>; i&lt;<span class="number">9999</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i)) prime[prime_num++]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> y)</span>  <span class="comment">//为了验证此次数字变换是否只变动了一位数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>],b[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=u%<span class="number">10</span>;b[i]=y%<span class="number">10</span>;</span><br><span class="line">        u/=<span class="number">10</span>;y/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]!=b[<span class="number">0</span>]&amp;&amp;a[<span class="number">1</span>]==b[<span class="number">1</span>]&amp;&amp;a[<span class="number">2</span>]==b[<span class="number">2</span>]&amp;&amp;a[<span class="number">3</span>]==b[<span class="number">3</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>]==b[<span class="number">0</span>]&amp;&amp;a[<span class="number">1</span>]!=b[<span class="number">1</span>]&amp;&amp;a[<span class="number">2</span>]==b[<span class="number">2</span>]&amp;&amp;a[<span class="number">3</span>]==b[<span class="number">3</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>]==b[<span class="number">0</span>]&amp;&amp;a[<span class="number">1</span>]==b[<span class="number">1</span>]&amp;&amp;a[<span class="number">2</span>]!=b[<span class="number">2</span>]&amp;&amp;a[<span class="number">3</span>]==b[<span class="number">3</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>]==b[<span class="number">0</span>]&amp;&amp;a[<span class="number">1</span>]==b[<span class="number">1</span>]&amp;&amp;a[<span class="number">2</span>]==b[<span class="number">2</span>]&amp;&amp;a[<span class="number">3</span>]!=b[<span class="number">3</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.push(m);</span><br><span class="line">    used[m]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now;</span><br><span class="line">        now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prime_num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[prime[i]]&amp;&amp;check(now, prime[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(prime[i]==n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">step</span>[now]+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(prime[i]);</span><br><span class="line">                used[prime[i]]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">step</span>[prime[i]]=<span class="built_in">step</span>[now]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    all_prime();</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">step</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">step</span>));  <span class="comment">//笑了，一开始我把这行的step误写成used一直RE，想了好久，结果突然看见这个小错，佛了</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(m==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">clear</span>(q);</span><br><span class="line">        bfs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>非常可乐（HDU 1495)</title>
    <url>/2020/07/22/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90%EF%BC%88HDU-1495)/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/HDU-1495" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S&lt;101）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出”NO”。</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<pre><code>三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以&quot;0 0 0&quot;结束。</code></pre></blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p> 如果能平分的话请输出最少要倒的次数，否则输出”NO”。</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>7 4 3<br>4 1 3<br>0 0 0</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>NO<br>3</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> A, B, C;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cups</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> steps;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Cups&gt; q;</span><br><span class="line">    Cups cup, re;</span><br><span class="line">    cup.a=A;</span><br><span class="line">    cup.b=<span class="number">0</span>;</span><br><span class="line">    cup.c=<span class="number">0</span>;</span><br><span class="line">    cup.steps=<span class="number">0</span>;</span><br><span class="line">    used[A][<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    q.push(cup);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cup=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.a&gt;=B-re.b)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.a=re.a-(B-re.b);</span><br><span class="line">                    re.b=B;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.b+=re.a;</span><br><span class="line">                    re.a=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.a&gt;=C-re.c)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.a=re.a-(C-re.c);</span><br><span class="line">                    re.c=C;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.c+=re.a;</span><br><span class="line">                    re.a=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.b&gt;=A-re.a)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.b-=A-re.a;</span><br><span class="line">                    re.a=A;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.a+=re.b;</span><br><span class="line">                    re.b=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.b&gt;=C-re.c)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.b=re.b-(C-re.c);</span><br><span class="line">                    re.c=C;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.c+=re.b;</span><br><span class="line">                    re.b=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.c&gt;=A-re.a)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.c-=A-re.a;</span><br><span class="line">                    re.a=A;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.a+=re.c;</span><br><span class="line">                    re.c=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                re=cup;</span><br><span class="line">                <span class="keyword">if</span>(re.c&gt;=B-re.b)</span><br><span class="line">                &#123;</span><br><span class="line">                    re.c=re.c-(B-re.b);</span><br><span class="line">                    re.b=B;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    re.b+=re.c;</span><br><span class="line">                    re.c=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used[re.a][re.b][re.c])</span><br><span class="line">                &#123;</span><br><span class="line">                    re.steps++;</span><br><span class="line">                    used[re.a][re.b][re.c]=<span class="literal">true</span>;</span><br><span class="line">                    q.push(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((re.a==re.b&amp;&amp;re.c==<span class="number">0</span>)||(re.a==re.c&amp;&amp;re.b==<span class="number">0</span>)||(re.b==re.c&amp;&amp;re.a==<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;re.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;C)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!A&amp;&amp;!B&amp;&amp;!C) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题(POJ3984)</title>
    <url>/2020/07/23/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98(POJ3984)/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>定义一个二维数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maze[5][5] &#x3D; &#123;</span><br><span class="line">	0, 1, 0, 0, 0,</span><br><span class="line">	0, 1, 0, 1, 0,</span><br><span class="line">	0, 0, 0, 0, 0,</span><br><span class="line">	0, 1, 1, 1, 0,</span><br><span class="line">	0, 0, 0, 1, 0,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>左上角到右下角的最短路径，格式如样例所示。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br></pre></td></tr></table></figure>

<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 0)</span><br><span class="line">(1, 0)</span><br><span class="line">(2, 0)</span><br><span class="line">(2, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(2, 3)</span><br><span class="line">(2, 4)</span><br><span class="line">(3, 4)</span><br><span class="line">(4, 4)</span><br></pre></td></tr></table></figure>



<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h1><p>和其它bfs不同的是，这道题需要保存每一步bfs的步骤，于是在struct中开两个数组，分别保存x和y方向的运动路线。</p>
<h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> move_x[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> move_y[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,<span class="built_in">step</span>;</span><br><span class="line">    <span class="keyword">int</span> posx[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> posy[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">&#125;now,next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">no_way</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;<span class="number">4</span>||y&gt;<span class="number">4</span>||<span class="built_in">map</span>[x][y])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; pq;</span><br><span class="line">    now.x=<span class="number">0</span>;</span><br><span class="line">    now.y=<span class="number">0</span>;</span><br><span class="line">    now.<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">    now.posx[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    now.posy[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>[now.x][now.y]=<span class="number">1</span>;</span><br><span class="line">    pq.push(now);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        now=pq.front();</span><br><span class="line">        pq.pop();</span><br><span class="line">        <span class="keyword">if</span>(now.x==<span class="number">4</span> &amp;&amp; now.y==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=now.<span class="built_in">step</span>; i++)&#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"(%d, %d)\n"</span>,now.posx[i],now.posy[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            next = now;</span><br><span class="line">            next.x=now.x+move_x[i];</span><br><span class="line">            next.y=now.y+move_y[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(no_way(next.x,next.y))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[next.x][next.y]==<span class="number">0</span>) next.<span class="built_in">step</span>=now.<span class="built_in">step</span>+<span class="number">1</span>;</span><br><span class="line">            next.posx[next.<span class="built_in">step</span>]=next.x;</span><br><span class="line">            next.posy[next.<span class="built_in">step</span>]=next.y;</span><br><span class="line">            <span class="built_in">map</span>[next.x][next.y]=<span class="number">1</span>;</span><br><span class="line">            pq.push(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Shuffle&#39;m Up(POJ 3087)</title>
    <url>/2020/07/23/%E6%A8%A1%E6%8B%9F/Shufflem-Up(POJ-3087)/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>A common pastime for poker players at a poker table is to shuffle stacks of chips. Shuffling chips is performed by starting with two stacks of poker chips, <strong>S1</strong> and <strong>S2</strong>, each stack containing <strong><em>C</em></strong> chips. Each stack may contain chips of several different colors.</p>
<p>The actual shuffle operation is performed by interleaving a chip from <strong>S1</strong> with a chip from <strong>S2</strong> as shown below for <strong><em>C</em></strong> = 5:</p>
<p><img src="http://poj.org/images/3087_1.png" alt="img"></p>
<p>The single resultant stack, <strong>S12</strong>, contains 2 * <strong><em>C</em></strong> chips. The bottommost chip of <strong>S12</strong> is the bottommost chip from <strong>S2</strong>. On top of that chip, is the bottommost chip from <strong>S1</strong>. The interleaving process continues taking the 2nd chip from the bottom of <strong>S2</strong> and placing that on <strong>S12</strong>, followed by the 2nd chip from the bottom of <strong>S1</strong> and so on until the topmost chip from <strong>S1</strong> is placed on top of <strong>S12</strong>.</p>
<p>After the shuffle operation, <strong>S12</strong> is split into 2 new stacks by taking the bottommost <strong><em>C</em></strong> chips from <strong>S12</strong> to form a new <strong>S1</strong> and the topmost <strong><em>C</em></strong> chips from <strong>S12</strong> to form a new <strong>S2</strong>. The shuffle operation may then be repeated to form a new <strong>S12</strong>.</p>
<p>For this problem, you will write a program to determine if a particular resultant stack <strong>S12</strong> can be formed by shuffling two stacks some number of times.</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>The first line of input contains a single integer <strong><em>N</em></strong>, (1 ≤ <strong><em>N</em></strong> ≤ 1000) which is the number of datasets that follow.Each dataset consists of four lines of input. The first line of a dataset specifies an integer <strong><em>C</em></strong>, (1 ≤ <strong><em>C</em></strong> ≤ 100) which is the number of chips in each initial stack (<strong>S1</strong> and <strong>S2</strong>). The second line of each dataset specifies the colors of each of the <strong><em>C</em></strong> chips in stack <strong>S1</strong>, starting with the bottommost chip. The third line of each dataset specifies the colors of each of the <strong><em>C</em></strong> chips in stack <strong>S2</strong> starting with the bottommost chip. Colors are expressed as a single uppercase letter (<strong>A</strong> through <strong>H</strong>). There are no blanks or separators between the chip colors. The fourth line of each dataset contains 2 * <strong><em>C</em></strong> uppercase letters (<strong>A</strong> through <strong>H</strong>), representing the colors of the desired result of the shuffling of <strong>S1</strong> and <strong>S2</strong> zero or more times. The bottommost chip’s color is specified first.</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>Output for each dataset consists of a single line that displays the dataset number (1 though <strong><em>N</em></strong>), a space, and an integer value which is the minimum number of shuffle operations required to get the desired resultant stack. If the desired result can not be reached using the input for the dataset, display the value negative 1 (<strong>−1</strong>) for the number of shuffle operations.</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">AHAH</span><br><span class="line">HAHA</span><br><span class="line">HHAAAAHH</span><br><span class="line">3</span><br><span class="line">CDE</span><br><span class="line">CDE</span><br><span class="line">EEDDCC</span><br></pre></td></tr></table></figure>

<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 -1</span><br></pre></td></tr></table></figure>



<h1 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//附两篇博客记录为什么一开始temp[0]=s1[0]不行的原因：</span></span><br><span class="line"><span class="comment">//https://ask.csdn.net/questions/374362</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/qq_42776429/article/details/82318384</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">bool</span>&gt; poker;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> times=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        times++;</span><br><span class="line">        <span class="built_in">string</span> s1,s2,s12;</span><br><span class="line">        <span class="keyword">int</span> C;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;C;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2&gt;&gt;s12;</span><br><span class="line">        s12[<span class="number">2</span>*C]=<span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> temp;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">height</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                temp+=s2[i];</span><br><span class="line">                temp+=s1[i];</span><br><span class="line">            &#125;</span><br><span class="line">            ++<span class="built_in">step</span>;</span><br><span class="line">            temp[<span class="number">2</span>*C]=<span class="string">'\0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(s12==temp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;times&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="built_in">step</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(poker[temp]&amp;&amp;s12!=temp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;times&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            poker[temp]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                s1[i]=temp[i];</span><br><span class="line">                s2[i]=temp[i+C];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        poker.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>transport layer</title>
    <url>/2020/07/20/computer%20networking/transport-layer/</url>
    <content><![CDATA[<h1 id="transport-layer在协议栈数据传输中起到的作用"><a href="#transport-layer在协议栈数据传输中起到的作用" class="headerlink" title="transport layer在协议栈数据传输中起到的作用"></a>transport layer在协议栈数据传输中起到的作用</h1><p>对于sender, 接受从application layer（应用层）传来的message。通常将一个message分成若干个chunks，给每一个chunk附加一个transport-layer header封装成segment传给端系统的network layer（网络层）。</p>
<p>Transport-layer protocol provides logical communication，是一种逻辑模型，不涉及物理传输，且提供的是不同hosts（主机）间的processes（进程）逻辑通信。同样作为logical communication，network-layer provides hosts（主机）间的逻辑通信，示意图如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(processe A)--&gt;|transport-layer|B(host A)</span><br><span class="line">B--&gt;|network-layer|C(...)</span><br><span class="line">C--&gt;|network-layer|D(host B)</span><br><span class="line">D--&gt;|transport-layer| E(processs B)</span><br></pre></td></tr></table></figure>



<h1 id="Multiplexing-and-Demultiplexing-多路复用和多路分解"><a href="#Multiplexing-and-Demultiplexing-多路复用和多路分解" class="headerlink" title="Multiplexing and Demultiplexing(多路复用和多路分解)"></a>Multiplexing and Demultiplexing(多路复用和多路分解)</h1><ul>
<li>Multiplexing: 对于sender，收集来自不同socket（套接字）的data chunk（数据块），给每个data chunk附加上header information成为segment并将segment传到network-layer。</li>
<li>Demultiplexing: 对于receiver，解析network layer传来的datagram中有关socket的信息，找到相应的socket将解析出来的segment传到该socket。（Each socket in the host could be assigned a port number, and when a segment arrives at the host, the transport layer examines the destination port number in the segment and directs the segment to the corresponding socket.)</li>
</ul>
<p>现在的高性能Web服务器一般不会一个socket对应一个process，而是只存在一个process，给每一个新连接对应的socket另外开一个线程（可以视为subprocess）</p>
<h1 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h1><p>UDP与TCP相比是一种提供服务更少，但是更快更轻量的运输层协议，它适用于具备以下这几种特点的应用：</p>
<ul>
<li><p>Finer application-level control over what data is sent, and when</p>
<p>UDP不保证数据传输的可靠性，但也因此获得了更高的传输速度，如果应用需要对数据传输有附加要求需要在应用层实现。</p>
</li>
<li><p>No connection establishment</p>
<p>当传输速度的优先级大于数据传输可靠性的时候，UDP就成为了application的首选运输层协议，因为UDP省去了建立连接的时间，在clientsided只需要创建一个socket而TCP需要在clienntside建立两个socket。不同的application出于需求考量采用不同的协议，DNS需要低延时，所以采取UDP，HTTP需要保证网页是完整的，所以采取TCP。Google Chrome Brower采用的是QUIC protocol，它在application-layer实现你了数据可靠性传输。</p>
<p>常见的application选择使用的运输层协议如下：</p>
<p><img src="https://uniim1.shutterfly.com/ng/services/mediarender/THISLIFE/024041608357/media/1672700453257415/small/1595211898/enhance" alt=""></p>
</li>
<li><p>No connection state</p>
<p>UDP不需要维持连接状态，因此可以支持更多的active clients</p>
</li>
<li><p>Small packet header overhead</p>
<p>UDP的segment有8bytes的header而TCP的segment有20bytes的header，因为UDP不提供reliable data transer和congestion control mechanism、error recovery等服务，所以header里的参数就比较少，比起TCP更加轻量。</p>
</li>
</ul>
<p>此外，虽然TCP提供的congestion control mechanism处于对整个网络状态的考虑尽量使所有application能均分流量，但限制了某些对于延时要求较高的real-time应用，这些应用可以利用UDP来绕过TCP的防拥堵机制，可是当UDP的丢包率也较高的时候同样会把TCP会话挤崩溃，最后得到结果是网络状态越来越糟糕。</p>
]]></content>
  </entry>
</search>
