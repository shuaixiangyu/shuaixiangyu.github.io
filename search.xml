<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020新剧推荐：</title>
    <url>/2020/06/20/2020%E6%96%B0%E5%89%A7%E6%8E%A8%E8%8D%90%EF%BC%9A/</url>
    <content><![CDATA[<h4 id="2020新剧推荐："><a href="#2020新剧推荐：" class="headerlink" title="2020新剧推荐："></a>2020新剧推荐：</h4><blockquote>
<p>杀死伊芙第三季</p>
<p>西部世界第三季</p>
<p>环形物语  <a href="http://mcar.co/thread-34373-1-1.html" target="_blank" rel="noopener">http://mcar.co/thread-34373-1-1.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hangover POJ（1003放卡片 二分）</title>
    <url>/2020/06/20/POJ/Hangover-POJ%EF%BC%881003%E6%94%BE%E5%8D%A1%E7%89%87-%E4%BA%8C%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1003" target="_blank" rel="noopener">http://poj.org/problem?id=1003</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> mp[<span class="number">300</span>];  <span class="comment">//这个预处理的数组必须定义全局，不然会runtimelimitexceeded</span></span><br><span class="line"><span class="comment">//样本输入</span></span><br><span class="line"><span class="comment">//1.00</span></span><br><span class="line"><span class="comment">//3.71</span></span><br><span class="line"><span class="comment">//0.04</span></span><br><span class="line"><span class="comment">//5.19</span></span><br><span class="line"><span class="comment">//0.00</span></span><br><span class="line"><span class="comment">//样本输出</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//3张卡</span></span><br><span class="line"><span class="comment">//61张卡</span></span><br><span class="line"><span class="comment">//1张卡</span></span><br><span class="line"><span class="comment">//273张卡</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">300</span>; ++i)</span><br><span class="line">        mp[i] = mp[i<span class="number">-1</span>] + <span class="number">1.0</span>/i ;   <span class="comment">//找到需要的卡牌数后要减一</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;val)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val - <span class="number">0</span> &lt; eps) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> n = lower_bound(mp, mp+<span class="number">300</span>, val) - mp;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d card(s)\n"</span>, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round</title>
    <url>/2020/06/20/cf/Codeforces-Round-#632-(Div.-2)/</url>
    <content><![CDATA[<p>contest link: <a href="https://codeforces.ml/blog/entry/75802" target="_blank" rel="noopener">https://codeforces.ml/blog/entry/75802</a></p>
<h4 id="1-颜色搭配（脑洞题）"><a href="#1-颜色搭配（脑洞题）" class="headerlink" title="1.颜色搭配（脑洞题）"></a>1.颜色搭配（脑洞题）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;row, &amp;col);</span><br><span class="line">        <span class="keyword">if</span>(row*col%<span class="number">2</span>)  <span class="comment">//奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    <span class="keyword">else</span> mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;<span class="number">1</span>) mp[i][col] = <span class="string">'B'</span>;</span><br><span class="line">                <span class="keyword">else</span> mp[i][col] = <span class="string">'W'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mp[<span class="number">1</span>][<span class="number">1</span>] = mp[<span class="number">1</span>][<span class="number">2</span>] = mp[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'B'</span>;</span><br><span class="line">            mp[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">'W'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= col; i++) &#123;</span><br><span class="line">                mp[<span class="number">1</span>][i] = <span class="string">'W'</span>;</span><br><span class="line">                mp[<span class="number">2</span>][i] = <span class="string">'B'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(row&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= row; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                        <span class="keyword">else</span> mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= row; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) mp[i][j] = <span class="string">'B'</span>;</span><br><span class="line">                        <span class="keyword">else</span> mp[i][j] = <span class="string">'W'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;           </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, mp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>题解：</li>
</ul>
<p>看到这个题解后，我，，，太巧妙了吧 ！果然一开始就被给出的样例给绕进去了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">black_row</span><span class="params">(m, <span class="string">'B'</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">result</span><span class="params">(n, black_row)</span></span>;</span><br><span class="line">    result[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'W'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; result[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>这道题也算是一道思考题，</p>
<p>我的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> minus = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> plus = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            val[i] = x;</span><br><span class="line">            <span class="keyword">if</span>(plus==<span class="number">-1</span> &amp;&amp; x &gt; <span class="number">0</span>) plus = i;</span><br><span class="line">            <span class="keyword">if</span>(minus==<span class="number">-1</span> &amp;&amp; x &lt; <span class="number">0</span>) minus = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minus == <span class="number">-1</span>) minus = inf;</span><br><span class="line">        <span class="keyword">if</span>(plus == <span class="number">-1</span>) plus = inf;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[i] &lt; x &amp;&amp; plus &gt;= i) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(val[i] &gt; x &amp;&amp; minus &gt;= i) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>题解（其实差不多啦）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    vector&lt;int&gt; a(n), b(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">good</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; b[i] &amp;&amp; !good[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i] &amp;&amp; !good[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">-1</span>) good[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>) good[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Eugen’s-Substract"><a href="#3-Eugen’s-Substract" class="headerlink" title="3. Eugen’s Substract"></a>3. Eugen’s Substract</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>dynamic programming（dp）</title>
    <url>/2020/06/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="1-最长公共子序列"><a href="#1-最长公共子序列" class="headerlink" title="1.最长公共子序列"></a>1.最长公共子序列</h2><h4 id="（1）【POJ-1458-Common-Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc-与-abfcab-都有-按从左往右的顺序-abcb。"><a href="#（1）【POJ-1458-Common-Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc-与-abfcab-都有-按从左往右的顺序-abcb。" class="headerlink" title="（1）【POJ 1458 Common Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc 与 abfcab 都有(按从左往右的顺序)abcb。"></a>（1）【<a href="https://vjudge.net/problem/POJ-1458" target="_blank" rel="noopener"><strong>POJ 1458</strong></a> Common Subsequence】求两个字符串从左往右含有最多公共元素的个数，如：abcfbc 与 abfcab 都有(按从左往右的顺序)abcb。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dp[i][j]表示在a[i]和b[j]之前共有的元素的个数</span><br></pre></td></tr></table></figure>

<p>状态转移方程：for循环两重遍历后：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="keyword">while</span>( ~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b) ) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">strlen</span>(a), y = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[x][y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-单调递增序列问题"><a href="#2-单调递增序列问题" class="headerlink" title="2.单调递增序列问题"></a>2.单调递增序列问题</h2><h4 id="1-求单调递增最长序列【POJ-2533-Longest-Ordered-Subssequence】"><a href="#1-求单调递增最长序列【POJ-2533-Longest-Ordered-Subssequence】" class="headerlink" title="(1)求单调递增最长序列【POJ 2533 Longest Ordered Subssequence】"></a>(1)求单调递增最长序列【<a href="https://vjudge.net/problem/POJ-2533" target="_blank" rel="noopener">POJ 2533</a> Longest Ordered Subssequence】</h4><p>如：1 7 3 5 9 4 8 这个序列的单调递增序列最长有4个元素， 其中一个序列是1 3 5 8</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1006</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(val[i] &gt; val[j]) dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn = <span class="built_in">max</span>(dp[i], maxn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-求单调递增最长序列【HDU-1087-Super-Jumping】"><a href="#2-求单调递增最长序列【HDU-1087-Super-Jumping】" class="headerlink" title="(2)求单调递增最长序列【HDU 1087 Super Jumping】"></a>(2)求单调递增最长序列【<a href="https://vjudge.net/problem/HDU-1087" target="_blank" rel="noopener">HDU 1087</a> Super Jumping】</h4><p>求单调递增且所有元素之和最大的子序列，答案要求输出最大和，该子序列的开头和结尾元素必须是父序列的最小值和最大值</p>
<p>如：1 3 2 输出 4</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + val[i]);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">int</span> maxn = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = val[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[i] &gt; val[j]) dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + val[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            maxn = <span class="built_in">max</span>(dp[i], maxn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-求单调递增最长序列【POJ-3616-Milking-Time】"><a href="#3-求单调递增最长序列【POJ-3616-Milking-Time】" class="headerlink" title="(3)求单调递增最长序列【POJ 3616 Milking Time】"></a>(3)求单调递增最长序列【<a href="https://vjudge.net/problem/POJ-3616" target="_blank" rel="noopener">POJ 3616</a> Milking Time】</h4><p>类似于求单调递增最长子序列的问题，该题中下一次挤奶的开始时间必须大于等于上一次挤奶的结束时间+r，求出最大的挤奶量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FJ</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> st;</span><br><span class="line">    <span class="keyword">int</span> ed;</span><br><span class="line">    <span class="keyword">int</span> liq;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> FJ&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed != a.ed) <span class="keyword">return</span> ed &lt; a.ed;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> st &gt; a.st;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;fj[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, r;  <span class="comment">//奶牛产奶的总时长，FJ的可挤奶间歇数，奶牛每次挤奶后的休息时间</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;fj[i].st, &amp;fj[i].ed, &amp;fj[i].liq);</span><br><span class="line">    sort(fj, fj + m);</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i] = fj[i].liq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fj[j].ed + r &lt;= fj[i].st) dp[i] = <span class="built_in">max</span>(dp[i], fj[i].liq + dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（4）求构造一个单调递增-减序列的最小代价【POJ-3666-Making-the-Grade】"><a href="#（4）求构造一个单调递增-减序列的最小代价【POJ-3666-Making-the-Grade】" class="headerlink" title="（4）求构造一个单调递增/减序列的最小代价【POJ 3666 Making the Grade】"></a>（4）求构造一个单调递增/减序列的最小代价【<a href="https://vjudge.net/problem/POJ-3666" target="_blank" rel="noopener">POJ 3666</a> Making the Grade】</h4><p>类型：dp+离散化</p>
<p>首先这道题给出的数据范围到亿，是非常大的，所以我们不能直接进行遍历，需要对其进行数据离散化处理，而由题意易知每个单调递增序列的最大值一定是序列中的某个值，这样就可以对数据进行离散化处理，不是序列中的数就可以不对其进行遍历。构造单调递增/减序列的最小代价是等价的，二者互为逆向，所以这道题只需要写出一种情况就可以。</p>
<ul>
<li><p>先考虑构造一个二维数组dp的情况：a[n-1]储存的是原始数据的数组，b[n-1]是对a[n-1]进行从小到大排序之后的数组，dp[i][j]表示序列前i个数当最大值为b[j]时的数组，那么就可以得到状态转移方程：dp[i][j] = abs(a[i] - b[j]) + dp[i-1][k]  (k &lt;= j)</p>
<p>用代码阐释：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ll solveup</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[<span class="number">0</span>][i] = <span class="built_in">abs</span>(a[<span class="number">0</span>]-b[i]);</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            dp[i][j] = <span class="built_in">abs</span>(a[i]-b[j]) + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[n<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[n<span class="number">-1</span>][i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于二维数组占用内存太大，下面再考虑构造一维滚动数组的情况：a,b数组如上所述，建立一个dp[n-1]的数组，表示当前轮次（序列为前多少个数）的dp[j]是当序列里最大的数为b[j]时所付出的最小代价。那么现在得到的状态转移方程为：dp[j] = dp[k] + abs(a[i]-b[j])  (k &lt;= j)</p>
<p>用具体代码阐释：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solveup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i] = <span class="built_in">abs</span>(a[<span class="number">0</span>]-b[i]);</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[j]);</span><br><span class="line">            dp[j] = v + <span class="built_in">abs</span>(a[i]-b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2020</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line">ll dp[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solveup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(b, b+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i] = <span class="built_in">abs</span>(a[<span class="number">0</span>] - b[i]);</span><br><span class="line">    <span class="keyword">register</span> ll v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = <span class="built_in">min</span>(v, dp[j]);</span><br><span class="line">            dp[j] = v + <span class="built_in">abs</span>(a[i] - b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v = <span class="built_in">min</span>(v, dp[i]);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        a[i] = b[i] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solveup());</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h2 id="3-区间dp"><a href="#3-区间dp" class="headerlink" title="3.区间dp"></a>3.区间dp</h2><p>区间DP，顾名思义是在区间上DP，它的主要思想就是先在小区间进行DP得到最优解，然后再利用小区间的最优解合并求大区间的最优解。</p>
<h4 id="1-【POJ-3186-Treats-for-the-Cows】"><a href="#1-【POJ-3186-Treats-for-the-Cows】" class="headerlink" title="(1)【POJ 3186 Treats for the Cows】"></a>(1)【<a href="https://vjudge.net/problem/POJ-3186" target="_blank" rel="noopener">POJ 3186</a> Treats for the Cows】</h4><p>给出的一系列的数字，可以看成一个双向队列，每次只能从队首或者队尾出队，第n个出队就拿这个数乘以n，最后将和加起来，求最大和</p>
<p>状态转移方程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i+<span class="number">1</span>][j]+a[i]*(n-len), dp[i][j<span class="number">-1</span>]+a[j]*(n-len));</span><br></pre></td></tr></table></figure>

<p>完整代码：(先枚举区间长度，再枚举起点，从而确定终点)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> val[<span class="number">2020</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2020</span>][<span class="number">2020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line">        dp[i][i] = val[i] * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; ++len) <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;<span class="comment">//枚举起点</span></span><br><span class="line">            <span class="keyword">int</span> j = i + len; <span class="comment">//j为枚举终点</span></span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j<span class="number">-1</span>] + val[j] * (n - len), dp[i+<span class="number">1</span>][j] + val[i] * (n - len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-记忆化搜索-dp"><a href="#4-记忆化搜索-dp" class="headerlink" title="4.记忆化搜索+dp"></a>4.记忆化搜索+dp</h2><p>在dfs搜索的时候加入dp进行节点记忆优化，以防超时</p>
<h4 id="（1）【HDU-1078-Fatmouse-and-Cheese"><a href="#（1）【HDU-1078-Fatmouse-and-Cheese" class="headerlink" title="（1）【HDU 1078 Fatmouse and Cheese]"></a>（1）【<a href="https://vjudge.net/problem/HDU-1078" target="_blank" rel="noopener">HDU 1078</a> Fatmouse and Cheese]</h4><p>记忆化搜索，下一步只能走到比上一步点数更大的点，每一步只能水平或者垂直走，走的步数有限制，为k， 给出一个大小为nxn的点数图</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1002</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[x][y]) <span class="keyword">return</span> dp[x][y];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = x + j * dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y1 = y + j * dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x1 &lt; <span class="number">0</span> || x1 &gt;= n || y1 &lt; <span class="number">0</span> || y1 &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[x1][y1] &gt; mp[x][y]) sum = <span class="built_in">max</span>(sum, dfs(x1, y1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x][y] = sum + mp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mp[i][j]);</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">0</span>,<span class="number">0</span>));   </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-最大对称子图"><a href="#5-最大对称子图" class="headerlink" title="5.最大对称子图"></a>5.最大对称子图</h2><ul>
<li><p>给你一个n*n的字符矩阵，从中选出一个最大的子矩阵（m*m）满足关于斜对角线（左下角到右上角）对称，求出这个矩阵的大小m；</p>
</li>
<li><p>我们可以用dp[i][j]表示当前位置到右上角这个子矩阵所能表示对称的矩阵最大值；</p>
</li>
</ul>
<h4 id="1-HDU-2859-Phalanx"><a href="#1-HDU-2859-Phalanx" class="headerlink" title="(1) [HDU 2859 Phalanx]"></a>(1) [<a href="https://vjudge.net/problem/HDU-2859" target="_blank" rel="noopener">HDU 2859</a> Phalanx]</h4><p><img src="https://images2015.cnblogs.com/blog/714429/201511/714429-20151104154045461-1769975329.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">状态转移方程：dp[i][j] = t &gt; dp[i<span class="number">-1</span>][j+<span class="number">1</span>] ? dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">1</span> : t;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1006</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;        </span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]);</span><br><span class="line">        <span class="keyword">int</span> maximum = <span class="number">1</span>;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!i) &#123;dp[i][j] = <span class="number">1</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">int</span> x = j, y = i;</span><br><span class="line">                <span class="keyword">while</span>(x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; mp[i][x] == mp[y][j])</span><br><span class="line">                &#123;++x; --y;&#125;</span><br><span class="line">                <span class="keyword">int</span> t = x - j; </span><br><span class="line">                dp[i][j] = t &gt; dp[i<span class="number">-1</span>][j+<span class="number">1</span>] ? dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">1</span> : t;  <span class="comment">//状态转移方程</span></span><br><span class="line">                maximum = <span class="built_in">max</span>(maximum, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maximum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dp[i][j]在markdown语言想敲出来要在两个方括号中间加一个转义符&#39;\‘, 才能打出来：][</li>
</ul>
]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ/I Think I Need a Houseboat（1005）</title>
    <url>/2020/06/20/POJ/I%20Think%20I%20Need%20a%20Houseboat%EF%BC%881005%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#define eps 1e-8</span><br><span class="line">#define pi 3.1415926535</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    double x, y;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123;</span><br><span class="line">        scanf(&quot;%lf %lf&quot;, &amp;x, &amp;y);</span><br><span class="line">        double area &#x3D; pi * (x*x+y*y) &#x2F; 2;</span><br><span class="line">        int years &#x3D; int(area &#x2F; 50) + 1;</span><br><span class="line">        printf(&quot;Property %d: This property will begin eroding in year %d.\n&quot;, i, years);</span><br><span class="line">        if(i &#x3D;&#x3D; n) printf(&quot;END OF OUTPUT.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>光骓者的荣耀（前缀和+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E5%85%89%E9%AA%93%E8%80%85%E7%9A%84%E8%8D%A3%E8%80%80%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/04/12/GqLo38.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*测试数据</span><br><span class="line">input:</span><br><span class="line">3 4 2</span><br><span class="line">1 2 3 1</span><br><span class="line">-1 9 0 2</span><br><span class="line">2 0 1 1</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">1 2</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn &#x3D; 1010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">int sum[maxn][maxn];</span><br><span class="line">pair&lt;int, int&gt; good;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m, s;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    s-&#x3D;1;</span><br><span class="line">    good.first &#x3D; 1;</span><br><span class="line">    good.second &#x3D; 1;</span><br><span class="line">    memset(sum, 0, sizeof(sum));</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        for(int j &#x3D; 1; j&lt;&#x3D; m; j++) &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] +&#x3D; sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    int maximum &#x3D; -inf;</span><br><span class="line">    for(int i &#x3D; 1; i + s&lt;&#x3D; n; ++i)</span><br><span class="line">        for(int j &#x3D; 1; j + s&lt;&#x3D; m; ++j) &#123;</span><br><span class="line">            int p &#x3D; i + s, q &#x3D; j + s;</span><br><span class="line">            if(p &lt;&#x3D; n &amp;&amp; q &lt;&#x3D; m) &#123;</span><br><span class="line">                int temp &#x3D; sum[p][q]-sum[p][j-1]-sum[i-1][q]+sum[i-1][j-1];</span><br><span class="line">                if(maximum &lt; temp) &#123;</span><br><span class="line">                    good.first &#x3D; i;</span><br><span class="line">                    good.second &#x3D; j;</span><br><span class="line">                    maximum &#x3D; temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;%d %d\n&quot;, good.first, good.second);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;          </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.luogu.com.cn/problem/P5638" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P5638</a></p>
]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>Max Sum Plus Plus（动态规划）</title>
    <url>/2020/06/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/Max-Sum-Plus-Plus%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
    <content><![CDATA[<h4 id="Max-Sum-Plus-Plus【HDU-1024】"><a href="#Max-Sum-Plus-Plus【HDU-1024】" class="headerlink" title="Max Sum Plus Plus【HDU 1024】"></a>Max Sum Plus Plus【HDU 1024】</h4><p>题意：给出长度为n的一个序列，求将其分成m组的时候，所有组的数的和最大是多少？</p>
<p>设二维数组dp[i][j]代表将前j个数分成i组时得到的和的最大值，那么可以得到状态转移方程：</p>
<p>​        dp[i][j] = max(dp[i][j-1], dp[i-1][k]) + num[j]</p>
<p>其中i-1&lt;=k, k&lt;=j-1</p>
<p>可以看到，每一轮的dp只与上一轮的状态有关，那我们就可以建立一个滚动数组，只记录上一轮dp的结果，从而使得二维数组变为一维数组，减少了一个维度，大大节省了空间。那么这样优化之后得到的状态转移方程为：</p>
<p>​        dp[j] = max(dp[j-1], pre[j-1]) + num[j]</p>
<p>其中dp[j-1]是通过本轮dp得到的，所以代表的是前j-1个数分成i组的最大值，而pre[j-1]是上一轮dp存储的结果，所以代表的是前j-1个数分成i-1组的最大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a,x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n)!=EOF) &#123;</span><br><span class="line">        MEM(pre, <span class="number">0</span>); MEM(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">        <span class="comment">//状态转移方程：dp[j]=max(dp[j-1], pre[j-1])+num[j]; pre是上一个状态</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;  <span class="comment">//分成1、2...m组依次dp</span></span><br><span class="line">            temp = -inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;  <span class="comment">//更新每次dp的dp[j-1]和pre[j-1]的值</span></span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j<span class="number">-1</span>], pre[j<span class="number">-1</span>])+num[j]; <span class="comment">//分成i组时使用的pre[]的值还是i-1那轮保存的，</span></span><br><span class="line">                <span class="comment">//所以pre[j-1]是前j-1个数字分成i-1组时最大的和</span></span><br><span class="line">                pre[j<span class="number">-1</span>]=temp;  <span class="comment">//这轮给pre[]赋的值留到下轮用，所以pre[]记的是被分成[i-1]组时的最大和</span></span><br><span class="line">                temp=<span class="built_in">max</span>(temp,dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>地毯（前缀和与差分）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E5%9C%B0%E6%AF%AF%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">2 2 3 3</span></span><br><span class="line"><span class="comment">3 3 5 5</span></span><br><span class="line"><span class="comment">1 2 1 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">0 1 1 1 0</span></span><br><span class="line"><span class="comment">0 1 1 0 0</span></span><br><span class="line"><span class="comment">0 1 2 1 1</span></span><br><span class="line"><span class="comment">0 0 1 1 1</span></span><br><span class="line"><span class="comment">0 0 1 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">int</span> x, y, a, b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= a; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i][y]++;</span><br><span class="line">            sum[i][b+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//val[i][j] = mp[i][j]+sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            sum[i][j] += sum[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, sum[i][j]); <span class="comment">//这里注意要输出一个空格</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>487-3279 POJ（1002电话号码，字符串转整数）</title>
    <url>/2020/06/20/POJ/487-3279-POJ%EF%BC%881002%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1002" target="_blank" rel="noopener">http://poj.org/problem?id=1002</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, num[MAX]=&#123;<span class="number">0</span>&#125;, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//A, B, and C map to 2</span></span><br><span class="line"><span class="comment">//D, E, and F map to 3</span></span><br><span class="line"><span class="comment">//G, H, and I map to 4</span></span><br><span class="line"><span class="comment">//J, K, and L map to 5</span></span><br><span class="line"><span class="comment">//M, N, and O map to 6</span></span><br><span class="line"><span class="comment">//P, R, and S map to 7</span></span><br><span class="line"><span class="comment">//T, U, and V map to 8</span></span><br><span class="line"><span class="comment">//W, X, and Y map to 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp[<span class="number">65</span>]=mp[<span class="number">66</span>]=mp[<span class="number">67</span>]=<span class="number">2</span>;</span><br><span class="line">    mp[<span class="number">68</span>]=mp[<span class="number">69</span>]=mp[<span class="number">70</span>]=<span class="number">3</span>;</span><br><span class="line">    mp[<span class="number">71</span>]=mp[<span class="number">72</span>]=mp[<span class="number">73</span>]=<span class="number">4</span>;</span><br><span class="line">    mp[<span class="number">74</span>]=mp[<span class="number">75</span>]=mp[<span class="number">76</span>]=<span class="number">5</span>;</span><br><span class="line">    mp[<span class="number">77</span>]=mp[<span class="number">78</span>]=mp[<span class="number">79</span>]=<span class="number">6</span>;</span><br><span class="line">    mp[<span class="number">80</span>]=mp[<span class="number">82</span>]=mp[<span class="number">83</span>]=<span class="number">7</span>;</span><br><span class="line">    mp[<span class="number">84</span>]=mp[<span class="number">85</span>]=mp[<span class="number">86</span>]=<span class="number">8</span>;</span><br><span class="line">    mp[<span class="number">87</span>]=mp[<span class="number">88</span>]=mp[<span class="number">89</span>]=<span class="number">9</span>;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] &gt;= <span class="number">65</span>) &#123;sum*=<span class="number">10</span>; sum+=mp[str[i]];&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] &gt;= <span class="number">48</span>) &#123;sum*=<span class="number">10</span>; sum+=(str[i]<span class="number">-48</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[cnt++]=sum;</span><br><span class="line">        str.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    sort(num, num+cnt);</span><br><span class="line">    <span class="keyword">int</span> Noduplicates = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> iter = <span class="number">0</span>, icount = <span class="number">1</span>; iter &lt; cnt - <span class="number">1</span> ; iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        icount = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(num[iter] == num[iter + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            iter++;</span><br><span class="line">            icount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(icount &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Noduplicates = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%03d-%04d %d\n"</span>,num[iter] / <span class="number">10000</span> ,num[iter] % <span class="number">10000</span> ,icount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Noduplicates == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No duplicates."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子段和（前缀和）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/728/1586660536x2073513012.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">2 -4 3 -1 2 -4 3</span></span><br><span class="line"><span class="comment">output:4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxn = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum &gt; <span class="number">0</span> ? sum : <span class="number">0</span>; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        sum += x;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, sum);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>最大加权矩形（二维前缀和+奇技淫巧）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%9C%80%E5%A4%A7%E5%8A%A0%E6%9D%83%E7%9F%A9%E5%BD%A2%EF%BC%88%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C+%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%EF%BC%89/</url>
    <content><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><img src="http://chuantu.xyz/t6/728/1586601125x1700468773.jpg" alt=""></p>
<h4 id="解题报告："><a href="#解题报告：" class="headerlink" title="解题报告："></a>解题报告：</h4><p>这道题可以说就是一道二维前缀和的板子题，值得一提的是有种奇技淫巧、、</p>
<p>对比一下，我的：</p>
<p><img src="http://chuantu.xyz/t6/728/1586601667x2099719707.jpg" alt=""></p>
<p>奇技淫巧式：</p>
<p><img src="http://chuantu.xyz/t6/728/1586601580x2099719707.jpg" alt=""></p>
<p>由此可见奇技淫巧是多么省时间</p>
<h5 id="my-二维前缀和的做法："><a href="#my-二维前缀和的做法：" class="headerlink" title="my 二维前缀和的做法："></a>my 二维前缀和的做法：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试样例：</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">0 -2 -7 0</span></span><br><span class="line"><span class="comment"> 9 2 -6 2</span></span><br><span class="line"><span class="comment">-4 1 -4  1 </span></span><br><span class="line"><span class="comment">-1 8  0 -2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">126</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)求二维数组前缀和：sum[i][j] = </span></span><br><span class="line"><span class="comment">//sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];</span></span><br><span class="line"><span class="comment">//(2)用前缀数组分别以(x1,y1)(x2,y2)为顶点的矩形的和：</span></span><br><span class="line"><span class="comment">//sum[x2][y2] - sum[x2][y1-1] - sum[x1-1][y2] + sum[x1-1][y1-1];</span></span><br><span class="line"><span class="comment">//(3)差分数组只有当需要对原数组的数据进行更改的时候才会用到</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] += sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> maxn = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="comment">//以(i,j)为左上顶点，(p,q)为右下顶点枚举</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = i; p &lt;= n; ++p)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q = j; q &lt;= n; ++q) &#123;</span><br><span class="line">                    <span class="comment">//temp是以(i,j)为左上顶点，(p,q)为右下顶点的矩形大小</span></span><br><span class="line">                    temp = sum[p][q]-sum[i<span class="number">-1</span>][q]-sum[p][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                    maxn = <span class="built_in">max</span>(maxn, temp);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxn);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="奇技淫巧式做法："><a href="#奇技淫巧式做法：" class="headerlink" title="奇技淫巧式做法："></a>奇技淫巧式做法：</h4><blockquote>
<p>该题算是P1115 最大子段和的一个升级版，其实思想差不多，都是DP，只不过该题需要先进行一个矩阵压缩，即二维变一维。</p>
<p><strong>矩阵压缩：</strong></p>
<p>假设有一个矩阵：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>如何对它进行压缩呢，其实不难，这边我做一个类比，如果我们把一行看做一个数，这里看做三个数a,b,c,那么将这三个相邻数的进行不同的组合，将这个新的组合视为一个新的数，这就是进行压缩处理，例如a,b,c可以组合为{[a],[ab],[abc],[b],[bc],[c]}，而矩阵压缩也类似。</p>
<p>先设置一个变量max用于保存压缩后的一维数组的最大子序列和。</p>
<p>第一次我们取第一行：</p>
<p>-5 6 4</p>
<p>则其最大子序列和为10，max=10。</p>
<p>第二次取第一二行：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>注意现在开始是矩阵压缩的精髓，我们将每一列的数进行相加，将多行变为一行。</p>
<p>第一列：-5+1=-4</p>
<p>第二列：6+(-2)=4</p>
<p>第三列：4+6=10</p>
<p>所以压缩后的一维数组为：</p>
<p>-4 4 10</p>
<p>则其最大子序列和为14，max=14。</p>
<p>第三次取第一二三行：</p>
<p>-5 6 4</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>对每一列进行压缩：</p>
<p>第一列：-5+1+2=-2</p>
<p>第二列：6+(-2)+1=5</p>
<p>第三列：4+6+(-3)=7</p>
<p>所以压缩后的一维数组为：</p>
<p>-2 5 7</p>
<p>则其最大子序列和为12，max=14。</p>
<p>第四次取第二行：</p>
<p>1 -2 6</p>
<p>则其最大子序列和为6，max=14。</p>
<p>第五次取第二三行：</p>
<p>1 -2 6</p>
<p>2 1 -3</p>
<p>对每一列进行压缩：</p>
<p>第一列：1+2=3</p>
<p>第二列：-2+1=-1</p>
<p>第三列：6+(-3)=3</p>
<p>所以压缩后的一维数组为：</p>
<p>3 -1 3</p>
<p>则其最大子序列和为5，max=14。</p>
<p>第六次取第三行：</p>
<p>2 1 -3</p>
<p>则其最大子序列和为3，max=14。</p>
<p>最后求得这个矩阵最大的子矩阵和为14</p>
<p>也就是第一二行的三四列</p>
<p>6 4</p>
<p>-2 6</p>
</blockquote>
<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> infinitesimal  -2100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> lli;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Created with IntelliJ Clion.</span></span><br><span class="line"><span class="comment"> *  @author  wanyu</span></span><br><span class="line"><span class="comment"> *  @Date: 2018-04-24</span></span><br><span class="line"><span class="comment"> *  @Time: 08:43</span></span><br><span class="line"><span class="comment"> *  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(t, x) memset(t,x,sizeof(t))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(a, b, c) for(int a=b;a&lt;=c;a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop2(a, b, c) for(int a=b;a&gt;=c;a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop3(a, b, c) for(int a=b;a&lt;c;a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop4(a, b, c) for(int a=b;a&gt;c;a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 150</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 20</span></span><br><span class="line"><span class="keyword">int</span> n, m, t;</span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans = infinitesimal;</span><br><span class="line"><span class="keyword">int</span> temp[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Arrsum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mset(dp, <span class="number">0</span>);</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], dp[i - <span class="number">1</span>] + temp[i]);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        mset(temp, <span class="number">0</span>);</span><br><span class="line">        loop(j, i, n) &#123;</span><br><span class="line">            loop(k, <span class="number">1</span>, n) &#123;</span><br><span class="line">                temp[k] += matrix[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            Arrsum();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    loop(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        loop(j, <span class="number">1</span>, n) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MatrixSum();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>海底高铁（前缀和+差分+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%B5%B7%E5%BA%95%E9%AB%98%E9%93%81%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E5%B7%AE%E5%88%86+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/728/1586660820x2073513012.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试样例</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">9 10</span></span><br><span class="line"><span class="comment">3 1 4 1 5 9 2 6 5 3</span></span><br><span class="line"><span class="comment">200 100 50</span></span><br><span class="line"><span class="comment">300 299 100</span></span><br><span class="line"><span class="comment">500 200 500</span></span><br><span class="line"><span class="comment">345 234 123</span></span><br><span class="line"><span class="comment">100 50 100</span></span><br><span class="line"><span class="comment">600 100 1</span></span><br><span class="line"><span class="comment">450 400 80</span></span><br><span class="line"><span class="comment">2 1 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">6394</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dif[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Way</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> paper;</span><br><span class="line">    <span class="keyword">int</span> discount;</span><br><span class="line">    <span class="keyword">int</span> card;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dif, <span class="number">0</span>, <span class="keyword">sizeof</span>(dif));</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> city_num, pass_num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; city_num &gt;&gt; pass_num;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pass</span><span class="params">(pass_num)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;struct Way&gt; <span class="title">way</span><span class="params">(city_num)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pass_num; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pass[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= city_num - <span class="number">1</span>; ++i) </span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; way[i].paper &gt;&gt; way[i].discount &gt;&gt; way[i].card;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pass_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> st = pass[i];</span><br><span class="line">        <span class="keyword">int</span> ed = pass[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(st &gt; ed) swap(st, ed);</span><br><span class="line">        ++dif[st];</span><br><span class="line">        --dif[ed];  <span class="comment">//对每一段路的经过次数的差分数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= city_num - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        dif[i] += dif[i<span class="number">-1</span>];        </span><br><span class="line">        ll meth1 = way[i].paper * dif[i];</span><br><span class="line">        ll meth2 = way[i].card + way[i].discount * dif[i];</span><br><span class="line">        sum += <span class="built_in">min</span>(meth1, meth2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>Courses(二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Courses(%E6%B1%82%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E6%95%B0)/</url>
    <content><![CDATA[<p>点击“阅读全文”👇<a id="more"></a></p>
<h4 id="Courses【HDU-1083】"><a href="#Courses【HDU-1083】" class="headerlink" title="Courses【HDU 1083】"></a>Courses【HDU 1083】</h4><p>给定学生数和课程数，以及每门课程和学生的关系，验证最大匹配数是否和课程数相等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> n, p;  <span class="comment">//学生人数、课程数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i]==<span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  <span class="comment">//求最大匹配数是否为课程数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;p, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a); <span class="comment">//第i门课有a个学生</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                link[i][b] = <span class="literal">true</span>; <span class="comment">//给课程匹配学生</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, solve()==p?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一点我不是很懂，我在代码里面加了一句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p!=n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就会wa。</p>
<p>但是我觉得这道题要是想成立学生数和课程数一定得先相等啊。。。</p>
<p>A few moments later， 我懂了，原来是允许有学生一门课都不选的，，，这学生真，，，</p>
]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Fire Net(缩图+二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Fire-Net/</url>
    <content><![CDATA[<h3 id="Fire-Net-【HDU-1045】"><a href="#Fire-Net-【HDU-1045】" class="headerlink" title="Fire Net 【HDU 1045】"></a>Fire Net 【<a href="https://vjudge.net/problem/HDU-1045" target="_blank" rel="noopener">HDU 1045</a>】</h3><p>学艺不精，是个菜鸡。。。调试了一个小时发现一个逗号语句用错了</p>
<p>重新来学学一遍逗号表达式的用法：</p>
<blockquote>
<p>表达式1，表达式2，表达式3，…… ，表达式n</p>
<p>逗号表达式的要领：</p>
<p>(1) 逗号表达式的运算过程为：从左往右逐个计算表达式。</p>
<p>(2) 逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值。</p>
<p>(3) 逗号<a href="https://baike.baidu.com/item/运算符" target="_blank" rel="noopener">运算符</a>的优先级别在所有运算符中最低。</p>
</blockquote>
<p>我一开始在for循环里面写了这么一个鬼东西：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[i][k] == <span class="string">'.'</span> , k &lt; n; ++k)</span><br><span class="line">                        row[i][k] = rcnt;</span><br></pre></td></tr></table></figure>

<p>事实证明，有些东西用起来好像很nb，但如果不是非常明确这个东西怎么用就不要乱用，逗号表达式从左向右计算，它的值只是最后一个表达式的值，不要把它误用成“&amp;&amp;”。</p>
<p>好了，言归正传，这道题我看好多博客里面都是直接dfs做的，看起来十分暴躁朴素（？）。但这道题被归在匹配问题里面我就老老实实去用二分匹配图稿它了，这道题是道匈牙利算法，匈牙利那部分没有难度，难就难在建图（真的难想，反正我是没想到），这个建图运用了“缩图法”， 给图中每个点分配一个它所在的“行区域”和“列区域”，并以它的行区域和列区域编号分别代表它的行坐标和列坐标。</p>
<p><img src="http://a1.qpic.cn/psc?/V12SotN11LF5Eb/NZ9C4PTRAOGVNvAxFZDwtyHcIbqUDg52idTa73t00HaSbWEpRIt2xu410ZrdkWDM9dplS6..9gnsZVn03CdUxA!!/c&ek=1&kp=1&pt=0&bo=gAc4BAAAAAADJ7k!&tl=1&vuin=1517435708&tm=1585836000&sce=60-2-2&rf=0-0" alt=""></p>
<p>从图中可知（图画的确实挺丑的，逃），在该行相邻格子连通的格子组成一个行区域，同理可以定义列区域。</p>
<p>！！现在是重点，是建图的核心思想：若一个行区域和一个列区域相交，设这个相交区域为U，若U内有n个点，则这n个点中只能有一个点可以放炮台，也就是说U内的点是可以相互连通的，其中任意一个点可以发射炮弹到U中其他所有点。所以这道题就可以转化为求出这样的U区域最多有多少个。</p>
<p>根据二分图的定义，再来看一看这个图，所有的列区域互不相交，所有的行区域也是互不相交，可架设炮台的空地必为一个行区域和一个列区域交集中的一个元素，要求是求出行区域和列区域的交集最多有多少个。那么我们就可以把这个图看作一个二分图G，行区域集合和列区域集合分别看作点集U,V， 每个空地的行区域编号和列区域编号之间可以连线，这道题就实质上是一个二分图最大匹配问题，用匈牙利算法就可以轻松将其解决。</p>
<p>下面是代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(a,x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];   <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];  <span class="comment">//记录某个行区域和列区域是否相交</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];  <span class="comment">//记录这个列区域有没有被访问过</span></span><br><span class="line"><span class="keyword">int</span> ma[maxn], mma[maxn];  <span class="comment">//分别记录列区域匹配的是哪个行区域、行区域匹配的是哪个列区域</span></span><br><span class="line"><span class="keyword">int</span> row[maxn][maxn], col[maxn][maxn];  <span class="comment">//存储原图中点所在的行区域编号、列区域编号</span></span><br><span class="line"><span class="keyword">int</span> n, rcnt, ccnt;  <span class="comment">//矩阵规模、行区域编号、列区域编号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ccnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i]) </span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i] == <span class="number">-1</span> || judge(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                mma[x] = i;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span>  <span class="comment">//给行区域匹配列区域，反之亦可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RE(ma, <span class="number">-1</span>);</span><br><span class="line">    RE(mma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mma[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            RE(vis, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(judge(i))</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n) &#123;</span><br><span class="line">        RE(row, <span class="number">-1</span>); RE(col, <span class="number">-1</span>); RE(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rcnt = <span class="number">0</span>, ccnt = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'.'</span> &amp;&amp; row[i][j] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[i][k] == <span class="string">'.'</span> &amp;&amp; k &lt; n; ++k)</span><br><span class="line">                        row[i][k] = rcnt;</span><br><span class="line">                    ++rcnt;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mp[j][i] == <span class="string">'.'</span> &amp;&amp; col[j][i] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; mp[k][i] == <span class="string">'.'</span> &amp;&amp; k &lt; n; ++k)</span><br><span class="line">                        col[k][i] = ccnt;</span><br><span class="line">                    ++ccnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'.'</span>) link[row[i][j]][col[i][j]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getans());</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>领地选择（前缀和+贪心）</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E9%A2%86%E5%9C%B0%E9%80%89%E6%8B%A9%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C+%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/04/12/GqqRYV.jpg" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试数据</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">1 2 3 1</span></span><br><span class="line"><span class="comment">-1 9 0 2</span></span><br><span class="line"><span class="comment">2 0 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn][maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; good;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    s-=<span class="number">1</span>;</span><br><span class="line">    good.first = <span class="number">1</span>;</span><br><span class="line">    good.second = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i][j]);</span><br><span class="line">            sum[i][j] += sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> maximum = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + s&lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + s&lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = i + s, q = j + s;</span><br><span class="line">            <span class="keyword">if</span>(p &lt;= n &amp;&amp; q &lt;= m) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = sum[p][q]-sum[p][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][q]+sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(maximum &lt; temp) &#123;</span><br><span class="line">                    good.first = i;</span><br><span class="line">                    good.second = j;</span><br><span class="line">                    maximum = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, good.first, good.second);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;          </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>求和</title>
    <url>/2020/06/20/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p><img src="http://chuantu.xyz/t6/727/1586423098x2099719707.jpg" alt=""></p>
<p>要求的是：$\sum\limits_{i=1}^n(x_i+z_i)(ID_x+ID_z)$     （注：$x_i$是纸条编号为$ID_x$时候的值）</p>
<p>我们将这个式子化简得到：$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$    <strong>（*)</strong></p>
<p>再观察这个题目，发现可行的一对$(ID_x, ID_z)$ 必须满足的条件是：$ID_x$和$ID_z$的奇偶性必须相同，这样才能使得点y到点x和点z的距离相等，这个用数学方法很容易证明，如：</p>
<p>（1）若$ID_y$为奇数：</p>
<p>奇数-奇数=偶数，奇数+奇数=偶数； 奇数-偶数=奇数，奇数+奇数=奇数；</p>
<p>（2）同理可证当$ID_y$为偶数的情况</p>
<p>有了上面的结论，就可以把纸带上的点进行分类，首先根据点的奇偶性分出来两个集合，然后把每个集合内部的点根据是否是同一种颜色再分成一个个小集合（储存的是点的$ID$，即奇偶性和颜色都相同的点的集合，使用变长数组$vector$进行储存），储存时注意要按照$ID$的大小从小到大储存，因为x是要小于z的。</p>
<p>当我们对小集合内部进行<strong>(*)</strong>式的累加时，对其使用数学手段进行优化：</p>
<p>假设这个小集合内部有5个点，分别以$x,y,a,b,z$ 代替，</p>
<img src="http://chuantu.xyz/t6/727/1586425311x2099719707.png" style="zoom:67%;" />

<p>可以看到每个点都可以与其他的点相连，每个点可以连4条边，但是重复的边要去掉，那么对于这个式子:$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$    <strong>（*)</strong></p>
<p>先要理解$(x_iID_x+x_iID_z+z_iID_x+z_iID_z)$表示的是点$x_i$和点$z_i$连成一条边时候的一个三元组的和。那么图中的这5个点可以连成的边有：$(x,y),(x,a),(x,b),(x,z),(y,a),(y,b),(y,z),(a,b),(a,z),(b,z)$   ，每个点都连有4条边，所以<strong>(*)</strong>式展开后系数为$x_i,y_i,a_i,b_i,z_i $的项各有8个，这样下面的式子化简就好理解了。</p>
<p>只看系数为$x_i$的项，考虑到点x和其他所有点都连出一条边，则只包含系数$x_i$的项的总和为：$4xID_x+x(ID_y+ID_a+ID_b+ID_z) = 3xID_x+x(ID_x+ID_y+ID_a+ID_b+ID_z)=3xID_x+x\sum\limits_{i=x}^zID_i$</p>
<p>同理可得只包含系数$y_i$的项的总和为：$3yID_y+y\sum\limits_{i=x}^zID_i$</p>
<p>所以$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z3mID_m+\sum\limits_{m=x}^z(m\sum\limits_{n=x}^zID_n)$ </p>
<p>推广到n个点，$(n-1)$ 条边，则有：$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^z(m\sum\limits_{n=x}^zID_n)$ </p>
<p>另外值得一提的是，由于$x$与$ID_x$的地位相同，上式还可以写成：</p>
<p>$\sum\limits_{i=1}^n(x_iID_x+x_iID_z+z_iID_x+z_iID_z)=\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^z(ID_m\sum\limits_{n=x}^zn)$ </p>
<p>此外，题目数据较大，结果要模10007，但为了以防数据范围溢出，我们可以在每一个计算的地方都模10007。</p>
<p>附，模运算公式：</p>
<ul>
<li>(a + b) % p = (a%p + b%p) %p</li>
<li>(a - b) % p = ((a%p - b%p) + p) %p</li>
<li>(a * b) % p = (a%p)*(b%p) %p</li>
</ul>
<p>则有：$\sum\limits_{m=x}^z(n-2)mID_m+\sum\limits_{m=x}^zID_m\sum\limits_{n=x}^zn=\sum\limits_{m=x}^z(n-2)%10007m%10007ID_m%10007+\sum\limits_{m=x}^z(ID_m%10007\sum\limits_{n=x}^zn%10007)$  </p>
<p>根据上面的式子，就容易理解代码了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 测试用样例</span></span><br><span class="line"><span class="comment">6 2</span></span><br><span class="line"><span class="comment">5 5 3 2 2 2</span></span><br><span class="line"><span class="comment">2 2 1 1 2 1</span></span><br><span class="line"><span class="comment">output: 82</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">15 4</span></span><br><span class="line"><span class="comment">5 10 8 2 2 2 9 9 7 7 5 6 4 2 4</span></span><br><span class="line"><span class="comment">2 2 3 3 4 3 3 2 4 4 4 4 1 1 1</span></span><br><span class="line"><span class="comment">output: 1388</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 10007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>; <span class="comment">//最多有maxn种颜色</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; odd[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; even[maxn];</span><br><span class="line">ll val[maxn];  <span class="comment">//点所对应的值</span></span><br><span class="line">ll n, m; <span class="comment">//n个点，m种颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</span><br><span class="line">    ll color;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;color);</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) odd[color].push_back(i);</span><br><span class="line">        <span class="keyword">else</span> even[color].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//到此输入全部完成</span></span><br><span class="line">    ll total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= m; ++t) <span class="comment">//列举每种颜色</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//开始计算奇数且颜色为t的集合的三元组的总和</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = odd[t].<span class="built_in">size</span>();        </span><br><span class="line">        ll val_sum = <span class="number">0</span>;        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            val_sum += val[odd[t][i]]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            total += ((<span class="built_in">size</span><span class="number">-2</span>)%mod*odd[t][i]%mod*</span><br><span class="line">            val[odd[t][i]]%mod+odd[t][i]%mod*val_sum%mod)%mod; </span><br><span class="line">            total %= mod;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始计算偶数且颜色为t的集合的三元组的总和</span></span><br><span class="line">        <span class="built_in">size</span> = even[t].<span class="built_in">size</span>();        </span><br><span class="line">        val_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            val_sum += val[even[t][i]]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            total += ((<span class="built_in">size</span><span class="number">-2</span>)%mod*even[t][i]%mod*</span><br><span class="line">            val[even[t][i]]%mod+even[t][i]%mod*val_sum%mod)%mod;</span><br><span class="line">            total %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, total%mod);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前缀和与差分</category>
      </categories>
      <tags>
        <tag>前缀和与差分</tag>
      </tags>
  </entry>
  <entry>
    <title>Swap(二分图最大匹配)[HDU 2819]</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Swap(%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D)%5BHDU-2819%5D/</url>
    <content><![CDATA[<h4 id="Swap-二分图最大匹配-HDU-2819"><a href="#Swap-二分图最大匹配-HDU-2819" class="headerlink" title="Swap(二分图最大匹配)[HDU 2819]"></a>Swap(二分图最大匹配)[HDU 2819]</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> row[maxn], col[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i] == <span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) ++sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("input.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">                <span class="keyword">if</span>(a) link[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hungary() &lt; n) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            MEM(row, <span class="number">0</span>); MEM(col, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">1</span>; ma[j] != i &amp;&amp; j &lt;= n; ++j);</span><br><span class="line">                <span class="keyword">if</span>(i != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    row[cnt] = i;</span><br><span class="line">                    col[cnt++] = j;</span><br><span class="line">                    swap(ma[i], ma[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"C %d %d\n"</span>, row[i], col[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>匹配问题概述</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/Introduction/</url>
    <content><![CDATA[<h1 id="匹配问题概述"><a href="#匹配问题概述" class="headerlink" title="匹配问题概述"></a>匹配问题概述</h1><p>匹配问题有很多，像二分图匹配、字符串匹配等</p>
<h4 id="一、匈牙利算法：https-blog-csdn-net-sunny-hun-article-details-80627351"><a href="#一、匈牙利算法：https-blog-csdn-net-sunny-hun-article-details-80627351" class="headerlink" title="一、匈牙利算法：https://blog.csdn.net/sunny_hun/article/details/80627351"></a>一、匈牙利算法：<a href="https://blog.csdn.net/sunny_hun/article/details/80627351" target="_blank" rel="noopener">https://blog.csdn.net/sunny_hun/article/details/80627351</a></h4><h4 id="二、增广路径讲解："><a href="#二、增广路径讲解：" class="headerlink" title="二、增广路径讲解："></a>二、增广路径讲解：</h4><p>这是我觉得讲得最详细的一个版本了：<a href="https://blog.csdn.net/reid_zhang1993/article/details/44080167" target="_blank" rel="noopener">https://blog.csdn.net/reid_zhang1993/article/details/44080167</a></p>
<h4 id="三、Hop-Craft算法："><a href="#三、Hop-Craft算法：" class="headerlink" title="三、Hop-Craft算法："></a>三、Hop-Craft算法：</h4><p><a href="https://blog.csdn.net/Wall_F/article/details/8248373?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/Wall_F/article/details/8248373?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p>
<p><a href="https://www.cnblogs.com/penseur/archive/2013/06/16/3138981.html" target="_blank" rel="noopener">https://www.cnblogs.com/penseur/archive/2013/06/16/3138981.html</a></p>
<h4 id="四、KM算法：https-www-cnblogs-com-wenruo-p-5264235-html"><a href="#四、KM算法：https-www-cnblogs-com-wenruo-p-5264235-html" class="headerlink" title="四、KM算法：https://www.cnblogs.com/wenruo/p/5264235.html"></a>四、KM算法：<a href="https://www.cnblogs.com/wenruo/p/5264235.html" target="_blank" rel="noopener">https://www.cnblogs.com/wenruo/p/5264235.html</a></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> love[MAXN][MAXN];   <span class="comment">// 记录每个妹子和每个男生的好感度</span></span><br><span class="line"><span class="keyword">int</span> ex_girl[MAXN];      <span class="comment">// 每个妹子的期望值</span></span><br><span class="line"><span class="keyword">int</span> ex_boy[MAXN];       <span class="comment">// 每个男生的期望值</span></span><br><span class="line"><span class="keyword">bool</span> vis_girl[MAXN];    <span class="comment">// 记录每一轮匹配匹配过的女生</span></span><br><span class="line"><span class="keyword">bool</span> vis_boy[MAXN];     <span class="comment">// 记录每一轮匹配匹配过的男生</span></span><br><span class="line"><span class="keyword">int</span> match[MAXN];        <span class="comment">// 记录每个男生匹配到的妹子 如果没有则为-1</span></span><br><span class="line"><span class="keyword">int</span> slack[MAXN];        <span class="comment">// 记录每个汉子如果能被妹子倾心最少还需要多少期望值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> girl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis_girl[girl] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> boy = <span class="number">0</span>; boy &lt; N; ++boy) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vis_boy[boy]) <span class="keyword">continue</span>; <span class="comment">// 每一轮匹配 每个男生只尝试一次</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gap = ex_girl[girl] + ex_boy[boy] - love[girl][boy];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;  <span class="comment">// 如果符合要求</span></span><br><span class="line">            vis_boy[boy] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (match[boy] == <span class="number">-1</span> || dfs( match[boy] )) &#123;    <span class="comment">// 找到一个没有匹配的男生 或者该男生的妹子可以找到其他人</span></span><br><span class="line">                match[boy] = girl;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slack[boy] = <span class="built_in">min</span>(slack[boy], gap);  <span class="comment">// slack 可以理解为该男生要得到女生的倾心 还需多少期望值 取最小值 备胎的样子【捂脸</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span> match);    <span class="comment">// 初始每个男生都没有匹配的女生</span></span><br><span class="line">    <span class="built_in">memset</span>(ex_boy, <span class="number">0</span>, <span class="keyword">sizeof</span> ex_boy);   <span class="comment">// 初始每个男生的期望值为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个女生的初始期望值是与她相连的男生最大的好感度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        ex_girl[i] = love[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            ex_girl[i] = <span class="built_in">max</span>(ex_girl[i], love[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试为每一个女生解决归宿问题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fill</span>(slack, slack + N, INF);    <span class="comment">// 因为要取最小值 初始化为无穷大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 为每个女生解决归宿问题的方法是 ：如果找不到就降低期望值，直到找到为止</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录每轮匹配中男生女生是否被尝试匹配过</span></span><br><span class="line">            <span class="built_in">memset</span>(vis_girl, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis_girl);</span><br><span class="line">            <span class="built_in">memset</span>(vis_boy, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis_boy);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dfs(i)) <span class="keyword">break</span>;  <span class="comment">// 找到归宿 退出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不能找到 就降低期望值</span></span><br><span class="line">            <span class="comment">// 最小可降低的期望值</span></span><br><span class="line">            <span class="keyword">int</span> d = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="keyword">if</span> (!vis_boy[j]) d = <span class="built_in">min</span>(d, slack[j]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">                <span class="comment">// 所有访问过的女生降低期望值</span></span><br><span class="line">                <span class="keyword">if</span> (vis_girl[j]) ex_girl[j] -= d;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 所有访问过的男生增加期望值</span></span><br><span class="line">                <span class="keyword">if</span> (vis_boy[j]) ex_boy[j] += d;</span><br><span class="line">                <span class="comment">// 没有访问过的boy 因为girl们的期望值降低，距离得到女生倾心又进了一步！</span></span><br><span class="line">                <span class="keyword">else</span> slack[j] -= d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配完成 求出所有配对的好感度的和</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        res += love[ match[i] ][i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;love[i][j]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, KM());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>逆序数（离散化+树状数组）</title>
    <url>/2020/06/20/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E9%80%86%E5%BA%8F%E6%95%B0%EF%BC%88%E7%A6%BB%E6%95%A3%E5%8C%96+%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%89/</url>
    <content><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/problem/15163" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/15163</a><br>来源：牛客网</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。比如一个序列为4 5 1 3 2， 那么这个序列的逆序数为7，逆序对分别为(4, 1), (4, 3), (4, 2), (5, 1), (5, 3), (5, 2),(3, 2)。</p>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><blockquote>
<p>第一行有一个整数n(1 &lt;= n &lt;= 100000),  然后第二行跟着n个整数，对于第i个数a[i]，(0 &lt;= a[i] &lt;= 100000)。</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><blockquote>
<p>输出这个序列中的逆序数</p>
</blockquote>
<p>示例1</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">4 5 1 3 2</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h3 id="这类题的题解"><a href="#这类题的题解" class="headerlink" title="这类题的题解"></a>这类题的题解</h3><blockquote>
<p><a href="https://www.cnblogs.com/xiongmao-cpp/p/5043340.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiongmao-cpp/p/5043340.html</a></p>
<p><a href="https://www.cnblogs.com/Staceyacm/p/10781853.html" target="_blank" rel="noopener">https://www.cnblogs.com/Staceyacm/p/10781853.html</a></p>
<p><a href="https://www.cnblogs.com/zqy123/p/5017087.html" target="_blank" rel="noopener">https://www.cnblogs.com/zqy123/p/5017087.html</a></p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll tree[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn]; <span class="comment">//离散化处理数组</span></span><br><span class="line">pair&lt;ll, <span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += delta;</span><br><span class="line">        x += x&amp;(-x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += tree[x];</span><br><span class="line">        x -= x&amp;(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i].first;</span><br><span class="line">        p[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        r[p[i].second] = i;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        update(r[i], <span class="number">1</span>);</span><br><span class="line">        ans += i - getsum(r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 7</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树状数组</category>
      </categories>
      <tags>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>The Accommodation of Students(判断二分图+二分图最大匹配)</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/The-Accommodation-of-Students/</url>
    <content><![CDATA[<h4 id="The-Accommodation-of-Students【HDU-2444】"><a href="#The-Accommodation-of-Students【HDU-2444】" class="headerlink" title="The Accommodation of Students【HDU 2444】"></a>The Accommodation of Students【<a href="https://vjudge.net/problem/HDU-2444" target="_blank" rel="noopener">HDU 2444</a>】</h4><p>这道题核心是：判断二分图+二分图最大匹配</p>
<p>题目给定了总人数、匹配数、每一组匹配的关系双方，我的做法是先设定u,v两个数组，之后每输入一组关系，进行下列判断：</p>
<p>​    若输入存在关系的两点是a,b;</p>
<p>​    情形一：a点可以放进u， b进v;</p>
<p>​    情形二：b点可以放进v， a进u;</p>
<p>​    若a,b情形一、二均不满足，则不成图。</p>
<p>现在先讨论情形一成立需要满足的条件：</p>
<p>​    （1）a点之前不存在于u中。</p>
<p>​    （2）b点之前不存在于u中。</p>
<p>​    （3）a与u中的其余各点均不存在关系。</p>
<p>那么接下来我们讨论一下怎样让这三个条件都成立：首先，a,b之间存在关系已经是毋庸置疑的事实，那么在我们进行判断之前可以确定关系：link[a][b]=link[b][a]=true，这样条件（2）的判断就可以合并到条件（3）中，结合条件（1）可知，我们判断的过程是：对u进行for循环判断时，若a与循环里任何点有联系，就可以直接返回判断这个情形不成立，若情形一成立，就设置link[a][a]=link[b][b]=true; 这样条件（1）也可以合并到条件（3）中。</p>
<p>所以，使用这种方法，我们在判断二分图的过程中也完成了对二分图的划分，但是这种方法时间复杂度比较高，（但我用染色体法写出来的那个一直wa……我也很无奈，，，</p>
<p>那就先放一下我一开始用的那种方法写的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">bool</span> link[maxn][maxn]; <span class="comment">//两人是否认识</span></span><br><span class="line"><span class="keyword">int</span> ma[maxn]; <span class="comment">//两人是否可以在一个房间</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> u[maxn];</span><br><span class="line"><span class="keyword">int</span> v[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="comment">//总人数，认识的人的对数</span></span><br><span class="line"><span class="keyword">int</span> ucnt, vcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifu</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//判断这个人可不可以加入u组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ucnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u[i]!=x &amp;&amp; link[x][u[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         <span class="comment">//如果x和u组内其他任何人存在关系，就不能再加入u组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifv</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=x &amp;&amp; link[x][v[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v[i]] &amp;&amp; link[x][v[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[v[i]] == <span class="number">-1</span> || dfs(ma[v[i]]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[v[i]] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">//给u中的人匹配v</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    RE(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ucnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RE(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(u[i])) sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        ucnt = <span class="number">0</span>, vcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        RE(link, <span class="literal">false</span>);</span><br><span class="line">        RE(u, <span class="number">-1</span>);</span><br><span class="line">        RE(v, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                link[a][b] = link[b][a] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(ifu(a) &amp;&amp; ifv(b))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!link[a][a]) &#123;</span><br><span class="line">                        u[ucnt++] = a; </span><br><span class="line">                        link[a][a] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!link[b][b]) &#123;</span><br><span class="line">                        v[vcnt++] = b;                                      </span><br><span class="line">                        link[b][b] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ifv(a) &amp;&amp; ifu(b)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!link[a][a]) &#123;</span><br><span class="line">                        v[vcnt++] = a;</span><br><span class="line">                        link[a][a] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!link[b][b]) &#123;</span><br><span class="line">                        u[ucnt++] = b;</span><br><span class="line">                        link[b][b] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> flag = <span class="literal">false</span>;                                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>棋盘问题（二分图最大匹配）</title>
    <url>/2020/06/20/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="淦"><a href="#淦" class="headerlink" title="淦"></a>淦</h1><h4 id="棋盘问题【HDU-1281】"><a href="#棋盘问题【HDU-1281】" class="headerlink" title="棋盘问题【HDU 1281】"></a>棋盘问题【HDU 1281】</h4><p>wa了半天原来是因为数组开小了，题目给的数据范围是1~100，我出于对整数的一种强迫性偏执就开了100<em>100的数组，一直wa，后来改成102\</em>102就a了。。。。。。</p>
<p>这道就是一道板子题，在求最大匹配的基础上把每一个可行点暴力一遍，看看少了这个点以后最大匹配数会不会发生改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">bool</span> link[<span class="number">555</span>][<span class="number">555</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ma[maxn];</span><br><span class="line"><span class="keyword">int</span> saverow[maxn];</span><br><span class="line"><span class="keyword">int</span> savecol[maxn];</span><br><span class="line"><span class="keyword">int</span> row, col, n;</span><br><span class="line"><span class="keyword">int</span> kase = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= col; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; link[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(ma[i]==<span class="number">-1</span> || dfs(ma[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ma[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span>  <span class="comment">//给行匹配列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MEM(ma, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MEM(vis, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) total++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;row, &amp;col, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        MEM(link, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            link[a][b] = <span class="literal">true</span>;</span><br><span class="line">            saverow[i] = a;</span><br><span class="line">            savecol[i] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = solve();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            link[saverow[i]][savecol[i]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(solve() &lt; sum) cnt++; </span><br><span class="line">            link[saverow[i]][savecol[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Board %d have %d important blanks for %d chessmen.\n"</span>, kase++, cnt, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>匹配问题</category>
      </categories>
      <tags>
        <tag>匹配问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Dungeon Master（简单bfs）[POJ2251]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Dungeon-Master%EF%BC%88%E7%AE%80%E5%8D%95bfs%EF%BC%89%5BPOJ2251%5D/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/POJ-2251" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p> You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.</p>
<p> Is an escape possible? If yes, how long will it take? </p>
<p> 简单翻译：给一个三维的迷宫（立体空间当中的），给出起点和终点的三维坐标，求出从起点到终点的最短距离。</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>  The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br>  L is the number of levels making up the dungeon.<br>  R and C are the number of rows and columns making up the plan of each level.<br>  Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a ‘#’ and empty cells are represented by a ‘.’. Your starting position is indicated by ‘S’ and the exit by the letter ‘E’. There’s a single blank line after each level. Input is terminated by three zeroes for L, R and C. </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form.</p>
<p>“Escaped in x minute(s). “</p>
<p>where x is replaced by the shortest time it takes to escape.<br>If it is not possible to escape, print the line </p>
<p>“ Trapped! “</p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>3 4 5<br>S….<br>.###.<br>.##..<br>###.#</p>
<p>#####<br>#####<br>##.##<br>##…</p>
<p>#####<br>#####<br>#.###<br>####E</p>
<p>1 3 3<br>S##<br>#E#<br>###</p>
<p>0 0 0</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>Escaped in 11 minute(s).<br>Trapped!</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span> [maxn][maxn][maxn];  <span class="comment">//map[z][x][y];</span></span><br><span class="line"><span class="keyword">bool</span> marked[maxn][maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> L,R,C;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dir</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;<span class="built_in">move</span>[]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//描述方向的时候不用结构化数组，用二维数组也可以，即：</span></span><br><span class="line"><span class="comment">//int dir[6][3]=&#123;&#123;1,0,0&#125;,......&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125;now,next,start,<span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//queue&lt;Node&gt; q;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void clear(queue&lt;Node&gt;&amp; q) &#123;</span></span><br><span class="line"><span class="comment">//    queue&lt;Node&gt; empty;</span></span><br><span class="line"><span class="comment">//    swap(empty, q);   //队列并没有.clear()方法，如果要用的话要自己定义</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> <span class="comment">//row, column, level</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[z][x][y]==<span class="string">'#'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(marked[z][x][y]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z&lt;<span class="number">0</span>||z&gt;=L) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=R) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;=C) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    q.push(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(now.l==<span class="built_in">end</span>.l&amp;&amp;now.r==<span class="built_in">end</span>.r&amp;&amp;now.c==<span class="built_in">end</span>.c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Escaped in "</span>&lt;&lt;now.<span class="built_in">step</span>&lt;&lt;<span class="string">" minute(s)."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                next.c=now.c+<span class="built_in">move</span>[i].c;</span><br><span class="line">                next.l=now.l+<span class="built_in">move</span>[i].l;</span><br><span class="line">                next.r=now.r+<span class="built_in">move</span>[i].r;</span><br><span class="line">                next.<span class="built_in">step</span> = now.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">stop</span>(next.r, next.c, next.l))</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(next);</span><br><span class="line">                    marked[next.l][next.r][next.c]=<span class="literal">true</span>;  <span class="comment">//一开始wa就是因为忘记标记了</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Trapped!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R&gt;&gt;C)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!L &amp;&amp; !R &amp;&amp; !C) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(z=<span class="number">0</span>; z&lt;L; z++)  <span class="comment">//L</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(x=<span class="number">0</span>; x&lt;R; x++)  <span class="comment">//R</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(y=<span class="number">0</span>; y&lt;C; y++)  <span class="comment">//C</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">char</span> ch;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">'S'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        start.c = y;</span><br><span class="line">                        start.r = x;</span><br><span class="line">                        start.l = z;</span><br><span class="line">                        start.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">                        marked[z][x][y]=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">end</span>.c = y;</span><br><span class="line">                        <span class="built_in">end</span>.r = x;</span><br><span class="line">                        <span class="built_in">end</span>.l = z;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">map</span>[z][x][y] = ch;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//吞掉换行符</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//按照题目要求每一层之间输入有一个空行</span></span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(marked, <span class="number">0</span>, <span class="keyword">sizeof</span>(marked));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>I Hate It（线段树区间最大值）[HDU1754]</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/I-Hate-It%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%89%5BHDU1754%5D/</url>
    <content><![CDATA[<h4 id="I-Hate-It【HDU-1754】"><a href="#I-Hate-It【HDU-1754】" class="headerlink" title="I Hate It【HDU 1754】"></a>I Hate It【<a href="https://vjudge.net/problem/HDU-1754" target="_blank" rel="noopener">HDU 1754</a>】</h4><p>同样是道模板题，更新的时候语句换成这样：</p>
<p>tree[k].most = max(tree[k*2].most, tree[k*2+1].most);</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;  <span class="comment">//学生人数、操作数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> most;</span><br><span class="line">&#125;tree[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l = l;</span><br><span class="line">    tree[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].most);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span> ;</span><br><span class="line">    buildTree(k*<span class="number">2</span>, l, mid);</span><br><span class="line">    buildTree(k*<span class="number">2</span>+<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    tree[k].most = <span class="built_in">max</span>(tree[k*<span class="number">2</span>].most, tree[k*<span class="number">2</span>+<span class="number">1</span>].most);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].most = y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) updatePoint(k*<span class="number">2</span>, x, y);</span><br><span class="line">    <span class="keyword">else</span> updatePoint(k*<span class="number">2</span>+<span class="number">1</span>, x, y);</span><br><span class="line">    tree[k].most = <span class="built_in">max</span>(tree[k*<span class="number">2</span>].most, tree[k*<span class="number">2</span>+<span class="number">1</span>].most);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= tree[k].l &amp;&amp; y &gt;= tree[k].r)</span><br><span class="line">        <span class="keyword">return</span> tree[k].most;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; tree[k].r || y &lt; tree[k].l) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) ans = <span class="built_in">max</span>(ans, searchInterval(k*<span class="number">2</span>, x, y));</span><br><span class="line">    <span class="keyword">if</span>(y &gt;= mid) ans = <span class="built_in">max</span>(ans, searchInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();  <span class="comment">//调试了一遍这里必须吞掉换行符</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c %d %d"</span>, &amp;ch, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">'U'</span>) updatePoint(<span class="number">1</span>, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, searchInterval(<span class="number">1</span>, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        MEM(tree, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Fliptile（位运算搜索）[POJ3279]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Fliptile%EF%BC%88%E4%BD%8D%E8%BF%90%E7%AE%97%E6%90%9C%E7%B4%A2%EF%BC%89%5BPOJ3279%5D/</url>
    <content><![CDATA[<h3 id="二进制位运算："><a href="#二进制位运算：" class="headerlink" title="二进制位运算："></a>二进制位运算：</h3><h4 id="1-反转："><a href="#1-反转：" class="headerlink" title="1. 反转："></a>1. 反转：</h4><p>和1进行异或(^)会反转，和0不会。即：0^1=1，1^1=0； 而：0^0=0，1^0=1</p>
<h4 id="2-设置："><a href="#2-设置：" class="headerlink" title="2. 设置："></a>2. 设置：</h4><p>设置1：和1进行或(|)操作。 如：1|1=1,  0|1=1</p>
<p>​              二进制数和0进行或(|)保持不变</p>
<p>设置0：和0进行与(&amp;)操作。 如： 1&amp;0=0，0&amp;0=0</p>
<p>​              二进制数和1与(&amp;)保持不变</p>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  Farmer John knows that an intellectually satisfied cow is a happy cow who will give more milk. He has arranged a brainy activity for cows in which they manipulate an <em>M</em> × <em>N</em> grid (1 ≤ <em>M</em> ≤ 15; 1 ≤ <em>N</em> ≤ 15) of square tiles, each of which is colored black on one side and white on the other side.</p>
<p>  As one would guess, when a single white tile is flipped, it changes to black; when a single black tile is flipped, it changes to white. The cows are rewarded when they flip the tiles so that each tile has the white side face up. However, the cows have rather large hooves and when they try to flip a certain tile, they also flip all the adjacent tiles (tiles that share a full edge with the flipped tile). Since the flips are tiring, the cows want to minimize the number of flips they have to make.</p>
<p>  Help the cows determine the minimum number of flips required, and the locations to flip to achieve that minimum. If there are multiple ways to achieve the task with the minimum amount of flips, return the one with the least lexicographical ordering in the output when considered as a string. If the task is impossible, print one line with the word “IMPOSSIBLE”.</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>   Line 1: Two space-separated integers: <em>M</em> and <em>N</em><br>   Lines 2.. <em>M</em>+1: Line <em>i</em>+1 describes the colors (left to right) of row i of the grid with <em>N</em> space-separated integers which are 1 for black and 0 for white </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>  Lines 1.. <em>M</em>: Each line contains <em>N</em> space-separated integers, each specifying how many times to flip that particular location. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>4 4<br>1 0 0 1<br>0 1 1 0<br>0 1 1 0<br>1 0 0 1</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>0 0 0 0<br>1 0 0 1<br>1 0 0 1<br>0 0 0 0</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_len=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> ori[max_len];  <span class="comment">//记录最开始的地板的颜色情况</span></span><br><span class="line"><span class="keyword">int</span> temp[max_len];  <span class="comment">//记录每一次枚举的地板的颜色情况</span></span><br><span class="line"><span class="keyword">int</span> result[max_len];  <span class="comment">//记录每一次枚举的奶牛对地板的操作</span></span><br><span class="line"><span class="keyword">int</span> best[max_len];   <span class="comment">//每一次枚举后视least和now的大小关系对best(储存最少操作的情况)进行更新</span></span><br><span class="line"><span class="keyword">int</span> least,now;  <span class="comment">//分别记录最小操作数和当前枚举方法的操作数</span></span><br><span class="line"><span class="keyword">int</span> maxn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans*=a;</span><br><span class="line">        a*=a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBit</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> j, <span class="keyword">int</span> i)</span> <span class="comment">//将元素k的第j位设成i</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i) k |= (<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="keyword">else</span> k &amp;= ~(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> i)</span> <span class="comment">//得到元素k的第i位的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (k&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FlipBit</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> i)</span> <span class="comment">//将元素k的第i位进行反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k ^= (<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enume</span><span class="params">()</span>  <span class="comment">//enumeration:枚举</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t,switchs;   <span class="comment">//i,j是计数器</span></span><br><span class="line">    <span class="keyword">int</span> flag =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;maxn; i++)  <span class="comment">//按照字典序进行搜素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(temp,ori,<span class="keyword">sizeof</span>(ori)); <span class="comment">//把ori复制给temp对temp进行操作，不改动ori</span></span><br><span class="line">        switchs=i;  <span class="comment">//当前对该行进行的操作，switch的各位中：1代表反转，0代表保持不变</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[j]=switchs;  <span class="comment">//记录开关状态的比特值，也就是每一行各数位是否进行了反转，反转过则值为1，未反转过则值为0</span></span><br><span class="line">            <span class="keyword">for</span>(t=<span class="number">0</span>; t&lt;m; t++)  <span class="comment">//列举switchs存的每一位是1还是0；</span></span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">if</span>(GetBit(switchs, t))  <span class="comment">//如果得到switchs的该位是1， 则对该位进行反转</span></span><br><span class="line">                &#123;</span><br><span class="line">                    FlipBit(temp[j], t);</span><br><span class="line">                    <span class="keyword">if</span>(t&gt;<span class="number">0</span>) FlipBit(temp[j], t<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(t&lt;m<span class="number">-1</span>) FlipBit(temp[j], t+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;n<span class="number">-1</span>) temp[j+<span class="number">1</span>]^=switchs; <span class="comment">//更新第j行进行的反转操作对第j+1行产生的影响，temp[j+1]与switchs对应位进行异或，与1异或会反转，与0异或保持不变，上一行某一位的操作只可能对它垂直下方的数位产生影响，另外第n-1行由于没有下一行了，因此不进入该if语句            </span></span><br><span class="line">            switchs=temp[j]; <span class="comment">//switchs记录下一行需要进行的操作的情况，下一行需要进行反转的数为恰好是上一行值为1的数位，所以上一行各个数位的值就是需要施加给下一行对应数位的操作，因此直接把temp[j]赋值给switchs。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!temp[n<span class="number">-1</span>]) <span class="comment">//因为n-1行上面的所有行已经全部被操作为0，只需要判断第n-1行的值是否也为0，如果也是0，则说明操作成功，图中所有数位全部为0。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;n; p++)  <span class="comment">//计算这种情况总共需要的操作数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>; q&lt;m; q++)&#123;</span><br><span class="line">                    now+=GetBit(result[p],q);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(now&lt;least)  <span class="comment">//比较当前情况操作数是否小于之前的最小操作数，如果是，则把本次操作过程的记录result[]复制给best[]。</span></span><br><span class="line">            &#123;</span><br><span class="line">                least=now;</span><br><span class="line">                <span class="built_in">memcpy</span>(best, result, <span class="keyword">sizeof</span>(best));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            now=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(least==INF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;GetBit(best[i], j);</span><br><span class="line">                <span class="keyword">if</span>(j&lt;m<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            SetBit(ori[i], j, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=<span class="built_in">pow</span>(<span class="number">2</span>,m);  <span class="comment">//所有可能的操作情况</span></span><br><span class="line">    least=INF;</span><br><span class="line">    enume();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Catch That Cow（简单bfs）[POJ3278]</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/Catch-That-Cow%EF%BC%88%E7%AE%80%E5%8D%95bfs%EF%BC%89%5BPOJ3278%5D/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a><a href="https://vjudge.net/problem/HDU-2717" target="_blank" rel="noopener">Question</a>:</h4><blockquote>
<p>  Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>
<p>  * Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute<br>  * Teleporting: FJ can move from any point X to the point 2 × X in a single minute.</p>
<p>  If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it? </p>
<p>  简单翻译：在一条一维坐标轴上，给出起点和终点，该点一次只能走+1、-1、*2步，每走一次消耗一个单位时间，问一共最少消耗多少单位时间？</p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p>   Line 1: Two space-separated integers: N and K </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p> Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow. </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>5 17</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>4</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> start, terminal;</span><br><span class="line"><span class="keyword">int</span> marked[maxn]=&#123;<span class="number">0</span>&#125;;   <span class="comment">//记录该点有没有被走过</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">step</span>[maxn]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//记录走到该点消耗的步数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//struct Node  //用结构体这道题超内存了，</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    int pos;</span></span><br><span class="line"><span class="comment">//    int step;</span></span><br><span class="line"><span class="comment">//&#125;now,anext,head;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now,next;</span><br><span class="line">    marked[start]=<span class="number">1</span>;</span><br><span class="line">    q.push(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now==terminal)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">step</span>[now]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: next=now+<span class="number">1</span>;<span class="keyword">break</span>;<span class="comment">//switch()里面不能直接步数加一，之前存在队列里的已标记过的数组会被无缘无故</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: next=now<span class="number">-1</span>;<span class="keyword">break</span>;<span class="comment">//的加了一，之后再用front()方法使用它的时候会造成错误。</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: next=now*<span class="number">2</span>;<span class="keyword">break</span>;<span class="comment">//用结构体的话在这里加步数不会影响到队列里的元素，但用数组会，所以加步数在下面加</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!marked[next]&amp;&amp;next&gt;=<span class="number">0</span>&amp;&amp;next&lt;maxn)&#123;</span><br><span class="line">                marked[next]=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">step</span>[next]=<span class="built_in">step</span>[now]+<span class="number">1</span>;</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; empty;</span><br><span class="line">    swap(empty, q);   <span class="comment">//队列并没有.clear()方法，如果要用的话要自己定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;start&gt;&gt;terminal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">clear</span>(q);</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">memset</span>(marked, <span class="number">0</span>, <span class="keyword">sizeof</span>(marked));</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">step</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">step</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Latex——配置TexLive + VsCode</title>
    <url>/2020/06/20/%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/%E4%BD%BF%E7%94%A8Latex%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AETexLive-+-VsCode/</url>
    <content><![CDATA[<h2 id="一、下载Tex-Live"><a href="#一、下载Tex-Live" class="headerlink" title="一、下载Tex Live"></a>一、下载Tex Live</h2><p>不要直接去下载官网的安装包，下载极其慢。</p>
<p>下载前选择一个近一点的镜像下载zip包：<a href="http://tug.org/texlive/acquire-iso.html" target="_blank" rel="noopener">http://tug.org/texlive/acquire-iso.html</a></p>
<p><a href="http://mirrors.sjtug.sjtu.edu.cn/ctan/systems/texlive/Images/" target="_blank" rel="noopener">http://mirrors.sjtug.sjtu.edu.cn/ctan/systems/texlive/Images/</a></p>
<p>下载完成以后</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/NZ9C4PTRAOGVNvAxFZDwt4703mWPMAgRfp0Vx5jL7sVFDywr*a026O.Mn*hWDwsurg7VShk4HrStwBrStDT0iA!!/b&bo=jAXbAQAAAAADB3E!&rf=viewer_4" alt=""></p>
<p>对黄色那一项使用管理员身份打开，直接运行安装就可以，安装的时候不要自己去改路径了，使用默认路径就可以，安装的时候路径会自动加在环境变量里。</p>
<h2 id="二、-下载vscode并且安装texlive-workshop"><a href="#二、-下载vscode并且安装texlive-workshop" class="headerlink" title="二、 下载vscode并且安装texlive workshop"></a>二、 下载vscode并且安装texlive workshop</h2><p>搜索latex：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh7mXrkpnUS.4WJdjwCWS4L5ifEcLi9HeiMwnRqI5Kg2er3d3hFbT1Ch5PiGb*Vk5qJI3uSkXTVIrsScu3FyulmY!/b&bo=UQEgBAAAAAADF0Y!&rf=viewer_4" alt=""></p>
<h2 id="三、vscoded打开setting配置setting-json文件："><a href="#三、vscoded打开setting配置setting-json文件：" class="headerlink" title="三、vscoded打开setting配置setting.json文件："></a>三、vscoded打开setting配置setting.json文件：</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"editor.mouseWheelZoom"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Quiet Light"</span>,</span><br><span class="line">    <span class="attr">"debug.onTaskErrors"</span>: <span class="string">"debugAnyway"</span>,</span><br><span class="line">    <span class="attr">"C_Cpp.updateChannel"</span>: <span class="string">"Insiders"</span>,</span><br><span class="line">    <span class="attr">"http.proxySupport"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="attr">"latex-workshop.latex.magic.args"</span>: [</span><br><span class="line">        <span class="string">"-synctex=1"</span>,</span><br><span class="line">        <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">        <span class="string">"-file-line-error"</span>,</span><br><span class="line">        <span class="string">"%DOC%"</span>,</span><br><span class="line">    ],    </span><br><span class="line">  </span><br><span class="line">  <span class="attr">"latex-workshop.latex.tools"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 编译工具和命令</span></span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"-pdf"</span>,</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"-synctex=1"</span>,</span><br><span class="line">            <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">            <span class="string">"-file-line-error"</span>,</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [</span><br><span class="line">            <span class="string">"%DOCFILE%"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">  <span class="attr">"latex-workshop.latex.recipes"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xe-&gt;bib-&gt;xe-&gt;xe"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"pdf-&gt;bib-&gt;pdf-&gt;pdf"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="string">"pdflatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接覆盖保存就可以，不会对其他语言的编译产生影响</p>
<h2 id="四、尝试编译一个test-tex文件"><a href="#四、尝试编译一个test-tex文件" class="headerlink" title="四、尝试编译一个test.tex文件"></a>四、尝试编译一个test.tex文件</h2><p>创建一个test.tex文件，并将下面的代码填入其中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">    \usepackage&#123;ctex&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">你好，Latex</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p>在左侧菜单栏找到tex点击xelatex编译：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh7cJVwfb3q*vduCGJvcovDj.1mugpM5*zy4W2jyh1oXry2M0FtWt5jNrfCeSz1MkPxTOx7rJ9I3SEba38x*p0Ws!/b&bo=FwN9AgAAAAADF1k!&rf=viewer_4" alt=""></p>
<p>这时会弹出窗口报错，查看报错信息，显示：</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh5pRY9BgwaBnruiTBm9qY2Yj7OLmcqkagRIuxG3AIoRo7yqMzVdn6rLMZJGtkb1b8q2IUIxCcZl0eeXYA0tqLY8!/b&bo=mAJdAAAAAAADF*U!&rf=viewer_4" alt=""></p>
<p>推测是因为路径错误。</p>
<h2 id="五、添加路径"><a href="#五、添加路径" class="headerlink" title="五、添加路径"></a>五、添加路径</h2><p>打开环境变量，</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh2yLkElF*XK5lh*2sPN3k5XQzTtYU3GgclewQO.38PW9mB41h8PqchpIbhl1Q01xMwugbL6kPSStVaetLlkWpeo!/b&bo=ygOiAwAAAAADF1o!&rf=viewer_4" alt=""></p>
<p>对这两个path都添加：C:\Windows\System32 </p>
<p>再重启VsCode，发现可以编译成功。</p>
<h2 id="六、预览"><a href="#六、预览" class="headerlink" title="六、预览"></a>六、预览</h2><p>点击右上角图标即可预览</p>
<p><img src="http://m.qpic.cn/psc?/V12SotN11LF5Eb/YPhsM5mUO5.bFmyDEhTOh0bewXl4q4L9VY*kO9XTa4EYAIepTYFWumd4HMuYzNYAKFpC7gDS5ZH2JKhgRuq3XdcvrJ00sT1LTsETd.KCPh0!/b&bo=gAc4BAAAAAADF4k!&rf=viewer_4" alt=""></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>棋盘问题（dfs）</title>
    <url>/2020/06/20/%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98%5BPOJ%201321%5D(dfs%EF%BC%89/</url>
    <content><![CDATA[<h4 id="棋盘问题【POJ-1321】"><a href="#棋盘问题【POJ-1321】" class="headerlink" title="棋盘问题【POJ 1321】"></a>棋盘问题【POJ 1321】</h4><h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h4><blockquote>
<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。 </p>
</blockquote>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><blockquote>
<p> 输入含有多组测试数据。<br> 每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br> 当为-1 -1时表示输入结束。<br> 随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 </p>
</blockquote>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><blockquote>
<p>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。 </p>
</blockquote>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><blockquote>
<p>2 1<br>#.<br>.#<br>4 4<br>…#<br>..#.<br>.#..<br>#…<br>-1 -1</p>
</blockquote>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><blockquote>
<p>2<br>1</p>
</blockquote>
<h4 id="AC-codes"><a href="#AC-codes" class="headerlink" title="AC codes:"></a>AC codes:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">bool</span> used[maxn];  <span class="comment">//记录该行每一列位置的被使用情况</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">stop</span>[maxn][maxn];  <span class="comment">//标记棋盘上哪些点不能放棋子</span></span><br><span class="line"><span class="keyword">int</span> cnt;  <span class="comment">//记录总共可能的情况总数</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="comment">//定义的全局变量如果不加以说明，则int型默认为0，bool型默认为false;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x)</span>  <span class="comment">//x作为计数器，衡量何时出现等于k值；num代表当前是第几行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;k)  </span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=num;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i]&amp;&amp;!<span class="built_in">stop</span>[j][i])</span><br><span class="line">            &#123;</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                dfs(j+<span class="number">1</span>, x+<span class="number">1</span>);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">char</span> x;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">                <span class="keyword">if</span>(x==<span class="string">'.'</span>) <span class="built_in">stop</span>[i][j]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">stop</span>[i][j]=<span class="literal">false</span>;  <span class="comment">//else语句必须写，一开始因为这里wa了，上一轮的标记会影响下一轮</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();  <span class="comment">//cin会把换行符保存到缓冲区中，因此要把换行符吃掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        cnt=<span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>敌兵布阵（线段树模板题）[HDU1166]</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5%E3%80%90HDU%201166%E3%80%91/</url>
    <content><![CDATA[<p>点击“阅读全文”👇<a id="more"></a></p>
<h4 id="敌兵布阵【HDU1166】"><a href="#敌兵布阵【HDU1166】" class="headerlink" title="敌兵布阵【HDU1166】"></a>敌兵布阵【<a href="https://vjudge.net/problem/HDU-1166" target="_blank" rel="noopener">HDU1166</a>】</h4><p>一道线段树的模板题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;tree[maxn*<span class="number">4</span>+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[k].l = l;</span><br><span class="line">    tree[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = ( tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    buildTree(k*<span class="number">2</span>, l, mid);</span><br><span class="line">    buildTree(k*<span class="number">2</span>+<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == tree[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[k].sum += delta;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) updatePoint(k*<span class="number">2</span>, x, delta);</span><br><span class="line">    <span class="keyword">else</span> updatePoint(k*<span class="number">2</span>+<span class="number">1</span>, x, delta);</span><br><span class="line">    tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)</span><br><span class="line">        <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l &gt; y || tree[k].r &lt; x) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//这行不能少</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[k].l + tree[k].r ) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= x) ans += searchInterval(k*<span class="number">2</span>, x, y);</span><br><span class="line">    <span class="keyword">if</span>(mid &lt;= y) ans += searchInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++cnt);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) &amp;&amp; s[<span class="number">0</span>] != <span class="string">'E'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>) updatePoint(<span class="number">1</span>, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'S'</span>) updatePoint(<span class="number">1</span>, x, -y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,searchInterval(<span class="number">1</span>, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        MEM(tree, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树概述</title>
    <url>/2020/06/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h4 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h4><p>线段树是一种二叉搜索树，主要是为了储存和查询信息</p>
<p>这篇博客讲得挺详细的：<a href="https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html" target="_blank" rel="noopener">https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html</a></p>
<h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><ul>
<li>建树</li>
<li>查询某个点的值</li>
<li>修改某个点的值</li>
<li>查询某个区间的值</li>
<li>修改某个区间的值（对一整个区间上所有元素加或减同一个数）</li>
</ul>
<h4 id="对几种主要操作的代码实现"><a href="#对几种主要操作的代码实现" class="headerlink" title="对几种主要操作的代码实现"></a>对几种主要操作的代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">666</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l;</span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	<span class="keyword">int</span> f;</span><br><span class="line">	<span class="keyword">int</span> sum;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建树操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//区间的范围是l~r, 树的编号是K</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tree[k].l = l;  </span><br><span class="line">	tree[k].r = r;</span><br><span class="line">	<span class="keyword">if</span>(l == r) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[k].sum);  <span class="comment">//当l==r时，说明这一段已经成一个点了，也就是叶节点</span></span><br><span class="line">	<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">	buildTree(l, mid, <span class="number">2</span> * k);</span><br><span class="line">	buildTree(mid + <span class="number">1</span>, r, <span class="number">2</span> * k + <span class="number">1</span>);</span><br><span class="line">	tree[k].sum = tree[<span class="number">2</span> * k].sum + tree[<span class="number">2</span> * k + <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询某点的值的操作,设待查询的点为x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchPoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span>  <span class="comment">//一开始的k是根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l == tree[k].r) <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) searchPoint(k * <span class="number">2</span>, x);</span><br><span class="line">	<span class="keyword">else</span> searchPoint(k * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改某点的值（只是在查询操作的基础上做了两个改动）</span></span><br><span class="line"><span class="comment">//将x点上的值改为y</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePoint</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l == tree[k].r) </span><br><span class="line">	&#123;</span><br><span class="line">		tree[k].sum += delta;  <span class="comment">//这里有改动</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) updatePoint(k * <span class="number">2</span>, x, delta);</span><br><span class="line">	<span class="keyword">else</span> updatePoint(k * <span class="number">2</span> + <span class="number">1</span>, x, delta);</span><br><span class="line">	tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;  <span class="comment">//新增一条语句用于更新父结点的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询某区间的值</span></span><br><span class="line"><span class="comment">//x, y分别为区间的左端点、右端点, ans为区间的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)  <span class="comment">//该区间完全被包含在查询区域中</span></span><br><span class="line">		<span class="keyword">return</span> tree[k].sum;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x &gt; tree[k].r || y &lt; tree[k].l) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(x  &lt;= mid) ans += searchInterval(k * <span class="number">2</span>, x, y);</span><br><span class="line">	<span class="keyword">if</span>(y &gt; mid) ans += searchInterval(k * <span class="number">2</span> + <span class="number">1</span>, x, y);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改某区间上的值</span></span><br><span class="line"><span class="comment">//（1）懒标记下传 [当前结点的懒标记的值储存在父结点（防止重复储存）]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tree[k*<span class="number">2</span>].f += tree[k].f;</span><br><span class="line">	tree[k*<span class="number">2</span>+<span class="number">1</span>].f += tree[k].f;</span><br><span class="line">	tree[k*<span class="number">2</span>].sum += tree[k].f * (tree[k*<span class="number">2</span>].r - tree[k*<span class="number">2</span>].l + <span class="number">1</span>);</span><br><span class="line">	tree[k*<span class="number">2</span>+<span class="number">1</span>].sum += tree[k].f * (tree[k*<span class="number">2</span>+<span class="number">1</span>].r - tree[k*<span class="number">2</span>+<span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">	tree[k].f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)进行修改，对目标区间[x,y]里面的每一个元素都加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateInterval</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].l &gt;= x &amp;&amp; tree[k].r &lt;= y)</span><br><span class="line">	&#123;</span><br><span class="line">		tree[k].sum += (tree[k].r - tree[k].l + <span class="number">1</span>) * delta;</span><br><span class="line">		tree[k].f += delta;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tree[k].f) pushDown(k);</span><br><span class="line">	<span class="keyword">int</span> mid = (tree[k].l + tree[k].r) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &gt;= x) updateInterval(k*<span class="number">2</span>, x, y, delta);</span><br><span class="line">	<span class="keyword">if</span>(mid &lt;= y) updateInterval(k*<span class="number">2</span>+<span class="number">1</span>, x, y, delta);</span><br><span class="line">	tree[k].sum = tree[k*<span class="number">2</span>].sum + tree[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">6</span>, delta = <span class="number">1</span>;</span><br><span class="line">	buildTree(k, l, r); <span class="comment">//建树</span></span><br><span class="line">	searchPoint(k, x);  <span class="comment">//查询点的值</span></span><br><span class="line">	updatePoint(k, x, delta);  <span class="comment">//更改点的值</span></span><br><span class="line">	searchInterval(k, x, y);  <span class="comment">//查询区间的值</span></span><br><span class="line">	updateInterval(k, x, y, delta);  <span class="comment">//更改区间的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Exponentiation(1001 高精度幂运算)</title>
    <url>/2020/06/20/%E9%AB%98%E7%B2%BE%E5%BA%A6%20%E3%80%81%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/Exponentiation(1001-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B9%82%E8%BF%90%E7%AE%97)/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_41376979/article/details/79197186" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41376979/article/details/79197186</a></p>
<h2 id="大整数乘法"><a href="#大整数乘法" class="headerlink" title="大整数乘法"></a>大整数乘法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> in1[MAX], in2[MAX];</span><br><span class="line">    <span class="keyword">int</span> out[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> IN1, IN2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; IN1 &gt;&gt; IN2;</span><br><span class="line">    <span class="keyword">int</span> len1=IN1.length(), len2=IN2.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">        in1[i] = IN1[len1-i<span class="number">-1</span>]<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len2; ++i)</span><br><span class="line">        in2[i] = IN2[len2-i<span class="number">-1</span>]<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; ++j)</span><br><span class="line">            out[i+j] += in1[i] * in2[j];</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1+len2; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(out[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            out[i+<span class="number">1</span>] += out[i] / <span class="number">10</span>;</span><br><span class="line">            out[i] = out[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(out[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag &amp;&amp; s.top()) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="高精度幂运算（POJ-1001）"><a href="#高精度幂运算（POJ-1001）" class="headerlink" title="高精度幂运算（POJ 1001）"></a>高精度幂运算（POJ 1001）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> p;  <span class="comment">//power</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str &gt;&gt; p)&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>, ans[MAX]=&#123;<span class="number">0</span>&#125;, pointNum=<span class="number">0</span>, cnt=<span class="number">0</span>, len = str.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[len<span class="number">-1</span>-i] != <span class="string">'.'</span>) ans[cnt++] = str[len<span class="number">-1</span>-i]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'.'</span>) pointNum=len-i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                num *= <span class="number">10</span>;</span><br><span class="line">                num += str[i]-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p == <span class="number">0</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        cnt=p;</span><br><span class="line">        <span class="keyword">while</span>(--cnt)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] *= num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;  MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[i+<span class="number">1</span>] += ans[i]/<span class="number">10</span>;</span><br><span class="line">                    ans[i] %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mark = <span class="number">0</span>;   <span class="comment">//mark:非0的最高位出现的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = MAX<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]) &#123;mark = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mark2 = <span class="number">0</span>;   <span class="comment">//mark2:后缀零起点的位置+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mark; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]) &#123;mark2 = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pointNum *= p;   <span class="comment">//pointNum:个位数出现的位置</span></span><br><span class="line">        <span class="keyword">if</span>(pointNum==<span class="number">0</span>)  <span class="comment">//没有小数点，全是整数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = mark; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mark2 == <span class="number">0</span>)    <span class="comment">//没有后缀0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mark &lt; pointNum) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pointNum - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                    <span class="keyword">if</span>(i == pointNum) <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//有后缀零,要把后缀零处理掉,也要判断后缀零和小数点位置的关系</span></span><br><span class="line">            <span class="keyword">if</span>(mark2<span class="number">-1</span> == pointNum<span class="number">-1</span>)  <span class="comment">//后缀零的位置在0.1上，则需小数点和后缀零都要舍去,即只打印到个位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= pointNum; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mark2 &lt; pointNum)  <span class="comment">//后缀零的位置在0.01,0.001.....及以后，则保留小数点，只打印到后缀零前一位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mark &lt; pointNum) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = pointNum - <span class="number">1</span>; i &gt;= mark2; --i)</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = mark; i &gt;= mark2; --i) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">                        <span class="keyword">if</span>(i == pointNum) <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//后缀零的位置在小数点之前，则结果是个整数，打印范围是最高位非零整数到后缀零前一位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i  = mark; i &lt;= mark2; --i)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>高精度</category>
      </categories>
      <tags>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>配置VsCode</title>
    <url>/2020/06/20/%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/%E9%85%8D%E7%BD%AEVsCode/</url>
    <content><![CDATA[<p>大概的可以参照这篇博客：<a href="https://blog.csdn.net/bat67/article/details/76095813" target="_blank" rel="noopener">https://blog.csdn.net/bat67/article/details/76095813</a></p>
<p>主要是贴一下launch.json 和 tasks.json这两个文件，其中launch,json这个文件博客里给的是个坑</p>
<ul>
<li>launch.json </li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,  </span><br><span class="line">    <span class="attr">"configurations"</span>: [  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(gdb) Launch"</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示  </span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,       <span class="comment">// 配置类型，这里只能为cppdbg  </span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,    <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）  </span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,<span class="comment">// 将要进行调试的程序的路径  </span></span><br><span class="line">            <span class="attr">"args"</span>: [],             <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,   <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false  </span></span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span></span><br><span class="line">            <span class="attr">"environment"</span>: [],  </span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">true</span>, <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台  </span></span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,  </span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin\\gdb32.exe"</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应  </span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"g++"</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span></span><br><span class="line">            <span class="attr">"setupCommands"</span>: [  </span><br><span class="line">                &#123;   </span><br><span class="line">		    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,  </span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,  </span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>tasks.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"g++"</span>, <span class="comment">//这里注意一下，见下文</span></span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin\\g++.exe"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>可使用system(“pause”);或者设置断点防止程序突然关闭</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
